/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CallRecorder0825Interface extends utils.Interface {
  functions: {
    "lastCall()": FunctionFragment;
    "record()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "lastCall" | "record"): FunctionFragment;

  encodeFunctionData(functionFragment: "lastCall", values?: undefined): string;
  encodeFunctionData(functionFragment: "record", values?: undefined): string;

  decodeFunctionResult(functionFragment: "lastCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "record", data: BytesLike): Result;

  events: {};
}

export interface CallRecorder0825 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallRecorder0825Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastCall(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        sender: string;
        data: string;
        gas: BigNumber;
        value: BigNumber;
      }
    >;

    record(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  lastCall(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      sender: string;
      data: string;
      gas: BigNumber;
      value: BigNumber;
    }
  >;

  record(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    lastCall(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        sender: string;
        data: string;
        gas: BigNumber;
        value: BigNumber;
      }
    >;

    record(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    lastCall(overrides?: CallOverrides): Promise<BigNumber>;

    record(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lastCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    record(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
