/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CustomMeterUserInterface extends utils.Interface {
  functions: {
    "endGas()": FunctionFragment;
    "params()": FunctionFragment;
    "startGas()": FunctionFragment;
    "use(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "endGas" | "params" | "startGas" | "use"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "endGas", values?: undefined): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "startGas", values?: undefined): string;
  encodeFunctionData(functionFragment: "use", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "endGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "use", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface CustomMeterUser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CustomMeterUserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    endGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    startGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    use(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  endGas(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * EIP-1559 style gas parameters.
   */
  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  startGas(overrides?: CallOverrides): Promise<BigNumber>;

  use(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    endGas(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    startGas(overrides?: CallOverrides): Promise<BigNumber>;

    use(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    endGas(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<BigNumber>;

    startGas(overrides?: CallOverrides): Promise<BigNumber>;

    use(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    endGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    use(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
