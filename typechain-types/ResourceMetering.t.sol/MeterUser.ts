/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace ResourceMetering {
  export type ResourceConfigStruct = {
    maxResourceLimit: BigNumberish;
    elasticityMultiplier: BigNumberish;
    baseFeeMaxChangeDenominator: BigNumberish;
    minimumBaseFee: BigNumberish;
    systemTxMaxGas: BigNumberish;
    maximumBaseFee: BigNumberish;
  };

  export type ResourceConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber
  ] & {
    maxResourceLimit: number;
    elasticityMultiplier: number;
    baseFeeMaxChangeDenominator: number;
    minimumBaseFee: number;
    systemTxMaxGas: number;
    maximumBaseFee: BigNumber;
  };
}

export interface MeterUserInterface extends utils.Interface {
  functions: {
    "initialize()": FunctionFragment;
    "innerConfig()": FunctionFragment;
    "params()": FunctionFragment;
    "resourceConfig()": FunctionFragment;
    "set(uint128,uint64,uint64)": FunctionFragment;
    "setParams((uint32,uint8,uint8,uint32,uint32,uint128))": FunctionFragment;
    "use(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "initialize"
      | "innerConfig"
      | "params"
      | "resourceConfig"
      | "set"
      | "setParams"
      | "use"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "innerConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resourceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [ResourceMetering.ResourceConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "use", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "innerConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "use", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MeterUser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeterUserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    innerConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        maxResourceLimit: number;
        elasticityMultiplier: number;
        baseFeeMaxChangeDenominator: number;
        minimumBaseFee: number;
        systemTxMaxGas: number;
        maximumBaseFee: BigNumber;
      }
    >;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<[ResourceMetering.ResourceConfigStructOutput]>;

    set(
      _prevBaseFee: BigNumberish,
      _prevBoughtGas: BigNumberish,
      _prevBlockNum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setParams(
      newConfig: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    use(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  innerConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, BigNumber] & {
      maxResourceLimit: number;
      elasticityMultiplier: number;
      baseFeeMaxChangeDenominator: number;
      minimumBaseFee: number;
      systemTxMaxGas: number;
      maximumBaseFee: BigNumber;
    }
  >;

  /**
   * EIP-1559 style gas parameters.
   */
  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  resourceConfig(
    overrides?: CallOverrides
  ): Promise<ResourceMetering.ResourceConfigStructOutput>;

  set(
    _prevBaseFee: BigNumberish,
    _prevBoughtGas: BigNumberish,
    _prevBlockNum: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setParams(
    newConfig: ResourceMetering.ResourceConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  use(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(overrides?: CallOverrides): Promise<void>;

    innerConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, BigNumber] & {
        maxResourceLimit: number;
        elasticityMultiplier: number;
        baseFeeMaxChangeDenominator: number;
        minimumBaseFee: number;
        systemTxMaxGas: number;
        maximumBaseFee: BigNumber;
      }
    >;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<ResourceMetering.ResourceConfigStructOutput>;

    set(
      _prevBaseFee: BigNumberish,
      _prevBoughtGas: BigNumberish,
      _prevBlockNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      newConfig: ResourceMetering.ResourceConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    use(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    innerConfig(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<BigNumber>;

    resourceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _prevBaseFee: BigNumberish,
      _prevBoughtGas: BigNumberish,
      _prevBlockNum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setParams(
      newConfig: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    use(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    innerConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resourceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _prevBaseFee: BigNumberish,
      _prevBoughtGas: BigNumberish,
      _prevBlockNum: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setParams(
      newConfig: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    use(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
