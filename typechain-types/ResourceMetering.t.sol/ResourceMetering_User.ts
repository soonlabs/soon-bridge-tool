/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace ResourceMetering {
  export type ResourceConfigStruct = {
    maxResourceLimit: BigNumberish;
    elasticityMultiplier: BigNumberish;
    baseFeeMaxChangeDenominator: BigNumberish;
    minimumBaseFee: BigNumberish;
    systemTxMaxGas: BigNumberish;
    maximumBaseFee: BigNumberish;
  };

  export type ResourceConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber
  ] & {
    maxResourceLimit: number;
    elasticityMultiplier: number;
    baseFeeMaxChangeDenominator: number;
    minimumBaseFee: number;
    systemTxMaxGas: number;
    maximumBaseFee: BigNumber;
  };
}

export interface ResourceMetering_UserInterface extends utils.Interface {
  functions: {
    "burn(uint256,bool)": FunctionFragment;
    "failedLowerBaseFee()": FunctionFragment;
    "failedMaxGasPerBlock()": FunctionFragment;
    "failedMaxLowerBaseFeePerBlock()": FunctionFragment;
    "failedMaxRaiseBaseFeePerBlock()": FunctionFragment;
    "failedNeverBelowMinBaseFee()": FunctionFragment;
    "failedRaiseBaseFee()": FunctionFragment;
    "params()": FunctionFragment;
    "resourceConfig()": FunctionFragment;
    "underflow()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "failedLowerBaseFee"
      | "failedMaxGasPerBlock"
      | "failedMaxLowerBaseFeePerBlock"
      | "failedMaxRaiseBaseFeePerBlock"
      | "failedNeverBelowMinBaseFee"
      | "failedRaiseBaseFee"
      | "params"
      | "resourceConfig"
      | "underflow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "failedLowerBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMaxGasPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMaxLowerBaseFeePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedMaxRaiseBaseFeePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedNeverBelowMinBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedRaiseBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resourceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "underflow", values?: undefined): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failedLowerBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMaxGasPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMaxLowerBaseFeePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMaxRaiseBaseFeePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedNeverBelowMinBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedRaiseBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underflow", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ResourceMetering_User extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResourceMetering_UserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Takes the necessary parameters to allow us to burn arbitrary amounts of gas to test         the underlying resource metering/gas market logic
     */
    burn(
      _gasToBurn: BigNumberish,
      _raiseBaseFee: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    failedLowerBaseFee(overrides?: CallOverrides): Promise<[boolean]>;

    failedMaxGasPerBlock(overrides?: CallOverrides): Promise<[boolean]>;

    failedMaxLowerBaseFeePerBlock(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    failedMaxRaiseBaseFeePerBlock(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    failedNeverBelowMinBaseFee(overrides?: CallOverrides): Promise<[boolean]>;

    failedRaiseBaseFee(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<[ResourceMetering.ResourceConfigStructOutput]>;

    underflow(overrides?: CallOverrides): Promise<[boolean]>;
  };

  /**
   * Takes the necessary parameters to allow us to burn arbitrary amounts of gas to test         the underlying resource metering/gas market logic
   */
  burn(
    _gasToBurn: BigNumberish,
    _raiseBaseFee: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  failedLowerBaseFee(overrides?: CallOverrides): Promise<boolean>;

  failedMaxGasPerBlock(overrides?: CallOverrides): Promise<boolean>;

  failedMaxLowerBaseFeePerBlock(overrides?: CallOverrides): Promise<boolean>;

  failedMaxRaiseBaseFeePerBlock(overrides?: CallOverrides): Promise<boolean>;

  failedNeverBelowMinBaseFee(overrides?: CallOverrides): Promise<boolean>;

  failedRaiseBaseFee(overrides?: CallOverrides): Promise<boolean>;

  /**
   * EIP-1559 style gas parameters.
   */
  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  resourceConfig(
    overrides?: CallOverrides
  ): Promise<ResourceMetering.ResourceConfigStructOutput>;

  underflow(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    /**
     * Takes the necessary parameters to allow us to burn arbitrary amounts of gas to test         the underlying resource metering/gas market logic
     */
    burn(
      _gasToBurn: BigNumberish,
      _raiseBaseFee: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    failedLowerBaseFee(overrides?: CallOverrides): Promise<boolean>;

    failedMaxGasPerBlock(overrides?: CallOverrides): Promise<boolean>;

    failedMaxLowerBaseFeePerBlock(overrides?: CallOverrides): Promise<boolean>;

    failedMaxRaiseBaseFeePerBlock(overrides?: CallOverrides): Promise<boolean>;

    failedNeverBelowMinBaseFee(overrides?: CallOverrides): Promise<boolean>;

    failedRaiseBaseFee(overrides?: CallOverrides): Promise<boolean>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<ResourceMetering.ResourceConfigStructOutput>;

    underflow(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    /**
     * Takes the necessary parameters to allow us to burn arbitrary amounts of gas to test         the underlying resource metering/gas market logic
     */
    burn(
      _gasToBurn: BigNumberish,
      _raiseBaseFee: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    failedLowerBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    failedMaxGasPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    failedMaxLowerBaseFeePerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedMaxRaiseBaseFeePerBlock(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedNeverBelowMinBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    failedRaiseBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<BigNumber>;

    resourceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    underflow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Takes the necessary parameters to allow us to burn arbitrary amounts of gas to test         the underlying resource metering/gas market logic
     */
    burn(
      _gasToBurn: BigNumberish,
      _raiseBaseFee: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    failedLowerBaseFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMaxGasPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMaxLowerBaseFeePerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMaxRaiseBaseFeePerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedNeverBelowMinBaseFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedRaiseBaseFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resourceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underflow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
