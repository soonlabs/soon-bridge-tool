/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface L1ChugSplashProxyInterface extends utils.Interface {
  functions: {
    "getImplementation()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "setCode(bytes)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setStorage(bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getImplementation"
      | "getOwner"
      | "setCode"
      | "setOwner"
      | "setStorage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setCode", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStorage",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStorage", data: BytesLike): Result;

  events: {};
}

export interface L1ChugSplashProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1ChugSplashProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Queries the implementation address. Can only be called by the owner OR by making an         eth_call and setting the "from" address to address(0).
     */
    getImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Queries the owner of the proxy contract. Can only be called by the owner OR by         making an eth_call and setting the "from" address to address(0).
     */
    getOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Sets the code that should be running behind this proxy.         Note: This scheme is a bit different from the standard proxy scheme where one would         typically deploy the code separately and then set the implementation address. We're         doing it this way because it gives us a lot more freedom on the client side. Can         only be triggered by the contract owner.
     * @param _code New contract code to run inside this contract.
     */
    setCode(
      _code: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _owner New owner of the proxy contract.
     */
    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Modifies some storage slot within the proxy contract. Gives us a lot of power to         perform upgrades in a more transparent way. Only callable by the owner.
     * @param _key Storage key to modify.
     * @param _value New value for the storage key.
     */
    setStorage(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Queries the implementation address. Can only be called by the owner OR by making an         eth_call and setting the "from" address to address(0).
   */
  getImplementation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Queries the owner of the proxy contract. Can only be called by the owner OR by         making an eth_call and setting the "from" address to address(0).
   */
  getOwner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Sets the code that should be running behind this proxy.         Note: This scheme is a bit different from the standard proxy scheme where one would         typically deploy the code separately and then set the implementation address. We're         doing it this way because it gives us a lot more freedom on the client side. Can         only be triggered by the contract owner.
   * @param _code New contract code to run inside this contract.
   */
  setCode(
    _code: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Changes the owner of the proxy contract. Only callable by the owner.
   * @param _owner New owner of the proxy contract.
   */
  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Modifies some storage slot within the proxy contract. Gives us a lot of power to         perform upgrades in a more transparent way. Only callable by the owner.
   * @param _key Storage key to modify.
   * @param _value New value for the storage key.
   */
  setStorage(
    _key: BytesLike,
    _value: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Queries the implementation address. Can only be called by the owner OR by making an         eth_call and setting the "from" address to address(0).
     */
    getImplementation(overrides?: CallOverrides): Promise<string>;

    /**
     * Queries the owner of the proxy contract. Can only be called by the owner OR by         making an eth_call and setting the "from" address to address(0).
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Sets the code that should be running behind this proxy.         Note: This scheme is a bit different from the standard proxy scheme where one would         typically deploy the code separately and then set the implementation address. We're         doing it this way because it gives us a lot more freedom on the client side. Can         only be triggered by the contract owner.
     * @param _code New contract code to run inside this contract.
     */
    setCode(_code: BytesLike, overrides?: CallOverrides): Promise<void>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _owner New owner of the proxy contract.
     */
    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Modifies some storage slot within the proxy contract. Gives us a lot of power to         perform upgrades in a more transparent way. Only callable by the owner.
     * @param _key Storage key to modify.
     * @param _value New value for the storage key.
     */
    setStorage(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Queries the implementation address. Can only be called by the owner OR by making an         eth_call and setting the "from" address to address(0).
     */
    getImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Queries the owner of the proxy contract. Can only be called by the owner OR by         making an eth_call and setting the "from" address to address(0).
     */
    getOwner(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Sets the code that should be running behind this proxy.         Note: This scheme is a bit different from the standard proxy scheme where one would         typically deploy the code separately and then set the implementation address. We're         doing it this way because it gives us a lot more freedom on the client side. Can         only be triggered by the contract owner.
     * @param _code New contract code to run inside this contract.
     */
    setCode(
      _code: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _owner New owner of the proxy contract.
     */
    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Modifies some storage slot within the proxy contract. Gives us a lot of power to         perform upgrades in a more transparent way. Only callable by the owner.
     * @param _key Storage key to modify.
     * @param _value New value for the storage key.
     */
    setStorage(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Queries the implementation address. Can only be called by the owner OR by making an         eth_call and setting the "from" address to address(0).
     */
    getImplementation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Queries the owner of the proxy contract. Can only be called by the owner OR by         making an eth_call and setting the "from" address to address(0).
     */
    getOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the code that should be running behind this proxy.         Note: This scheme is a bit different from the standard proxy scheme where one would         typically deploy the code separately and then set the implementation address. We're         doing it this way because it gives us a lot more freedom on the client side. Can         only be triggered by the contract owner.
     * @param _code New contract code to run inside this contract.
     */
    setCode(
      _code: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _owner New owner of the proxy contract.
     */
    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Modifies some storage slot within the proxy contract. Gives us a lot of power to         perform upgrades in a more transparent way. Only callable by the owner.
     * @param _key Storage key to modify.
     * @param _value New value for the storage key.
     */
    setStorage(
      _key: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
