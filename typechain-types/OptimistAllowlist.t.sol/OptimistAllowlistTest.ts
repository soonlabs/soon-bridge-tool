/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: string; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [string, string[]] & {
    addr: string;
    artifacts: string[];
  };
}

export interface OptimistAllowlistTestInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetInterfaces()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "test_constructor_succeeds()": FunctionFragment;
    "test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails()": FunctionFragment;
    "test_isAllowedToMint_fromAllowlistAttestor_succeeds()": FunctionFragment;
    "test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails()": FunctionFragment;
    "test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds()": FunctionFragment;
    "test_isAllowedToMint_fromInvite_succeeds()": FunctionFragment;
    "test_isAllowedToMint_fromWrongAllowlistAttestor_fails()": FunctionFragment;
    "test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails()": FunctionFragment;
    "test_isAllowedToMint_fromWrongOptimistInviter_fails()": FunctionFragment;
    "test_isAllowedToMint_withMultipleAttestations_succeeds()": FunctionFragment;
    "test_isAllowedToMint_withoutAnyAttestations_fails()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "test_constructor_succeeds"
      | "test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails"
      | "test_isAllowedToMint_fromAllowlistAttestor_succeeds"
      | "test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails"
      | "test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds"
      | "test_isAllowedToMint_fromInvite_succeeds"
      | "test_isAllowedToMint_fromWrongAllowlistAttestor_fails"
      | "test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails"
      | "test_isAllowedToMint_fromWrongOptimistInviter_fails"
      | "test_isAllowedToMint_withMultipleAttestations_succeeds"
      | "test_isAllowedToMint_withoutAnyAttestations_fails"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_constructor_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromAllowlistAttestor_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromInvite_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromWrongAllowlistAttestor_fails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_fromWrongOptimistInviter_fails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_withMultipleAttestations_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_isAllowedToMint_withoutAnyAttestations_fails",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_constructor_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromAllowlistAttestor_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromInvite_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromWrongAllowlistAttestor_fails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_fromWrongOptimistInviter_fails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_withMultipleAttestations_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_isAllowedToMint_withoutAnyAttestations_fails",
    data: BytesLike
  ): Result;

  events: {
    "AttestationCreated(address,address,bytes32,bytes)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttestationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface AttestationCreatedEventObject {
  creator: string;
  about: string;
  key: string;
  val: string;
}
export type AttestationCreatedEvent = TypedEvent<
  [string, string, string, string],
  AttestationCreatedEventObject
>;

export type AttestationCreatedEventFilter =
  TypedEventFilter<AttestationCreatedEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface OptimistAllowlistTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimistAllowlistTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzInterfaceStructOutput[]] & {
        targetedInterfaces_: StdInvariant.FuzzInterfaceStructOutput[];
      }
    >;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    test_constructor_succeeds(overrides?: CallOverrides): Promise<[void]>;

    /**
     * Having falsy attestation value should not allow minting.
     */
    test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * After receiving a valid allowlist attestation, the account should be able to mint.
     */
    test_isAllowedToMint_fromAllowlistAttestor_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Having falsy attestation value from Coinbase attestor should not allow minting.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * After receiving a valid attestation from the Coinbase Quest attestor,         the account should be able to mint.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Account that received an attestation from the OptimistInviter contract by going         through the claim invite flow should be able to mint.
     */
    test_isAllowedToMint_fromInvite_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Attestation from the wrong allowlist attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongAllowlistAttestor_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Coinbase quest attestation from wrong attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claiming an invite on the non-official OptimistInviter contract should not allow          minting.
     */
    test_isAllowedToMint_fromWrongOptimistInviter_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Having multiple signals, even if one is invalid, should still allow minting.
     */
    test_isAllowedToMint_withMultipleAttestations_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Base case, a account without any relevant attestations should not be able to mint.
     */
    test_isAllowedToMint_withoutAnyAttestations_fails(
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetInterfaces(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  test_constructor_succeeds(overrides?: CallOverrides): Promise<void>;

  /**
   * Having falsy attestation value should not allow minting.
   */
  test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * After receiving a valid allowlist attestation, the account should be able to mint.
   */
  test_isAllowedToMint_fromAllowlistAttestor_succeeds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Having falsy attestation value from Coinbase attestor should not allow minting.
   */
  test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * After receiving a valid attestation from the Coinbase Quest attestor,         the account should be able to mint.
   */
  test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Account that received an attestation from the OptimistInviter contract by going         through the claim invite flow should be able to mint.
   */
  test_isAllowedToMint_fromInvite_succeeds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Attestation from the wrong allowlist attestor should not allow minting.
   */
  test_isAllowedToMint_fromWrongAllowlistAttestor_fails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Coinbase quest attestation from wrong attestor should not allow minting.
   */
  test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claiming an invite on the non-official OptimistInviter contract should not allow          minting.
   */
  test_isAllowedToMint_fromWrongOptimistInviter_fails(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Having multiple signals, even if one is invalid, should still allow minting.
   */
  test_isAllowedToMint_withMultipleAttestations_succeeds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Base case, a account without any relevant attestations should not be able to mint.
   */
  test_isAllowedToMint_withoutAnyAttestations_fails(
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    test_constructor_succeeds(overrides?: CallOverrides): Promise<void>;

    /**
     * Having falsy attestation value should not allow minting.
     */
    test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * After receiving a valid allowlist attestation, the account should be able to mint.
     */
    test_isAllowedToMint_fromAllowlistAttestor_succeeds(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Having falsy attestation value from Coinbase attestor should not allow minting.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * After receiving a valid attestation from the Coinbase Quest attestor,         the account should be able to mint.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Account that received an attestation from the OptimistInviter contract by going         through the claim invite flow should be able to mint.
     */
    test_isAllowedToMint_fromInvite_succeeds(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Attestation from the wrong allowlist attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongAllowlistAttestor_fails(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Coinbase quest attestation from wrong attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claiming an invite on the non-official OptimistInviter contract should not allow          minting.
     */
    test_isAllowedToMint_fromWrongOptimistInviter_fails(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Having multiple signals, even if one is invalid, should still allow minting.
     */
    test_isAllowedToMint_withMultipleAttestations_succeeds(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Base case, a account without any relevant attestations should not be able to mint.
     */
    test_isAllowedToMint_withoutAnyAttestations_fails(
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AttestationCreated(address,address,bytes32,bytes)"(
      creator?: string | null,
      about?: string | null,
      key?: BytesLike | null,
      val?: null
    ): AttestationCreatedEventFilter;
    AttestationCreated(
      creator?: string | null,
      about?: string | null,
      key?: BytesLike | null,
      val?: null
    ): AttestationCreatedEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    test_constructor_succeeds(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Having falsy attestation value should not allow minting.
     */
    test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * After receiving a valid allowlist attestation, the account should be able to mint.
     */
    test_isAllowedToMint_fromAllowlistAttestor_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Having falsy attestation value from Coinbase attestor should not allow minting.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * After receiving a valid attestation from the Coinbase Quest attestor,         the account should be able to mint.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Account that received an attestation from the OptimistInviter contract by going         through the claim invite flow should be able to mint.
     */
    test_isAllowedToMint_fromInvite_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Attestation from the wrong allowlist attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongAllowlistAttestor_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Coinbase quest attestation from wrong attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claiming an invite on the non-official OptimistInviter contract should not allow          minting.
     */
    test_isAllowedToMint_fromWrongOptimistInviter_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Having multiple signals, even if one is invalid, should still allow minting.
     */
    test_isAllowedToMint_withMultipleAttestations_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Base case, a account without any relevant attestations should not be able to mint.
     */
    test_isAllowedToMint_withoutAnyAttestations_fails(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_constructor_succeeds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Having falsy attestation value should not allow minting.
     */
    test_isAllowedToMint_fromAllowlistAttestorWithFalsyValue_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * After receiving a valid allowlist attestation, the account should be able to mint.
     */
    test_isAllowedToMint_fromAllowlistAttestor_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Having falsy attestation value from Coinbase attestor should not allow minting.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestorWithFalsyValue_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * After receiving a valid attestation from the Coinbase Quest attestor,         the account should be able to mint.
     */
    test_isAllowedToMint_fromCoinbaseQuestAttestor_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Account that received an attestation from the OptimistInviter contract by going         through the claim invite flow should be able to mint.
     */
    test_isAllowedToMint_fromInvite_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Attestation from the wrong allowlist attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongAllowlistAttestor_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Coinbase quest attestation from wrong attestor should not allow minting.
     */
    test_isAllowedToMint_fromWrongCoinbaseQuestAttestor_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claiming an invite on the non-official OptimistInviter contract should not allow          minting.
     */
    test_isAllowedToMint_fromWrongOptimistInviter_fails(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Having multiple signals, even if one is invalid, should still allow minting.
     */
    test_isAllowedToMint_withMultipleAttestations_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Base case, a account without any relevant attestations should not be able to mint.
     */
    test_isAllowedToMint_withoutAnyAttestations_fails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
