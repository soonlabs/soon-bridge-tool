/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace OptimistInviter {
  export type ClaimableInviteStruct = { issuer: string; nonce: BytesLike };

  export type ClaimableInviteStructOutput = [string, string] & {
    issuer: string;
    nonce: string;
  };
}

export interface OptimistInviterHelperInterface extends utils.Interface {
  functions: {
    "CLAIMABLE_INVITE_TYPEHASH()": FunctionFragment;
    "EIP712_DOMAIN_TYPEHASH()": FunctionFragment;
    "consumeNonce()": FunctionFragment;
    "currentNonce()": FunctionFragment;
    "getClaimableInviteStructHash((address,bytes32))": FunctionFragment;
    "getClaimableInviteWithNewNonce(address)": FunctionFragment;
    "getDigest((address,bytes32))": FunctionFragment;
    "getDigestWithEIP712Domain((address,bytes32),bytes,bytes,uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "optimistInviter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CLAIMABLE_INVITE_TYPEHASH"
      | "EIP712_DOMAIN_TYPEHASH"
      | "consumeNonce"
      | "currentNonce"
      | "getClaimableInviteStructHash"
      | "getClaimableInviteWithNewNonce"
      | "getDigest"
      | "getDigestWithEIP712Domain"
      | "name"
      | "optimistInviter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CLAIMABLE_INVITE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumeNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableInviteStructHash",
    values: [OptimistInviter.ClaimableInviteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableInviteWithNewNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest",
    values: [OptimistInviter.ClaimableInviteStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigestWithEIP712Domain",
    values: [
      OptimistInviter.ClaimableInviteStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optimistInviter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIMABLE_INVITE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableInviteStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableInviteWithNewNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDigest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDigestWithEIP712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimistInviter",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OptimistInviterHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimistInviterHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * EIP712 typehash for the ClaimableInvite type.
     */
    CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Keeps track of current nonce to generate new nonces for each invite.
     */
    currentNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableInviteStructHash(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns a ClaimableInvite with the issuer and current nonce.
     * @param _issuer Issuer to include in the ClaimableInvite.
     */
    getClaimableInviteWithNewNonce(
      _issuer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDigest(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDigestWithEIP712Domain(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * OptimistInviter contract name. Used to construct the EIP-712 domain.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Address of OptimistInviter contract we are testing.
     */
    optimistInviter(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * EIP712 typehash for the ClaimableInvite type.
   */
  CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  /**
   * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
   */
  EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
   */
  consumeNonce(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Keeps track of current nonce to generate new nonces for each invite.
   */
  currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableInviteStructHash(
    _claimableInvite: OptimistInviter.ClaimableInviteStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns a ClaimableInvite with the issuer and current nonce.
   * @param _issuer Issuer to include in the ClaimableInvite.
   */
  getClaimableInviteWithNewNonce(
    _issuer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDigest(
    _claimableInvite: OptimistInviter.ClaimableInviteStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getDigestWithEIP712Domain(
    _claimableInvite: OptimistInviter.ClaimableInviteStruct,
    _name: BytesLike,
    _version: BytesLike,
    _chainid: BigNumberish,
    _verifyingContract: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * OptimistInviter contract name. Used to construct the EIP-712 domain.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of OptimistInviter contract we are testing.
   */
  optimistInviter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * EIP712 typehash for the ClaimableInvite type.
     */
    CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(overrides?: CallOverrides): Promise<string>;

    /**
     * Keeps track of current nonce to generate new nonces for each invite.
     */
    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableInviteStructHash(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns a ClaimableInvite with the issuer and current nonce.
     * @param _issuer Issuer to include in the ClaimableInvite.
     */
    getClaimableInviteWithNewNonce(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<OptimistInviter.ClaimableInviteStructOutput>;

    getDigest(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getDigestWithEIP712Domain(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * OptimistInviter contract name. Used to construct the EIP-712 domain.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Address of OptimistInviter contract we are testing.
     */
    optimistInviter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * EIP712 typehash for the ClaimableInvite type.
     */
    CLAIMABLE_INVITE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Keeps track of current nonce to generate new nonces for each invite.
     */
    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableInviteStructHash(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a ClaimableInvite with the issuer and current nonce.
     * @param _issuer Issuer to include in the ClaimableInvite.
     */
    getClaimableInviteWithNewNonce(
      _issuer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDigest(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDigestWithEIP712Domain(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * OptimistInviter contract name. Used to construct the EIP-712 domain.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address of OptimistInviter contract we are testing.
     */
    optimistInviter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * EIP712 typehash for the ClaimableInvite type.
     */
    CLAIMABLE_INVITE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Keeps track of current nonce to generate new nonces for each invite.
     */
    currentNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableInviteStructHash(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a ClaimableInvite with the issuer and current nonce.
     * @param _issuer Issuer to include in the ClaimableInvite.
     */
    getClaimableInviteWithNewNonce(
      _issuer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDigest(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDigestWithEIP712Domain(
      _claimableInvite: OptimistInviter.ClaimableInviteStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * OptimistInviter contract name. Used to construct the EIP-712 domain.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Address of OptimistInviter contract we are testing.
     */
    optimistInviter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
