/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface Transactor0815Interface extends utils.Interface {
  functions: {
    "CALL(address,bytes,uint256)": FunctionFragment;
    "DELEGATECALL(address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "CALL" | "DELEGATECALL" | "owner" | "setOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALL",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATECALL",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(functionFragment: "CALL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATECALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface Transactor0815 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Transactor0815Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Sends a CALL to a target address.
   * @param _data Data to send with the call.
   * @param _target Address to call.
   * @param _value ETH value to send with the call.
   */
  CALL(
    _target: string,
    _data: BytesLike,
    _value: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Sends a DELEGATECALL to a target address.
   * @param _data Data to send with the call.
   * @param _target Address to call.
   */
  DELEGATECALL(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success_: boolean; data_: string }>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success_: boolean; data_: string }>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
  };

  estimateGas: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
