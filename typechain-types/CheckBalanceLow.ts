/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace CheckBalanceLow {
  export type ParamsStruct = { target: string; threshold: BigNumberish };

  export type ParamsStructOutput = [string, BigNumber] & {
    target: string;
    threshold: BigNumber;
  };
}

export interface CheckBalanceLowInterface extends utils.Interface {
  functions: {
    "check(bytes)": FunctionFragment;
    "name()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "check" | "name"): FunctionFragment;

  encodeFunctionData(functionFragment: "check", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {
    "_EventToExposeStructInABI__Params((address,uint256))": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "_EventToExposeStructInABI__Params"
  ): EventFragment;
}

export interface _EventToExposeStructInABI__ParamsEventObject {
  params: CheckBalanceLow.ParamsStructOutput;
}
export type _EventToExposeStructInABI__ParamsEvent = TypedEvent<
  [CheckBalanceLow.ParamsStructOutput],
  _EventToExposeStructInABI__ParamsEventObject
>;

export type _EventToExposeStructInABI__ParamsEventFilter =
  TypedEventFilter<_EventToExposeStructInABI__ParamsEvent>;

export interface CheckBalanceLow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheckBalanceLowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { execute_: boolean }>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Checks whether a drip should be executable.
   * @param _params Encoded parameters for the drip check.
   */
  check(_params: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the name of the drip check.
   */
  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(_params: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "_EventToExposeStructInABI__Params((address,uint256))"(
      params?: null
    ): _EventToExposeStructInABI__ParamsEventFilter;
    _EventToExposeStructInABI__Params(
      params?: null
    ): _EventToExposeStructInABI__ParamsEventFilter;
  };

  estimateGas: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(_params: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
