/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface Events0825Interface extends utils.Interface {
  functions: {};

  events: {
    "DepositFailed(address,address,address,address,uint256,bytes)": EventFragment;
    "DepositFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "DisputeGameBlacklisted(address)": EventFragment;
    "ERC20BridgeFinalized(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "ERC20BridgeInitiated(address,bytes32,address,bytes32,uint256,bytes)": EventFragment;
    "ERC20DepositInitiated(address,bytes32,address,bytes32,uint256,bytes)": EventFragment;
    "ERC20WithdrawalFinalized(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "ETHBridgeFinalized(bytes32,address,uint256,bytes)": EventFragment;
    "ETHBridgeInitiated(address,bytes32,uint256,bytes)": EventFragment;
    "ETHDepositInitiated(address,bytes32,uint256,bytes)": EventFragment;
    "ETHWithdrawalFinalized(bytes32,address,uint256,bytes)": EventFragment;
    "FailedRelayedMessage(bytes32)": EventFragment;
    "MessagePassed(uint256,address,address,uint256,uint256,bytes,bytes32)": EventFragment;
    "OutputProposed(bytes32,uint256,uint256,uint256)": EventFragment;
    "OutputsDeleted(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(string)": EventFragment;
    "RelayedMessage(bytes32)": EventFragment;
    "RespectedGameTypeSet(uint32,uint64)": EventFragment;
    "SentMessage(bytes32,address,bytes,uint256,uint256)": EventFragment;
    "SentMessageExtension1(address,uint256)": EventFragment;
    "TransactionDeposited(address,bytes32,uint256,bytes)": EventFragment;
    "TransactionDeposited(address,bytes32,uint256,uint256,uint64,bool,bytes)": EventFragment;
    "Unpaused()": EventFragment;
    "WhatHappened(bool,bytes)": EventFragment;
    "Withdrawal(uint256,address,address)": EventFragment;
    "WithdrawalFinalized(bytes32,bool)": EventFragment;
    "WithdrawalInitiated(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "WithdrawalProven(bytes32,bytes32,address)": EventFragment;
    "WithdrawalProvenExtension1(bytes32,address)": EventFragment;
    "WithdrawerBalanceBurnt(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeGameBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20DepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20WithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHDepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHWithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedRelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessagePassed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputsDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RespectedGameTypeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessageExtension1"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransactionDeposited(address,bytes32,uint256,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransactionDeposited(address,bytes32,uint256,uint256,uint64,bool,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhatHappened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalProven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalProvenExtension1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawerBalanceBurnt"): EventFragment;
}

export interface DepositFailedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type DepositFailedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  DepositFailedEventObject
>;

export type DepositFailedEventFilter = TypedEventFilter<DepositFailedEvent>;

export interface DepositFinalizedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type DepositFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  DepositFinalizedEventObject
>;

export type DepositFinalizedEventFilter =
  TypedEventFilter<DepositFinalizedEvent>;

export interface DisputeGameBlacklistedEventObject {
  disputeGame: string;
}
export type DisputeGameBlacklistedEvent = TypedEvent<
  [string],
  DisputeGameBlacklistedEventObject
>;

export type DisputeGameBlacklistedEventFilter =
  TypedEventFilter<DisputeGameBlacklistedEvent>;

export interface ERC20BridgeFinalizedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20BridgeFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20BridgeFinalizedEventObject
>;

export type ERC20BridgeFinalizedEventFilter =
  TypedEventFilter<ERC20BridgeFinalizedEvent>;

export interface ERC20BridgeInitiatedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20BridgeInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20BridgeInitiatedEventObject
>;

export type ERC20BridgeInitiatedEventFilter =
  TypedEventFilter<ERC20BridgeInitiatedEvent>;

export interface ERC20DepositInitiatedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20DepositInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20DepositInitiatedEventObject
>;

export type ERC20DepositInitiatedEventFilter =
  TypedEventFilter<ERC20DepositInitiatedEvent>;

export interface ERC20WithdrawalFinalizedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20WithdrawalFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20WithdrawalFinalizedEventObject
>;

export type ERC20WithdrawalFinalizedEventFilter =
  TypedEventFilter<ERC20WithdrawalFinalizedEvent>;

export interface ETHBridgeFinalizedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHBridgeFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHBridgeFinalizedEventObject
>;

export type ETHBridgeFinalizedEventFilter =
  TypedEventFilter<ETHBridgeFinalizedEvent>;

export interface ETHBridgeInitiatedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHBridgeInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHBridgeInitiatedEventObject
>;

export type ETHBridgeInitiatedEventFilter =
  TypedEventFilter<ETHBridgeInitiatedEvent>;

export interface ETHDepositInitiatedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHDepositInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHDepositInitiatedEventObject
>;

export type ETHDepositInitiatedEventFilter =
  TypedEventFilter<ETHDepositInitiatedEvent>;

export interface ETHWithdrawalFinalizedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHWithdrawalFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHWithdrawalFinalizedEventObject
>;

export type ETHWithdrawalFinalizedEventFilter =
  TypedEventFilter<ETHWithdrawalFinalizedEvent>;

export interface FailedRelayedMessageEventObject {
  msgHash: string;
}
export type FailedRelayedMessageEvent = TypedEvent<
  [string],
  FailedRelayedMessageEventObject
>;

export type FailedRelayedMessageEventFilter =
  TypedEventFilter<FailedRelayedMessageEvent>;

export interface MessagePassedEventObject {
  nonce: BigNumber;
  sender: string;
  target: string;
  value: BigNumber;
  gasLimit: BigNumber;
  data: string;
  withdrawalHash: string;
}
export type MessagePassedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, string],
  MessagePassedEventObject
>;

export type MessagePassedEventFilter = TypedEventFilter<MessagePassedEvent>;

export interface OutputProposedEventObject {
  outputRoot: string;
  l2OutputIndex: BigNumber;
  l2BlockNumber: BigNumber;
  l1Timestamp: BigNumber;
}
export type OutputProposedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutputProposedEventObject
>;

export type OutputProposedEventFilter = TypedEventFilter<OutputProposedEvent>;

export interface OutputsDeletedEventObject {
  prevNextOutputIndex: BigNumber;
  newNextOutputIndex: BigNumber;
}
export type OutputsDeletedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OutputsDeletedEventObject
>;

export type OutputsDeletedEventFilter = TypedEventFilter<OutputsDeletedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  identifier: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RelayedMessageEventObject {
  msgHash: string;
}
export type RelayedMessageEvent = TypedEvent<
  [string],
  RelayedMessageEventObject
>;

export type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;

export interface RespectedGameTypeSetEventObject {
  newGameType: number;
  updatedAt: BigNumber;
}
export type RespectedGameTypeSetEvent = TypedEvent<
  [number, BigNumber],
  RespectedGameTypeSetEventObject
>;

export type RespectedGameTypeSetEventFilter =
  TypedEventFilter<RespectedGameTypeSetEvent>;

export interface SentMessageEventObject {
  target: string;
  sender: string;
  message: string;
  messageNonce: BigNumber;
  gasLimit: BigNumber;
}
export type SentMessageEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SentMessageEventObject
>;

export type SentMessageEventFilter = TypedEventFilter<SentMessageEvent>;

export interface SentMessageExtension1EventObject {
  sender: string;
  value: BigNumber;
}
export type SentMessageExtension1Event = TypedEvent<
  [string, BigNumber],
  SentMessageExtension1EventObject
>;

export type SentMessageExtension1EventFilter =
  TypedEventFilter<SentMessageExtension1Event>;

export interface TransactionDeposited_address_bytes32_uint256_bytes_EventObject {
  from: string;
  to: string;
  version: BigNumber;
  opaqueData: string;
}
export type TransactionDeposited_address_bytes32_uint256_bytes_Event =
  TypedEvent<
    [string, string, BigNumber, string],
    TransactionDeposited_address_bytes32_uint256_bytes_EventObject
  >;

export type TransactionDeposited_address_bytes32_uint256_bytes_EventFilter =
  TypedEventFilter<TransactionDeposited_address_bytes32_uint256_bytes_Event>;

export interface TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventObject {
  from: string;
  to: string;
  mint: BigNumber;
  value: BigNumber;
  gasLimit: BigNumber;
  isCreation: boolean;
  data: string;
}
export type TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_Event =
  TypedEvent<
    [string, string, BigNumber, BigNumber, BigNumber, boolean, string],
    TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventObject
  >;

export type TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventFilter =
  TypedEventFilter<TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_Event>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WhatHappenedEventObject {
  success: boolean;
  returndata: string;
}
export type WhatHappenedEvent = TypedEvent<
  [boolean, string],
  WhatHappenedEventObject
>;

export type WhatHappenedEventFilter = TypedEventFilter<WhatHappenedEvent>;

export interface WithdrawalEventObject {
  value: BigNumber;
  to: string;
  from: string;
}
export type WithdrawalEvent = TypedEvent<
  [BigNumber, string, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface WithdrawalFinalizedEventObject {
  withdrawalHash: string;
  success: boolean;
}
export type WithdrawalFinalizedEvent = TypedEvent<
  [string, boolean],
  WithdrawalFinalizedEventObject
>;

export type WithdrawalFinalizedEventFilter =
  TypedEventFilter<WithdrawalFinalizedEvent>;

export interface WithdrawalInitiatedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type WithdrawalInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  WithdrawalInitiatedEventObject
>;

export type WithdrawalInitiatedEventFilter =
  TypedEventFilter<WithdrawalInitiatedEvent>;

export interface WithdrawalProvenEventObject {
  withdrawalHash: string;
  from: string;
  to: string;
}
export type WithdrawalProvenEvent = TypedEvent<
  [string, string, string],
  WithdrawalProvenEventObject
>;

export type WithdrawalProvenEventFilter =
  TypedEventFilter<WithdrawalProvenEvent>;

export interface WithdrawalProvenExtension1EventObject {
  withdrawalHash: string;
  proofSubmitter: string;
}
export type WithdrawalProvenExtension1Event = TypedEvent<
  [string, string],
  WithdrawalProvenExtension1EventObject
>;

export type WithdrawalProvenExtension1EventFilter =
  TypedEventFilter<WithdrawalProvenExtension1Event>;

export interface WithdrawerBalanceBurntEventObject {
  amount: BigNumber;
}
export type WithdrawerBalanceBurntEvent = TypedEvent<
  [BigNumber],
  WithdrawerBalanceBurntEventObject
>;

export type WithdrawerBalanceBurntEventFilter =
  TypedEventFilter<WithdrawerBalanceBurntEvent>;

export interface Events0825 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Events0825Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DepositFailed(address,address,address,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFailedEventFilter;
    DepositFailed(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFailedEventFilter;

    "DepositFinalized(address,address,address,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFinalizedEventFilter;
    DepositFinalized(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFinalizedEventFilter;

    "DisputeGameBlacklisted(address)"(
      disputeGame?: string | null
    ): DisputeGameBlacklistedEventFilter;
    DisputeGameBlacklisted(
      disputeGame?: string | null
    ): DisputeGameBlacklistedEventFilter;

    "ERC20BridgeFinalized(address,bytes32,bytes32,address,uint256,bytes)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeFinalizedEventFilter;
    ERC20BridgeFinalized(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeFinalizedEventFilter;

    "ERC20BridgeInitiated(address,bytes32,address,bytes32,uint256,bytes)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeInitiatedEventFilter;
    ERC20BridgeInitiated(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeInitiatedEventFilter;

    "ERC20DepositInitiated(address,bytes32,address,bytes32,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20DepositInitiatedEventFilter;
    ERC20DepositInitiated(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20DepositInitiatedEventFilter;

    "ERC20WithdrawalFinalized(address,bytes32,bytes32,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20WithdrawalFinalizedEventFilter;
    ERC20WithdrawalFinalized(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20WithdrawalFinalizedEventFilter;

    "ETHBridgeFinalized(bytes32,address,uint256,bytes)"(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHBridgeFinalizedEventFilter;
    ETHBridgeFinalized(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHBridgeFinalizedEventFilter;

    "ETHBridgeInitiated(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHBridgeInitiatedEventFilter;
    ETHBridgeInitiated(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHBridgeInitiatedEventFilter;

    "ETHDepositInitiated(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHDepositInitiatedEventFilter;
    ETHDepositInitiated(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHDepositInitiatedEventFilter;

    "ETHWithdrawalFinalized(bytes32,address,uint256,bytes)"(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHWithdrawalFinalizedEventFilter;
    ETHWithdrawalFinalized(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHWithdrawalFinalizedEventFilter;

    "FailedRelayedMessage(bytes32)"(
      msgHash?: BytesLike | null
    ): FailedRelayedMessageEventFilter;
    FailedRelayedMessage(
      msgHash?: BytesLike | null
    ): FailedRelayedMessageEventFilter;

    "MessagePassed(uint256,address,address,uint256,uint256,bytes,bytes32)"(
      nonce?: BigNumberish | null,
      sender?: string | null,
      target?: string | null,
      value?: null,
      gasLimit?: null,
      data?: null,
      withdrawalHash?: null
    ): MessagePassedEventFilter;
    MessagePassed(
      nonce?: BigNumberish | null,
      sender?: string | null,
      target?: string | null,
      value?: null,
      gasLimit?: null,
      data?: null,
      withdrawalHash?: null
    ): MessagePassedEventFilter;

    "OutputProposed(bytes32,uint256,uint256,uint256)"(
      outputRoot?: BytesLike | null,
      l2OutputIndex?: BigNumberish | null,
      l2BlockNumber?: BigNumberish | null,
      l1Timestamp?: null
    ): OutputProposedEventFilter;
    OutputProposed(
      outputRoot?: BytesLike | null,
      l2OutputIndex?: BigNumberish | null,
      l2BlockNumber?: BigNumberish | null,
      l1Timestamp?: null
    ): OutputProposedEventFilter;

    "OutputsDeleted(uint256,uint256)"(
      prevNextOutputIndex?: BigNumberish | null,
      newNextOutputIndex?: BigNumberish | null
    ): OutputsDeletedEventFilter;
    OutputsDeleted(
      prevNextOutputIndex?: BigNumberish | null,
      newNextOutputIndex?: BigNumberish | null
    ): OutputsDeletedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(string)"(identifier?: null): PausedEventFilter;
    Paused(identifier?: null): PausedEventFilter;

    "RelayedMessage(bytes32)"(
      msgHash?: BytesLike | null
    ): RelayedMessageEventFilter;
    RelayedMessage(msgHash?: BytesLike | null): RelayedMessageEventFilter;

    "RespectedGameTypeSet(uint32,uint64)"(
      newGameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;
    RespectedGameTypeSet(
      newGameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;

    "SentMessage(bytes32,address,bytes,uint256,uint256)"(
      target?: BytesLike | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): SentMessageEventFilter;
    SentMessage(
      target?: BytesLike | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): SentMessageEventFilter;

    "SentMessageExtension1(address,uint256)"(
      sender?: string | null,
      value?: null
    ): SentMessageExtension1EventFilter;
    SentMessageExtension1(
      sender?: string | null,
      value?: null
    ): SentMessageExtension1EventFilter;

    "TransactionDeposited(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      version?: BigNumberish | null,
      opaqueData?: null
    ): TransactionDeposited_address_bytes32_uint256_bytes_EventFilter;
    "TransactionDeposited(address,bytes32,uint256,uint256,uint64,bool,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      mint?: null,
      value?: null,
      gasLimit?: null,
      isCreation?: null,
      data?: null
    ): TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;

    "WhatHappened(bool,bytes)"(
      success?: null,
      returndata?: null
    ): WhatHappenedEventFilter;
    WhatHappened(success?: null, returndata?: null): WhatHappenedEventFilter;

    "Withdrawal(uint256,address,address)"(
      value?: null,
      to?: null,
      from?: null
    ): WithdrawalEventFilter;
    Withdrawal(value?: null, to?: null, from?: null): WithdrawalEventFilter;

    "WithdrawalFinalized(bytes32,bool)"(
      withdrawalHash?: BytesLike | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      withdrawalHash?: BytesLike | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;

    "WithdrawalInitiated(address,bytes32,bytes32,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): WithdrawalInitiatedEventFilter;
    WithdrawalInitiated(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): WithdrawalInitiatedEventFilter;

    "WithdrawalProven(bytes32,bytes32,address)"(
      withdrawalHash?: BytesLike | null,
      from?: BytesLike | null,
      to?: string | null
    ): WithdrawalProvenEventFilter;
    WithdrawalProven(
      withdrawalHash?: BytesLike | null,
      from?: BytesLike | null,
      to?: string | null
    ): WithdrawalProvenEventFilter;

    "WithdrawalProvenExtension1(bytes32,address)"(
      withdrawalHash?: BytesLike | null,
      proofSubmitter?: string | null
    ): WithdrawalProvenExtension1EventFilter;
    WithdrawalProvenExtension1(
      withdrawalHash?: BytesLike | null,
      proofSubmitter?: string | null
    ): WithdrawalProvenExtension1EventFilter;

    "WithdrawerBalanceBurnt(uint256)"(
      amount?: BigNumberish | null
    ): WithdrawerBalanceBurntEventFilter;
    WithdrawerBalanceBurnt(
      amount?: BigNumberish | null
    ): WithdrawerBalanceBurntEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
