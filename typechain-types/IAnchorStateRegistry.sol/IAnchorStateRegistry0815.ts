/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IAnchorStateRegistry0815Interface extends utils.Interface {
  functions: {
    "anchors(uint32)": FunctionFragment;
    "disputeGameFactory()": FunctionFragment;
    "setAnchorState(address)": FunctionFragment;
    "tryUpdateAnchorState()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "anchors"
      | "disputeGameFactory"
      | "setAnchorState"
      | "tryUpdateAnchorState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "anchors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnchorState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tryUpdateAnchorState",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "anchors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnchorState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryUpdateAnchorState",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAnchorStateRegistry0815 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAnchorStateRegistry0815Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the anchor state for the given game type.
     * @param _gameType The game type to get the anchor state for.
     */
    anchors(
      _gameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    /**
     * Returns the DisputeGameFactory address.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Sets the anchor state given the game.
     * @param _game The game to set the anchor state for.
     */
    setAnchorState(
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Callable by FaultDisputeGame contracts to update the anchor state. Pulls the anchor state directly from         the FaultDisputeGame contract and stores it in the registry if the new anchor state is valid and the         state is newer than the current anchor state.
     */
    tryUpdateAnchorState(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the anchor state for the given game type.
   * @param _gameType The game type to get the anchor state for.
   */
  anchors(
    _gameType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  /**
   * Returns the DisputeGameFactory address.
   */
  disputeGameFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * Sets the anchor state given the game.
   * @param _game The game to set the anchor state for.
   */
  setAnchorState(
    _game: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Callable by FaultDisputeGame contracts to update the anchor state. Pulls the anchor state directly from         the FaultDisputeGame contract and stores it in the registry if the new anchor state is valid and the         state is newer than the current anchor state.
   */
  tryUpdateAnchorState(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the anchor state for the given game type.
     * @param _gameType The game type to get the anchor state for.
     */
    anchors(
      _gameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    /**
     * Returns the DisputeGameFactory address.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * Sets the anchor state given the game.
     * @param _game The game to set the anchor state for.
     */
    setAnchorState(_game: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Callable by FaultDisputeGame contracts to update the anchor state. Pulls the anchor state directly from         the FaultDisputeGame contract and stores it in the registry if the new anchor state is valid and the         state is newer than the current anchor state.
     */
    tryUpdateAnchorState(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Returns the anchor state for the given game type.
     * @param _gameType The game type to get the anchor state for.
     */
    anchors(
      _gameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the DisputeGameFactory address.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sets the anchor state given the game.
     * @param _game The game to set the anchor state for.
     */
    setAnchorState(
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Callable by FaultDisputeGame contracts to update the anchor state. Pulls the anchor state directly from         the FaultDisputeGame contract and stores it in the registry if the new anchor state is valid and the         state is newer than the current anchor state.
     */
    tryUpdateAnchorState(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the anchor state for the given game type.
     * @param _gameType The game type to get the anchor state for.
     */
    anchors(
      _gameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the DisputeGameFactory address.
     */
    disputeGameFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the anchor state given the game.
     * @param _game The game to set the anchor state for.
     */
    setAnchorState(
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Callable by FaultDisputeGame contracts to update the anchor state. Pulls the anchor state directly from         the FaultDisputeGame contract and stores it in the registry if the new anchor state is valid and the         state is newer than the current anchor state.
     */
    tryUpdateAnchorState(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
