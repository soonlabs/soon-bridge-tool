/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Types {
  export type OutputRootProofStruct = {
    version: BytesLike;
    stateRoot: BytesLike;
    messagePasserStorageRoot: BytesLike;
    latestBlockhash: BytesLike;
  };

  export type OutputRootProofStructOutput = [string, string, string, string] & {
    version: string;
    stateRoot: string;
    messagePasserStorageRoot: string;
    latestBlockhash: string;
  };
}

export declare namespace OptimismSupplyTracker {
  export type SPLAccountStruct = {
    lamports: BigNumberish;
    rentEpoch: BigNumberish;
    data: BytesLike;
    executable: boolean;
    owner: BytesLike;
  };

  export type SPLAccountStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean,
    string
  ] & {
    lamports: BigNumber;
    rentEpoch: BigNumber;
    data: string;
    executable: boolean;
    owner: string;
  };

  export type TokenSupplyProofStruct = {
    token: string;
    tokenAccount: OptimismSupplyTracker.SPLAccountStruct;
    storageHash: BytesLike;
    storageProof: BytesLike[];
  };

  export type TokenSupplyProofStructOutput = [
    string,
    OptimismSupplyTracker.SPLAccountStructOutput,
    string,
    string[]
  ] & {
    token: string;
    tokenAccount: OptimismSupplyTracker.SPLAccountStructOutput;
    storageHash: string;
    storageProof: string[];
  };
}

export interface OptimismSupplyTrackerInterface extends utils.Interface {
  functions: {
    "anchorRoot()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "l2BlockNumber()": FunctionFragment;
    "outputOracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenPair(address,bytes32)": FunctionFragment;
    "stateRoot()": FunctionFragment;
    "supply(address)": FunctionFragment;
    "tokenToL2Address(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAnchor(uint256)": FunctionFragment;
    "updateAnchorAndSupplies(uint256,(bytes32,bytes32,bytes32,bytes32),(address,(uint64,uint64,bytes,bool,bytes32),bytes32,bytes[])[])": FunctionFragment;
    "updateStateRoot(bytes32,bytes32,bytes32,bytes32)": FunctionFragment;
    "updateSupply(address,(uint64,uint64,bytes,bool,bytes32),bytes32,bytes[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "anchorRoot"
      | "initialize"
      | "l2BlockNumber"
      | "outputOracle"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setTokenPair"
      | "stateRoot"
      | "supply"
      | "tokenToL2Address"
      | "transferOwnership"
      | "updateAnchor"
      | "updateAnchorAndSupplies"
      | "updateStateRoot"
      | "updateSupply"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "anchorRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "l2BlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outputOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPair",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "stateRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "supply", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenToL2Address",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnchor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnchorAndSupplies",
    values: [
      BigNumberish,
      Types.OutputRootProofStruct,
      OptimismSupplyTracker.TokenSupplyProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateRoot",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupply",
    values: [
      string,
      OptimismSupplyTracker.SPLAccountStruct,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "anchorRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2BlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outputOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToL2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnchor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnchorAndSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AnchorUpdated(uint256,bytes32)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StateRootUpdated(bytes32)": EventFragment;
    "SupplyUpdated(address,uint256)": EventFragment;
    "TokenPairSet(address,bytes32)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnchorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateRootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPairSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AnchorUpdatedEventObject {
  l2BlockNumber: BigNumber;
  anchorRoot: string;
}
export type AnchorUpdatedEvent = TypedEvent<
  [BigNumber, string],
  AnchorUpdatedEventObject
>;

export type AnchorUpdatedEventFilter = TypedEventFilter<AnchorUpdatedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StateRootUpdatedEventObject {
  stateRoot: string;
}
export type StateRootUpdatedEvent = TypedEvent<
  [string],
  StateRootUpdatedEventObject
>;

export type StateRootUpdatedEventFilter =
  TypedEventFilter<StateRootUpdatedEvent>;

export interface SupplyUpdatedEventObject {
  token: string;
  supply: BigNumber;
}
export type SupplyUpdatedEvent = TypedEvent<
  [string, BigNumber],
  SupplyUpdatedEventObject
>;

export type SupplyUpdatedEventFilter = TypedEventFilter<SupplyUpdatedEvent>;

export interface TokenPairSetEventObject {
  l1TokenAddress: string;
  l2TokenAddress: string;
}
export type TokenPairSetEvent = TypedEvent<
  [string, string],
  TokenPairSetEventObject
>;

export type TokenPairSetEventFilter = TypedEventFilter<TokenPairSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface OptimismSupplyTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimismSupplyTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    anchorRoot(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _outputOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    l2BlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    outputOracle(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenPair(
      l1Token: string,
      l2Token: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stateRoot(overrides?: CallOverrides): Promise<[string]>;

    supply(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenToL2Address(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAnchor(
      _l2OutputIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAnchorAndSupplies(
      _l2OutputIndex: BigNumberish,
      _outputRootProof: Types.OutputRootProofStruct,
      tokenProofs: OptimismSupplyTracker.TokenSupplyProofStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStateRoot(
      versionByte: BytesLike,
      _stateRoot: BytesLike,
      withdrawalStorageRoot: BytesLike,
      latestBlockHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateSupply(
      token: string,
      mintAccount: OptimismSupplyTracker.SPLAccountStruct,
      storageHash: BytesLike,
      storageProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  anchorRoot(overrides?: CallOverrides): Promise<string>;

  initialize(
    _outputOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  outputOracle(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
   */
  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenPair(
    l1Token: string,
    l2Token: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stateRoot(overrides?: CallOverrides): Promise<string>;

  supply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenToL2Address(arg0: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAnchor(
    _l2OutputIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAnchorAndSupplies(
    _l2OutputIndex: BigNumberish,
    _outputRootProof: Types.OutputRootProofStruct,
    tokenProofs: OptimismSupplyTracker.TokenSupplyProofStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStateRoot(
    versionByte: BytesLike,
    _stateRoot: BytesLike,
    withdrawalStorageRoot: BytesLike,
    latestBlockHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateSupply(
    token: string,
    mintAccount: OptimismSupplyTracker.SPLAccountStruct,
    storageHash: BytesLike,
    storageProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
   */
  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    anchorRoot(overrides?: CallOverrides): Promise<string>;

    initialize(_outputOracle: string, overrides?: CallOverrides): Promise<void>;

    l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    outputOracle(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenPair(
      l1Token: string,
      l2Token: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stateRoot(overrides?: CallOverrides): Promise<string>;

    supply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToL2Address(arg0: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnchor(
      _l2OutputIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnchorAndSupplies(
      _l2OutputIndex: BigNumberish,
      _outputRootProof: Types.OutputRootProofStruct,
      tokenProofs: OptimismSupplyTracker.TokenSupplyProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateStateRoot(
      versionByte: BytesLike,
      _stateRoot: BytesLike,
      withdrawalStorageRoot: BytesLike,
      latestBlockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSupply(
      token: string,
      mintAccount: OptimismSupplyTracker.SPLAccountStruct,
      storageHash: BytesLike,
      storageProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AnchorUpdated(uint256,bytes32)"(
      l2BlockNumber?: BigNumberish | null,
      anchorRoot?: null
    ): AnchorUpdatedEventFilter;
    AnchorUpdated(
      l2BlockNumber?: BigNumberish | null,
      anchorRoot?: null
    ): AnchorUpdatedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StateRootUpdated(bytes32)"(stateRoot?: null): StateRootUpdatedEventFilter;
    StateRootUpdated(stateRoot?: null): StateRootUpdatedEventFilter;

    "SupplyUpdated(address,uint256)"(
      token?: string | null,
      supply?: null
    ): SupplyUpdatedEventFilter;
    SupplyUpdated(
      token?: string | null,
      supply?: null
    ): SupplyUpdatedEventFilter;

    "TokenPairSet(address,bytes32)"(
      l1TokenAddress?: string | null,
      l2TokenAddress?: null
    ): TokenPairSetEventFilter;
    TokenPairSet(
      l1TokenAddress?: string | null,
      l2TokenAddress?: null
    ): TokenPairSetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    anchorRoot(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _outputOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    outputOracle(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenPair(
      l1Token: string,
      l2Token: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    supply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToL2Address(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAnchor(
      _l2OutputIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAnchorAndSupplies(
      _l2OutputIndex: BigNumberish,
      _outputRootProof: Types.OutputRootProofStruct,
      tokenProofs: OptimismSupplyTracker.TokenSupplyProofStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStateRoot(
      versionByte: BytesLike,
      _stateRoot: BytesLike,
      withdrawalStorageRoot: BytesLike,
      latestBlockHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateSupply(
      token: string,
      mintAccount: OptimismSupplyTracker.SPLAccountStruct,
      storageHash: BytesLike,
      storageProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    anchorRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _outputOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    l2BlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outputOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
     */
    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenPair(
      l1Token: string,
      l2Token: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stateRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToL2Address(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAnchor(
      _l2OutputIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAnchorAndSupplies(
      _l2OutputIndex: BigNumberish,
      _outputRootProof: Types.OutputRootProofStruct,
      tokenProofs: OptimismSupplyTracker.TokenSupplyProofStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStateRoot(
      versionByte: BytesLike,
      _stateRoot: BytesLike,
      withdrawalStorageRoot: BytesLike,
      latestBlockHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateSupply(
      token: string,
      mintAccount: OptimismSupplyTracker.SPLAccountStruct,
      storageHash: BytesLike,
      storageProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
