/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace CheckSecrets {
  export type ParamsStruct = {
    delay: BigNumberish;
    secretHashMustExist: BytesLike;
    secretHashMustNotExist: BytesLike;
  };

  export type ParamsStructOutput = [BigNumber, string, string] & {
    delay: BigNumber;
    secretHashMustExist: string;
    secretHashMustNotExist: string;
  };
}

export interface CheckSecretsInterface extends utils.Interface {
  functions: {
    "check(bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "reveal(bytes)": FunctionFragment;
    "revealedSecrets(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "check" | "name" | "reveal" | "revealedSecrets"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "check", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "reveal", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revealedSecrets",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealedSecrets",
    data: BytesLike
  ): Result;

  events: {
    "SecretRevealed(bytes32,bytes)": EventFragment;
    "_EventToExposeStructInABI__Params((uint256,bytes32,bytes32))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SecretRevealed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "_EventToExposeStructInABI__Params"
  ): EventFragment;
}

export interface SecretRevealedEventObject {
  secretHash: string;
  secret: string;
}
export type SecretRevealedEvent = TypedEvent<
  [string, string],
  SecretRevealedEventObject
>;

export type SecretRevealedEventFilter = TypedEventFilter<SecretRevealedEvent>;

export interface _EventToExposeStructInABI__ParamsEventObject {
  params: CheckSecrets.ParamsStructOutput;
}
export type _EventToExposeStructInABI__ParamsEvent = TypedEvent<
  [CheckSecrets.ParamsStructOutput],
  _EventToExposeStructInABI__ParamsEventObject
>;

export type _EventToExposeStructInABI__ParamsEventFilter =
  TypedEventFilter<_EventToExposeStructInABI__ParamsEvent>;

export interface CheckSecrets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheckSecretsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { execute_: boolean }>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Reveal a secret.
     * @param _secret Secret to reveal.
     */
    reveal(
      _secret: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Keeps track of when secrets were revealed.
     */
    revealedSecrets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  /**
   * Checks whether a drip should be executable.
   * @param _params Encoded parameters for the drip check.
   */
  check(_params: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the name of the drip check.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * Reveal a secret.
   * @param _secret Secret to reveal.
   */
  reveal(
    _secret: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Keeps track of when secrets were revealed.
   */
  revealedSecrets(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(_params: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * Reveal a secret.
     * @param _secret Secret to reveal.
     */
    reveal(_secret: BytesLike, overrides?: CallOverrides): Promise<void>;

    /**
     * Keeps track of when secrets were revealed.
     */
    revealedSecrets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "SecretRevealed(bytes32,bytes)"(
      secretHash?: BytesLike | null,
      secret?: null
    ): SecretRevealedEventFilter;
    SecretRevealed(
      secretHash?: BytesLike | null,
      secret?: null
    ): SecretRevealedEventFilter;

    "_EventToExposeStructInABI__Params((uint256,bytes32,bytes32))"(
      params?: null
    ): _EventToExposeStructInABI__ParamsEventFilter;
    _EventToExposeStructInABI__Params(
      params?: null
    ): _EventToExposeStructInABI__ParamsEventFilter;
  };

  estimateGas: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(_params: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Reveal a secret.
     * @param _secret Secret to reveal.
     */
    reveal(
      _secret: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Keeps track of when secrets were revealed.
     */
    revealedSecrets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Reveal a secret.
     * @param _secret Secret to reveal.
     */
    reveal(
      _secret: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Keeps track of when secrets were revealed.
     */
    revealedSecrets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
