/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IFaultDisputeGame0819Interface extends utils.Interface {
  functions: {
    "addLocalData(uint256,uint256,uint256)": FunctionFragment;
    "attack(bytes32,uint256,bytes32)": FunctionFragment;
    "createdAt()": FunctionFragment;
    "defend(bytes32,uint256,bytes32)": FunctionFragment;
    "extraData()": FunctionFragment;
    "gameCreator()": FunctionFragment;
    "gameData()": FunctionFragment;
    "gameType()": FunctionFragment;
    "getNumToResolve(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "l1Head()": FunctionFragment;
    "l2BlockNumber()": FunctionFragment;
    "resolve()": FunctionFragment;
    "resolveClaim(uint256,uint256)": FunctionFragment;
    "resolvedAt()": FunctionFragment;
    "rootClaim()": FunctionFragment;
    "startingBlockNumber()": FunctionFragment;
    "startingOutputRoot()": FunctionFragment;
    "startingRootHash()": FunctionFragment;
    "status()": FunctionFragment;
    "step(uint256,bool,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLocalData"
      | "attack"
      | "createdAt"
      | "defend"
      | "extraData"
      | "gameCreator"
      | "gameData"
      | "gameType"
      | "getNumToResolve"
      | "initialize"
      | "l1Head"
      | "l2BlockNumber"
      | "resolve"
      | "resolveClaim"
      | "resolvedAt"
      | "rootClaim"
      | "startingBlockNumber"
      | "startingOutputRoot"
      | "startingRootHash"
      | "status"
      | "step"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLocalData",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attack",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defend",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "extraData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameData", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNumToResolve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1Head", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2BlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolveClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolvedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rootClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingOutputRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "step",
    values: [BigNumberish, boolean, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLocalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumToResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Head", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2BlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolvedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingOutputRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;

  events: {
    "Move(uint256,bytes32,address)": EventFragment;
    "Resolved(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Move"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resolved"): EventFragment;
}

export interface MoveEventObject {
  parentIndex: BigNumber;
  claim: string;
  claimant: string;
}
export type MoveEvent = TypedEvent<
  [BigNumber, string, string],
  MoveEventObject
>;

export type MoveEventFilter = TypedEventFilter<MoveEvent>;

export interface ResolvedEventObject {
  status: number;
}
export type ResolvedEvent = TypedEvent<[number], ResolvedEventObject>;

export type ResolvedEventFilter = TypedEventFilter<ResolvedEvent>;

export interface IFaultDisputeGame0819 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFaultDisputeGame0819Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { createdAt_: BigNumber }>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(
      overrides?: CallOverrides
    ): Promise<[string] & { extraData_: string }>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(
      overrides?: CallOverrides
    ): Promise<[string] & { creator_: string }>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(
      overrides?: CallOverrides
    ): Promise<[number] & { gameType_: number }>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numRemainingChildren_: BigNumber }>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<[string] & { l1Head_: string }>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { l2BlockNumber_: BigNumber }>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { resolvedAt_: BigNumber }>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(
      overrides?: CallOverrides
    ): Promise<[string] & { rootClaim_: string }>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { startingBlockNumber_: BigNumber }>;

    /**
     * Starting output root and block number of the game.
     */
    startingOutputRoot(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { startingRoot_: string; l2BlockNumber_: BigNumber }
    >;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(
      overrides?: CallOverrides
    ): Promise<[string] & { startingRootHash_: string }>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<[number] & { status_: number }>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Posts the requested local data to the VM's `PreimageOralce`.
   * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
   * @param _ident The local identifier of the data to post.
   * @param _partOffset The offset of the data to post.
   */
  addLocalData(
    _ident: BigNumberish,
    _execLeafIdx: BigNumberish,
    _partOffset: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Attack a disagreed upon `Claim`.
   * @param _claim The `Claim` at the relative attack position.
   * @param _disputed The `Claim` being attacked.
   * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
   */
  attack(
    _disputed: BytesLike,
    _parentIndex: BigNumberish,
    _claim: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the timestamp that the DisputeGame contract was created at.
   */
  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
   * @param _claim The `Claim` at the relative defense position.
   * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
   */
  defend(
    _disputed: BytesLike,
    _parentIndex: BigNumberish,
    _claim: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * `clones-with-immutable-args` argument #4
   * Getter for the extra data.
   */
  extraData(overrides?: CallOverrides): Promise<string>;

  /**
   * `clones-with-immutable-args` argument #1
   * Getter for the creator of the dispute game.
   */
  gameCreator(overrides?: CallOverrides): Promise<string>;

  /**
   * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
   */
  gameData(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      gameType_: number;
      rootClaim_: string;
      extraData_: string;
    }
  >;

  /**
   * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
   * Getter for the game type.
   */
  gameType(overrides?: CallOverrides): Promise<number>;

  /**
   * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
   * @param _claimIndex The subgame root claim's index within `claimData`.
   */
  getNumToResolve(
    _claimIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This function may only be called once.
   * Initializes the contract.
   */
  initialize(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * `clones-with-immutable-args` argument #3
   * Getter for the parent hash of the L1 block when the dispute game was created.
   */
  l1Head(overrides?: CallOverrides): Promise<string>;

  /**
   * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
   */
  l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * May only be called if the `status` is `IN_PROGRESS`.
   * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
   */
  resolve(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
   * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
   * @param _claimIndex The index of the subgame root claim to resolve.
   * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
   */
  resolveClaim(
    _claimIndex: BigNumberish,
    _numToResolve: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the timestamp that the DisputeGame contract was resolved at.
   */
  resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * `clones-with-immutable-args` argument #2
   * Getter for the root claim.
   */
  rootClaim(overrides?: CallOverrides): Promise<string>;

  /**
   * Only the starting block number of the game.
   */
  startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Starting output root and block number of the game.
   */
  startingOutputRoot(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { startingRoot_: string; l2BlockNumber_: BigNumber }
  >;

  /**
   * Only the starting output root of the game.
   */
  startingRootHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the current status of the game.
   */
  status(overrides?: CallOverrides): Promise<number>;

  /**
   * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
   * Perform an instruction step via an on-chain fault proof processor.
   * @param _claimIndex The index of the challenged claim within `claimData`.
   * @param _isAttack Whether or not the step is an attack or a defense.
   * @param _proof Proof to access memory nodes in the VM's merkle state tree.
   * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
   */
  step(
    _claimIndex: BigNumberish,
    _isAttack: boolean,
    _stateData: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<string>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<string>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<string>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(overrides?: CallOverrides): Promise<number>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<string>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Starting output root and block number of the game.
     */
    startingOutputRoot(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { startingRoot_: string; l2BlockNumber_: BigNumber }
    >;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<number>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Move(uint256,bytes32,address)"(
      parentIndex?: BigNumberish | null,
      claim?: BytesLike | null,
      claimant?: string | null
    ): MoveEventFilter;
    Move(
      parentIndex?: BigNumberish | null,
      claim?: BytesLike | null,
      claimant?: string | null
    ): MoveEventFilter;

    "Resolved(uint8)"(status?: BigNumberish | null): ResolvedEventFilter;
    Resolved(status?: BigNumberish | null): ResolvedEventFilter;
  };

  estimateGas: {
    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Starting output root and block number of the game.
     */
    startingOutputRoot(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Starting output root and block number of the game.
     */
    startingOutputRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
