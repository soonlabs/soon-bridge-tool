/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace GameSolver {
  export type MoveStruct = {
    kind: BigNumberish;
    data: BytesLike;
    value: BigNumberish;
  };

  export type MoveStructOutput = [number, string, BigNumber] & {
    kind: number;
    data: string;
    value: BigNumber;
  };
}

export interface GameSolverInterface extends utils.Interface {
  functions: {
    "GAME()": FunctionFragment;
    "absolutePrestateData()": FunctionFragment;
    "agreeWithRoot()": FunctionFragment;
    "l2Outputs(uint256)": FunctionFragment;
    "processedBuf()": FunctionFragment;
    "solveGame()": FunctionFragment;
    "trace()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GAME"
      | "absolutePrestateData"
      | "agreeWithRoot"
      | "l2Outputs"
      | "processedBuf"
      | "solveGame"
      | "trace"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "absolutePrestateData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agreeWithRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2Outputs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processedBuf",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "solveGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "trace", values?: undefined): string;

  decodeFunctionResult(functionFragment: "GAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "absolutePrestateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agreeWithRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Outputs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedBuf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solveGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trace", data: BytesLike): Result;

  events: {};
}

export interface GameSolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameSolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * The `FaultDisputeGame` proxy that the `GameSolver` will be solving.
     */
    GAME(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The raw absolute prestate data.
     */
    absolutePrestateData(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Signals whether or not the `GameSolver` agrees with the root claim of the         `GAME` contract.
     */
    agreeWithRoot(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * The L2 outputs that the `GameSolver` will be representing, keyed by L2 block number - 1.
     */
    l2Outputs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * The offset of previously processed claims in the `GAME` contract's `claimData` array.         Starts at 0 and increments by 1 for each claim processed.
     */
    processedBuf(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns an array of `Move`s that can be taken from the perspective of an honest         actor in the `FaultDisputeGame` contract.
     */
    solveGame(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * The execution trace that the `GameSolver` will be representing.
     */
    trace(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * The `FaultDisputeGame` proxy that the `GameSolver` will be solving.
   */
  GAME(overrides?: CallOverrides): Promise<string>;

  /**
   * The raw absolute prestate data.
   */
  absolutePrestateData(overrides?: CallOverrides): Promise<string>;

  /**
   * Signals whether or not the `GameSolver` agrees with the root claim of the         `GAME` contract.
   */
  agreeWithRoot(overrides?: CallOverrides): Promise<boolean>;

  /**
   * The L2 outputs that the `GameSolver` will be representing, keyed by L2 block number - 1.
   */
  l2Outputs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The offset of previously processed claims in the `GAME` contract's `claimData` array.         Starts at 0 and increments by 1 for each claim processed.
   */
  processedBuf(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns an array of `Move`s that can be taken from the perspective of an honest         actor in the `FaultDisputeGame` contract.
   */
  solveGame(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * The execution trace that the `GameSolver` will be representing.
   */
  trace(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * The `FaultDisputeGame` proxy that the `GameSolver` will be solving.
     */
    GAME(overrides?: CallOverrides): Promise<string>;

    /**
     * The raw absolute prestate data.
     */
    absolutePrestateData(overrides?: CallOverrides): Promise<string>;

    /**
     * Signals whether or not the `GameSolver` agrees with the root claim of the         `GAME` contract.
     */
    agreeWithRoot(overrides?: CallOverrides): Promise<boolean>;

    /**
     * The L2 outputs that the `GameSolver` will be representing, keyed by L2 block number - 1.
     */
    l2Outputs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The offset of previously processed claims in the `GAME` contract's `claimData` array.         Starts at 0 and increments by 1 for each claim processed.
     */
    processedBuf(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns an array of `Move`s that can be taken from the perspective of an honest         actor in the `FaultDisputeGame` contract.
     */
    solveGame(
      overrides?: CallOverrides
    ): Promise<GameSolver.MoveStructOutput[]>;

    /**
     * The execution trace that the `GameSolver` will be representing.
     */
    trace(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * The `FaultDisputeGame` proxy that the `GameSolver` will be solving.
     */
    GAME(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The raw absolute prestate data.
     */
    absolutePrestateData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Signals whether or not the `GameSolver` agrees with the root claim of the         `GAME` contract.
     */
    agreeWithRoot(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The L2 outputs that the `GameSolver` will be representing, keyed by L2 block number - 1.
     */
    l2Outputs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The offset of previously processed claims in the `GAME` contract's `claimData` array.         Starts at 0 and increments by 1 for each claim processed.
     */
    processedBuf(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns an array of `Move`s that can be taken from the perspective of an honest         actor in the `FaultDisputeGame` contract.
     */
    solveGame(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * The execution trace that the `GameSolver` will be representing.
     */
    trace(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The `FaultDisputeGame` proxy that the `GameSolver` will be solving.
     */
    GAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The raw absolute prestate data.
     */
    absolutePrestateData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Signals whether or not the `GameSolver` agrees with the root claim of the         `GAME` contract.
     */
    agreeWithRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The L2 outputs that the `GameSolver` will be representing, keyed by L2 block number - 1.
     */
    l2Outputs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The offset of previously processed claims in the `GAME` contract's `claimData` array.         Starts at 0 and increments by 1 for each claim processed.
     */
    processedBuf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns an array of `Move`s that can be taken from the perspective of an honest         actor in the `FaultDisputeGame` contract.
     */
    solveGame(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * The execution trace that the `GameSolver` will be representing.
     */
    trace(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
