/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IDisputeGame0819Interface extends utils.Interface {
  functions: {
    "createdAt()": FunctionFragment;
    "extraData()": FunctionFragment;
    "gameCreator()": FunctionFragment;
    "gameData()": FunctionFragment;
    "gameType()": FunctionFragment;
    "initialize()": FunctionFragment;
    "l1Head()": FunctionFragment;
    "resolve()": FunctionFragment;
    "resolvedAt()": FunctionFragment;
    "rootClaim()": FunctionFragment;
    "status()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createdAt"
      | "extraData"
      | "gameCreator"
      | "gameData"
      | "gameType"
      | "initialize"
      | "l1Head"
      | "resolve"
      | "resolvedAt"
      | "rootClaim"
      | "status"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "extraData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameData", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1Head", values?: undefined): string;
  encodeFunctionData(functionFragment: "resolve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolvedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rootClaim", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Head", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolvedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;

  events: {
    "Resolved(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Resolved"): EventFragment;
}

export interface ResolvedEventObject {
  status: number;
}
export type ResolvedEvent = TypedEvent<[number], ResolvedEventObject>;

export type ResolvedEventFilter = TypedEventFilter<ResolvedEvent>;

export interface IDisputeGame0819 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDisputeGame0819Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { createdAt_: BigNumber }>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(
      overrides?: CallOverrides
    ): Promise<[string] & { extraData_: string }>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(
      overrides?: CallOverrides
    ): Promise<[string] & { creator_: string }>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(
      overrides?: CallOverrides
    ): Promise<[number] & { gameType_: number }>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<[string] & { l1Head_: string }>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { resolvedAt_: BigNumber }>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(
      overrides?: CallOverrides
    ): Promise<[string] & { rootClaim_: string }>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<[number] & { status_: number }>;
  };

  /**
   * Returns the timestamp that the DisputeGame contract was created at.
   */
  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * `clones-with-immutable-args` argument #4
   * Getter for the extra data.
   */
  extraData(overrides?: CallOverrides): Promise<string>;

  /**
   * `clones-with-immutable-args` argument #1
   * Getter for the creator of the dispute game.
   */
  gameCreator(overrides?: CallOverrides): Promise<string>;

  /**
   * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
   */
  gameData(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      gameType_: number;
      rootClaim_: string;
      extraData_: string;
    }
  >;

  /**
   * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
   * Getter for the game type.
   */
  gameType(overrides?: CallOverrides): Promise<number>;

  /**
   * This function may only be called once.
   * Initializes the contract.
   */
  initialize(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * `clones-with-immutable-args` argument #3
   * Getter for the parent hash of the L1 block when the dispute game was created.
   */
  l1Head(overrides?: CallOverrides): Promise<string>;

  /**
   * May only be called if the `status` is `IN_PROGRESS`.
   * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
   */
  resolve(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the timestamp that the DisputeGame contract was resolved at.
   */
  resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * `clones-with-immutable-args` argument #2
   * Getter for the root claim.
   */
  rootClaim(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the current status of the game.
   */
  status(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<string>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<string>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<number>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<string>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Resolved(uint8)"(status?: BigNumberish | null): ResolvedEventFilter;
    Resolved(status?: BigNumberish | null): ResolvedEventFilter;
  };

  estimateGas: {
    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the timestamp that the DisputeGame contract was created at.
     */
    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the timestamp that the DisputeGame contract was resolved at.
     */
    resolvedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
