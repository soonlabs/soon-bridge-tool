/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LivenessModuleInterface extends utils.Interface {
  functions: {
    "canRemove(address)": FunctionFragment;
    "fallbackOwner()": FunctionFragment;
    "getRequiredThreshold(uint256)": FunctionFragment;
    "livenessGuard()": FunctionFragment;
    "livenessInterval()": FunctionFragment;
    "minOwners()": FunctionFragment;
    "ownershipTransferredToFallback()": FunctionFragment;
    "removeOwners(address[],address[])": FunctionFragment;
    "safe()": FunctionFragment;
    "thresholdPercentage()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canRemove"
      | "fallbackOwner"
      | "getRequiredThreshold"
      | "livenessGuard"
      | "livenessInterval"
      | "minOwners"
      | "ownershipTransferredToFallback"
      | "removeOwners"
      | "safe"
      | "thresholdPercentage"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "canRemove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fallbackOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "livenessGuard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "livenessInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipTransferredToFallback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwners",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thresholdPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "canRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fallbackOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "livenessGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "livenessInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipTransferredToFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thresholdPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OwnershipTransferredToFallback()": EventFragment;
    "RemovedOwner(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferredToFallback"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
}

export interface OwnershipTransferredToFallbackEventObject {}
export type OwnershipTransferredToFallbackEvent = TypedEvent<
  [],
  OwnershipTransferredToFallbackEventObject
>;

export type OwnershipTransferredToFallbackEventFilter =
  TypedEventFilter<OwnershipTransferredToFallbackEvent>;

export interface RemovedOwnerEventObject {
  owner: string;
}
export type RemovedOwnerEvent = TypedEvent<[string], RemovedOwnerEventObject>;

export type RemovedOwnerEventFilter = TypedEventFilter<RemovedOwnerEvent>;

export interface LivenessModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LivenessModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Checks if the owner can be removed
     * @param _owner The owner to be removed
     */
    canRemove(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { canRemove_: boolean }>;

    /**
     * Getter function for the fallback
     */
    fallbackOwner(
      overrides?: CallOverrides
    ): Promise<[string] & { fallbackOwner_: string }>;

    /**
     * For a given number of owners, return the lowest threshold which is greater than the required percentage.         Note: this function returns 1 for numOwners == 1.
     */
    getRequiredThreshold(
      _numOwners: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { threshold_: BigNumber }>;

    /**
     * Getter function for the LivenessGuard contract instance
     */
    livenessGuard(
      overrides?: CallOverrides
    ): Promise<[string] & { livenessGuard_: string }>;

    /**
     * Getter function for the liveness interval
     */
    livenessInterval(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { livenessInterval_: BigNumber }>;

    /**
     * Getter function for the minimum number of owners
     */
    minOwners(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minOwners_: BigNumber }>;

    /**
     * Flag to indicate if the module has been deactivated
     */
    ownershipTransferredToFallback(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * This function can be called by anyone to remove a set of owners that have not signed a transaction         during the liveness interval. If the number of owners drops below the minimum, then all owners         must be removed.
     * @param _ownersToRemove The owners to remove
     * @param _previousOwners The previous owners in the linked list of owners
     */
    removeOwners(
      _previousOwners: string[],
      _ownersToRemove: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<[string] & { safe_: string }>;

    /**
     * Getter function for the required threshold percentage
     */
    thresholdPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { thresholdPercentage_: BigNumber }>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Checks if the owner can be removed
   * @param _owner The owner to be removed
   */
  canRemove(_owner: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Getter function for the fallback
   */
  fallbackOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * For a given number of owners, return the lowest threshold which is greater than the required percentage.         Note: this function returns 1 for numOwners == 1.
   */
  getRequiredThreshold(
    _numOwners: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Getter function for the LivenessGuard contract instance
   */
  livenessGuard(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter function for the liveness interval
   */
  livenessInterval(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter function for the minimum number of owners
   */
  minOwners(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Flag to indicate if the module has been deactivated
   */
  ownershipTransferredToFallback(overrides?: CallOverrides): Promise<boolean>;

  /**
   * This function can be called by anyone to remove a set of owners that have not signed a transaction         during the liveness interval. If the number of owners drops below the minimum, then all owners         must be removed.
   * @param _ownersToRemove The owners to remove
   * @param _previousOwners The previous owners in the linked list of owners
   */
  removeOwners(
    _previousOwners: string[],
    _ownersToRemove: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Getter function for the Safe contract instance
   */
  safe(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter function for the required threshold percentage
   */
  thresholdPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Checks if the owner can be removed
     * @param _owner The owner to be removed
     */
    canRemove(_owner: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Getter function for the fallback
     */
    fallbackOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * For a given number of owners, return the lowest threshold which is greater than the required percentage.         Note: this function returns 1 for numOwners == 1.
     */
    getRequiredThreshold(
      _numOwners: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getter function for the LivenessGuard contract instance
     */
    livenessGuard(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter function for the liveness interval
     */
    livenessInterval(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the minimum number of owners
     */
    minOwners(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Flag to indicate if the module has been deactivated
     */
    ownershipTransferredToFallback(overrides?: CallOverrides): Promise<boolean>;

    /**
     * This function can be called by anyone to remove a set of owners that have not signed a transaction         during the liveness interval. If the number of owners drops below the minimum, then all owners         must be removed.
     * @param _ownersToRemove The owners to remove
     * @param _previousOwners The previous owners in the linked list of owners
     */
    removeOwners(
      _previousOwners: string[],
      _ownersToRemove: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter function for the required threshold percentage
     */
    thresholdPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferredToFallback()"(): OwnershipTransferredToFallbackEventFilter;
    OwnershipTransferredToFallback(): OwnershipTransferredToFallbackEventFilter;

    "RemovedOwner(address)"(owner?: string | null): RemovedOwnerEventFilter;
    RemovedOwner(owner?: string | null): RemovedOwnerEventFilter;
  };

  estimateGas: {
    /**
     * Checks if the owner can be removed
     * @param _owner The owner to be removed
     */
    canRemove(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the fallback
     */
    fallbackOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * For a given number of owners, return the lowest threshold which is greater than the required percentage.         Note: this function returns 1 for numOwners == 1.
     */
    getRequiredThreshold(
      _numOwners: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getter function for the LivenessGuard contract instance
     */
    livenessGuard(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the liveness interval
     */
    livenessInterval(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the minimum number of owners
     */
    minOwners(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Flag to indicate if the module has been deactivated
     */
    ownershipTransferredToFallback(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function can be called by anyone to remove a set of owners that have not signed a transaction         during the liveness interval. If the number of owners drops below the minimum, then all owners         must be removed.
     * @param _ownersToRemove The owners to remove
     * @param _previousOwners The previous owners in the linked list of owners
     */
    removeOwners(
      _previousOwners: string[],
      _ownersToRemove: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the required threshold percentage
     */
    thresholdPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Checks if the owner can be removed
     * @param _owner The owner to be removed
     */
    canRemove(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the fallback
     */
    fallbackOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * For a given number of owners, return the lowest threshold which is greater than the required percentage.         Note: this function returns 1 for numOwners == 1.
     */
    getRequiredThreshold(
      _numOwners: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the LivenessGuard contract instance
     */
    livenessGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter function for the liveness interval
     */
    livenessInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter function for the minimum number of owners
     */
    minOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Flag to indicate if the module has been deactivated
     */
    ownershipTransferredToFallback(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function can be called by anyone to remove a set of owners that have not signed a transaction         during the liveness interval. If the number of owners drops below the minimum, then all owners         must be removed.
     * @param _ownersToRemove The owners to remove
     * @param _previousOwners The previous owners in the linked list of owners
     */
    removeOwners(
      _previousOwners: string[],
      _ownersToRemove: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter function for the required threshold percentage
     */
    thresholdPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
