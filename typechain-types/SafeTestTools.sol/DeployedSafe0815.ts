/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DeployedSafe0815Interface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addOwnerWithThreshold(address,uint256)": FunctionFragment;
    "approveHash(bytes32)": FunctionFragment;
    "approvedHashes(address,bytes32)": FunctionFragment;
    "changeThreshold(uint256)": FunctionFragment;
    "checkNSignatures(bytes32,bytes,bytes,uint256)": FunctionFragment;
    "checkSignatures(bytes32,bytes,bytes)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getMessageHash(bytes)": FunctionFragment;
    "getMessageHashForSafe(address,bytes)": FunctionFragment;
    "getModules()": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getStorageAt(uint256,uint256)": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "isModuleEnabled(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "isValidSignature(bytes,bytes)": FunctionFragment;
    "nonce()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "removeOwner(address,address,uint256)": FunctionFragment;
    "requiredTxGas(address,uint256,bytes,uint8)": FunctionFragment;
    "setFallbackHandler(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setup(address[],uint256,address,bytes,address,address,uint256,address)": FunctionFragment;
    "signedMessages(bytes32)": FunctionFragment;
    "simulate(address,bytes)": FunctionFragment;
    "simulateAndRevert(address,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapOwner(address,address,address)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "addOwnerWithThreshold"
      | "approveHash"
      | "approvedHashes"
      | "changeThreshold"
      | "checkNSignatures"
      | "checkSignatures"
      | "disableModule"
      | "domainSeparator"
      | "enableModule"
      | "encodeTransactionData"
      | "execTransaction"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "getChainId"
      | "getMessageHash"
      | "getMessageHashForSafe"
      | "getModules"
      | "getModulesPaginated"
      | "getOwners"
      | "getStorageAt"
      | "getThreshold"
      | "getTransactionHash"
      | "isModuleEnabled"
      | "isOwner"
      | "isValidSignature(bytes32,bytes)"
      | "isValidSignature(bytes,bytes)"
      | "nonce"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "removeOwner"
      | "requiredTxGas"
      | "setFallbackHandler"
      | "setGuard"
      | "setup"
      | "signedMessages"
      | "simulate"
      | "simulateAndRevert"
      | "supportsInterface"
      | "swapOwner"
      | "tokensReceived"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwnerWithThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedHashes",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNSignatures",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHashForSafe",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStorageAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredTxGas",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      string[],
      BigNumberish,
      string,
      BytesLike,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateAndRevert",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerWithThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHashForSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStorageAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredTxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simulateAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;

  events: {
    "AddedOwner(address)": EventFragment;
    "ApproveHash(bytes32,address)": EventFragment;
    "ChangedFallbackHandler(address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "ChangedThreshold(uint256)": EventFragment;
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFailure(bytes32,uint256)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
    "ExecutionSuccess(bytes32,uint256)": EventFragment;
    "RemovedOwner(address)": EventFragment;
    "SafeReceived(address,uint256)": EventFragment;
    "SafeSetup(address,address[],uint256,address,address)": EventFragment;
    "SignMsg(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFallbackHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeSetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignMsg"): EventFragment;
}

export interface AddedOwnerEventObject {
  owner: string;
}
export type AddedOwnerEvent = TypedEvent<[string], AddedOwnerEventObject>;

export type AddedOwnerEventFilter = TypedEventFilter<AddedOwnerEvent>;

export interface ApproveHashEventObject {
  approvedHash: string;
  owner: string;
}
export type ApproveHashEvent = TypedEvent<
  [string, string],
  ApproveHashEventObject
>;

export type ApproveHashEventFilter = TypedEventFilter<ApproveHashEvent>;

export interface ChangedFallbackHandlerEventObject {
  handler: string;
}
export type ChangedFallbackHandlerEvent = TypedEvent<
  [string],
  ChangedFallbackHandlerEventObject
>;

export type ChangedFallbackHandlerEventFilter =
  TypedEventFilter<ChangedFallbackHandlerEvent>;

export interface ChangedGuardEventObject {
  guard: string;
}
export type ChangedGuardEvent = TypedEvent<[string], ChangedGuardEventObject>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export interface ChangedThresholdEventObject {
  threshold: BigNumber;
}
export type ChangedThresholdEvent = TypedEvent<
  [BigNumber],
  ChangedThresholdEventObject
>;

export type ChangedThresholdEventFilter =
  TypedEventFilter<ChangedThresholdEvent>;

export interface DisabledModuleEventObject {
  module: string;
}
export type DisabledModuleEvent = TypedEvent<
  [string],
  DisabledModuleEventObject
>;

export type DisabledModuleEventFilter = TypedEventFilter<DisabledModuleEvent>;

export interface EnabledModuleEventObject {
  module: string;
}
export type EnabledModuleEvent = TypedEvent<[string], EnabledModuleEventObject>;

export type EnabledModuleEventFilter = TypedEventFilter<EnabledModuleEvent>;

export interface ExecutionFailureEventObject {
  txHash: string;
  payment: BigNumber;
}
export type ExecutionFailureEvent = TypedEvent<
  [string, BigNumber],
  ExecutionFailureEventObject
>;

export type ExecutionFailureEventFilter =
  TypedEventFilter<ExecutionFailureEvent>;

export interface ExecutionFromModuleFailureEventObject {
  module: string;
}
export type ExecutionFromModuleFailureEvent = TypedEvent<
  [string],
  ExecutionFromModuleFailureEventObject
>;

export type ExecutionFromModuleFailureEventFilter =
  TypedEventFilter<ExecutionFromModuleFailureEvent>;

export interface ExecutionFromModuleSuccessEventObject {
  module: string;
}
export type ExecutionFromModuleSuccessEvent = TypedEvent<
  [string],
  ExecutionFromModuleSuccessEventObject
>;

export type ExecutionFromModuleSuccessEventFilter =
  TypedEventFilter<ExecutionFromModuleSuccessEvent>;

export interface ExecutionSuccessEventObject {
  txHash: string;
  payment: BigNumber;
}
export type ExecutionSuccessEvent = TypedEvent<
  [string, BigNumber],
  ExecutionSuccessEventObject
>;

export type ExecutionSuccessEventFilter =
  TypedEventFilter<ExecutionSuccessEvent>;

export interface RemovedOwnerEventObject {
  owner: string;
}
export type RemovedOwnerEvent = TypedEvent<[string], RemovedOwnerEventObject>;

export type RemovedOwnerEventFilter = TypedEventFilter<RemovedOwnerEvent>;

export interface SafeReceivedEventObject {
  sender: string;
  value: BigNumber;
}
export type SafeReceivedEvent = TypedEvent<
  [string, BigNumber],
  SafeReceivedEventObject
>;

export type SafeReceivedEventFilter = TypedEventFilter<SafeReceivedEvent>;

export interface SafeSetupEventObject {
  initiator: string;
  owners: string[];
  threshold: BigNumber;
  initializer: string;
  fallbackHandler: string;
}
export type SafeSetupEvent = TypedEvent<
  [string, string[], BigNumber, string, string],
  SafeSetupEventObject
>;

export type SafeSetupEventFilter = TypedEventFilter<SafeSetupEvent>;

export interface SignMsgEventObject {
  msgHash: string;
}
export type SignMsgEvent = TypedEvent<[string], SignMsgEventObject>;

export type SignMsgEventFilter = TypedEventFilter<SignMsgEvent>;

export interface DeployedSafe0815 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployedSafe0815Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * Changes the threshold of the Safe to `_threshold`.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param requiredSignatures Amount of required valid signatures.
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.
     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the chain id used by this contract.
     */
    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @param safe Safe to which the message is targeted
     */
    getMessageHashForSafe(
      safe: string,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns array of first 10 modules.
     */
    getModules(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of owners.
     */
    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol
     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _dataHash
     */
    "isValidSignature(bytes32,bytes)"(
      _dataHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Should return whether the signature provided is valid for the provided data.
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Set a guard that checks transactions before execution
     * @param guard The address of the guard to be used or the 0 address to disable the guard
     */
    setGuard(
      guard: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulate(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * Replaces the owner `oldOwner` in the Safe with `newOwner`.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokensReceived(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.
   * @param _threshold New threshold.
   * @param owner New owner address.
   */
  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
   * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
   */
  approveHash(
    hashToApprove: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approvedHashes(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
   * Changes the threshold of the Safe to `_threshold`.
   * @param _threshold New threshold.
   */
  changeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
   * @param data That should be signed (this is passed to an external validator contract)
   * @param dataHash Hash of the data (could be either a message hash or transaction hash)
   * @param requiredSignatures Amount of required valid signatures.
   * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
   */
  checkNSignatures(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    requiredSignatures: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
   * @param data That should be signed (this is passed to an external validator contract)
   * @param dataHash Hash of the data (could be either a message hash or transaction hash)
   * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
   */
  checkSignatures(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
   * Disables the module `module` for the Safe.
   * @param module Module to be removed.
   * @param prevModule Module that pointed to the module to be removed in the linked list
   */
  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
   * Enables the module `module` for the Safe.
   * @param module Module to be whitelisted.
   */
  enableModule(
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the bytes that are hashed to be signed by owners.
   * @param _nonce Transaction nonce.
   * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
   * @param data Data payload.
   * @param gasPrice Maximum gas price that should be used for this transaction.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Gas that should be used for the safe transaction.
   * @param to Destination address.
   * @param value Ether value.
   */
  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.
   * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
   * @param data Data payload of Safe transaction.
   * @param gasPrice Gas price that should be used for the payment calculation.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type of Safe transaction.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Gas that should be used for the Safe transaction.
   * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   */
  execTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations.
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations and return data
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the chain id used by this contract.
   */
  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns hash of a message that can be signed by owners.
   * @param message Message that should be hashed
   */
  getMessageHash(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns hash of a message that can be signed by owners.
   * @param message Message that should be hashed
   * @param safe Safe to which the message is targeted
   */
  getMessageHashForSafe(
    safe: string,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns array of first 10 modules.
   */
  getModules(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns array of modules.
   * @param pageSize Maximum number of modules that should be returned.
   * @param start Start of the page.
   */
  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  /**
   * Returns array of owners.
   */
  getOwners(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Reads `length` bytes of storage in the currents contract
   * @param length - the number of words (32 bytes) of data to read
   * @param offset - the offset in the current contract's storage in words to start reading from
   */
  getStorageAt(
    offset: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns hash to be signed by owners.
   * @param _nonce Transaction nonce.
   * @param baseGas Gas costs for data used to trigger the safe transaction.
   * @param data Data payload.
   * @param gasPrice Maximum gas price that should be used for this transaction.
   * @param gasToken Token address (or 0 if ETH) that is used for the payment.
   * @param operation Operation type.
   * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
   * @param safeTxGas Fas that should be used for the safe transaction.
   * @param to Destination address.
   * @param value Ether value.
   */
  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns if an module is enabled
   */
  isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)
   * Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol
   * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)
   * @param _signature Signature byte array associated with _dataHash
   */
  "isValidSignature(bytes32,bytes)"(
    _dataHash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Should return whether the signature provided is valid for the provided data.
   * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
   * @param _data Arbitrary length data signed on the behalf of address(msg.sender)
   * @param _signature Signature byte array associated with _data
   */
  "isValidSignature(bytes,bytes)"(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
   * Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.
   * @param _threshold New threshold.
   * @param owner Owner address to be removed.
   * @param prevOwner Owner that pointed to the owner to be removed in the linked list
   */
  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
   * Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.
   * @param data Data payload of Safe transaction.
   * @param operation Operation type of Safe transaction.
   * @param to Destination address of Safe transaction.
   * @param value Ether value of Safe transaction.
   */
  requiredTxGas(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
   * @param handler contract to handle fallbacks calls.
   */
  setFallbackHandler(
    handler: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Set a guard that checks transactions before execution
   * @param guard The address of the guard to be used or the 0 address to disable the guard
   */
  setGuard(
    guard: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Setup function sets initial storage of contract.
   * @param _owners List of Safe owners.
   * @param _threshold Number of required confirmations for a Safe transaction.
   * @param data Data payload for optional delegate call.
   * @param fallbackHandler Handler for fallback calls to this contract
   * @param payment Value that should be paid
   * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
   * @param paymentToken Token that should be used for the payment (0 is ETH)
   * @param to Contract address for optional delegate call.
   */
  setup(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  signedMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.
   * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
   * @param targetContract Address of the contract containing the code to execute.
   */
  simulate(
    targetContract: string,
    calldataPayload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
   * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
   * @param targetContract Address of the contract containing the code to execute.
   */
  simulateAndRevert(
    targetContract: string,
    calldataPayload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
   * Replaces the owner `oldOwner` in the Safe with `newOwner`.
   * @param newOwner New owner address.
   * @param oldOwner Owner address to be replaced.
   * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
   */
  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokensReceived(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * Changes the threshold of the Safe to `_threshold`.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param requiredSignatures Amount of required valid signatures.
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.
     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    /**
     * Returns the chain id used by this contract.
     */
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @param safe Safe to which the message is targeted
     */
    getMessageHashForSafe(
      safe: string,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns array of first 10 modules.
     */
    getModules(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns array of owners.
     */
    getOwners(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol
     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _dataHash
     */
    "isValidSignature(bytes32,bytes)"(
      _dataHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Should return whether the signature provided is valid for the provided data.
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set a guard that checks transactions before execution
     * @param guard The address of the guard to be used or the 0 address to disable the guard
     */
    setGuard(guard: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulate(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * Replaces the owner `oldOwner` in the Safe with `newOwner`.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensReceived(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedOwner(address)"(owner?: null): AddedOwnerEventFilter;
    AddedOwner(owner?: null): AddedOwnerEventFilter;

    "ApproveHash(bytes32,address)"(
      approvedHash?: BytesLike | null,
      owner?: string | null
    ): ApproveHashEventFilter;
    ApproveHash(
      approvedHash?: BytesLike | null,
      owner?: string | null
    ): ApproveHashEventFilter;

    "ChangedFallbackHandler(address)"(
      handler?: null
    ): ChangedFallbackHandlerEventFilter;
    ChangedFallbackHandler(handler?: null): ChangedFallbackHandlerEventFilter;

    "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
    ChangedGuard(guard?: null): ChangedGuardEventFilter;

    "ChangedThreshold(uint256)"(threshold?: null): ChangedThresholdEventFilter;
    ChangedThreshold(threshold?: null): ChangedThresholdEventFilter;

    "DisabledModule(address)"(module?: null): DisabledModuleEventFilter;
    DisabledModule(module?: null): DisabledModuleEventFilter;

    "EnabledModule(address)"(module?: null): EnabledModuleEventFilter;
    EnabledModule(module?: null): EnabledModuleEventFilter;

    "ExecutionFailure(bytes32,uint256)"(
      txHash?: null,
      payment?: null
    ): ExecutionFailureEventFilter;
    ExecutionFailure(
      txHash?: null,
      payment?: null
    ): ExecutionFailureEventFilter;

    "ExecutionFromModuleFailure(address)"(
      module?: string | null
    ): ExecutionFromModuleFailureEventFilter;
    ExecutionFromModuleFailure(
      module?: string | null
    ): ExecutionFromModuleFailureEventFilter;

    "ExecutionFromModuleSuccess(address)"(
      module?: string | null
    ): ExecutionFromModuleSuccessEventFilter;
    ExecutionFromModuleSuccess(
      module?: string | null
    ): ExecutionFromModuleSuccessEventFilter;

    "ExecutionSuccess(bytes32,uint256)"(
      txHash?: null,
      payment?: null
    ): ExecutionSuccessEventFilter;
    ExecutionSuccess(
      txHash?: null,
      payment?: null
    ): ExecutionSuccessEventFilter;

    "RemovedOwner(address)"(owner?: null): RemovedOwnerEventFilter;
    RemovedOwner(owner?: null): RemovedOwnerEventFilter;

    "SafeReceived(address,uint256)"(
      sender?: string | null,
      value?: null
    ): SafeReceivedEventFilter;
    SafeReceived(sender?: string | null, value?: null): SafeReceivedEventFilter;

    "SafeSetup(address,address[],uint256,address,address)"(
      initiator?: string | null,
      owners?: null,
      threshold?: null,
      initializer?: null,
      fallbackHandler?: null
    ): SafeSetupEventFilter;
    SafeSetup(
      initiator?: string | null,
      owners?: null,
      threshold?: null,
      initializer?: null,
      fallbackHandler?: null
    ): SafeSetupEventFilter;

    "SignMsg(bytes32)"(msgHash?: BytesLike | null): SignMsgEventFilter;
    SignMsg(msgHash?: BytesLike | null): SignMsgEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * Changes the threshold of the Safe to `_threshold`.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param requiredSignatures Amount of required valid signatures.
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.
     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the chain id used by this contract.
     */
    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @param safe Safe to which the message is targeted
     */
    getMessageHashForSafe(
      safe: string,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array of first 10 modules.
     */
    getModules(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns array of owners.
     */
    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol
     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _dataHash
     */
    "isValidSignature(bytes32,bytes)"(
      _dataHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Should return whether the signature provided is valid for the provided data.
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Set a guard that checks transactions before execution
     * @param guard The address of the guard to be used or the 0 address to disable the guard
     */
    setGuard(
      guard: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulate(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * Replaces the owner `oldOwner` in the Safe with `newOwner`.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokensReceived(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to add a new owner to the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner New owner address.
     */
    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks a hash as approved. This can be used to validate a hash that is used by a signature.
     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.
     */
    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to update the number of required confirmations by Safe owners.      This can only be done via a Safe transaction.
     * Changes the threshold of the Safe to `_threshold`.
     * @param _threshold New threshold.
     */
    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param requiredSignatures Amount of required valid signatures.
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.
     * @param data That should be signed (this is passed to an external validator contract)
     * @param dataHash Hash of the data (could be either a message hash or transaction hash)
     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.
     */
    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the bytes that are hashed to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.      Note: The fees are always transferred, even if the user transaction fails.
     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)
     * @param data Data payload of Safe transaction.
     * @param gasPrice Gas price that should be used for the payment calculation.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type of Safe transaction.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Gas that should be used for the Safe transaction.
     * @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the chain id used by this contract.
     */
    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     * @param safe Safe to which the message is targeted
     */
    getMessageHashForSafe(
      safe: string,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of first 10 modules.
     */
    getModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of owners.
     */
    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns hash to be signed by owners.
     * @param _nonce Transaction nonce.
     * @param baseGas Gas costs for data used to trigger the safe transaction.
     * @param data Data payload.
     * @param gasPrice Maximum gas price that should be used for this transaction.
     * @param gasToken Token address (or 0 if ETH) that is used for the payment.
     * @param operation Operation type.
     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).
     * @param safeTxGas Fas that should be used for the safe transaction.
     * @param to Destination address.
     * @param value Ether value.
     */
    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Should return whether the signature provided is valid for the provided data.       The save does not implement the interface since `checkSignatures` is not a view method.       The method will not perform any state changes (see parameters of `checkSignatures`)
     * Implementation of updated EIP-1271See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol
     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _dataHash
     */
    "isValidSignature(bytes32,bytes)"(
      _dataHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Should return whether the signature provided is valid for the provided data.
     * Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`)
     * @param _data Arbitrary length data signed on the behalf of address(msg.sender)
     * @param _signature Signature byte array associated with _data
     */
    "isValidSignature(bytes,bytes)"(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to remove an owner from the Safe and update the threshold at the same time.      This can only be done via a Safe transaction.
     * Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.
     * @param _threshold New threshold.
     * @param owner Owner address to be removed.
     * @param prevOwner Owner that pointed to the owner to be removed in the linked list
     */
    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to estimate a Safe transaction.      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`
     * Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.
     * @param data Data payload of Safe transaction.
     * @param operation Operation type of Safe transaction.
     * @param to Destination address of Safe transaction.
     * @param value Ether value of Safe transaction.
     */
    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a contract to handle fallback calls.      Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.
     * @param handler contract to handle fallbacks calls.
     */
    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Set a guard that checks transactions before execution
     * @param guard The address of the guard to be used or the 0 address to disable the guard
     */
    setGuard(
      guard: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Setup function sets initial storage of contract.
     * @param _owners List of Safe owners.
     * @param _threshold Number of required confirmations for a Safe transaction.
     * @param data Data payload for optional delegate call.
     * @param fallbackHandler Handler for fallback calls to this contract
     * @param payment Value that should be paid
     * @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)
     * @param paymentToken Token that should be used for the payment (0 is ETH)
     * @param to Contract address for optional delegate call.
     */
    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulate(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to swap/replace an owner from the Safe with another address.      This can only be done via a Safe transaction.
     * Replaces the owner `oldOwner` in the Safe with `newOwner`.
     * @param newOwner New owner address.
     * @param oldOwner Owner address to be replaced.
     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list
     */
    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
