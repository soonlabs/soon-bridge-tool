/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DeployConfigInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "basefeeScalar()": FunctionFragment;
    "batchInboxAddress()": FunctionFragment;
    "batchSenderAddress()": FunctionFragment;
    "blobbasefeeScalar()": FunctionFragment;
    "channelTimeout()": FunctionFragment;
    "customGasTokenAddress()": FunctionFragment;
    "daBondSize()": FunctionFragment;
    "daChallengeWindow()": FunctionFragment;
    "daCommitmentType()": FunctionFragment;
    "daResolveWindow()": FunctionFragment;
    "daResolverRefundPercentage()": FunctionFragment;
    "disputeGameFinalityDelaySeconds()": FunctionFragment;
    "eip1559Denominator()": FunctionFragment;
    "eip1559Elasticity()": FunctionFragment;
    "enableGovernance()": FunctionFragment;
    "faultGameAbsolutePrestate()": FunctionFragment;
    "faultGameClockExtension()": FunctionFragment;
    "faultGameGenesisBlock()": FunctionFragment;
    "faultGameGenesisOutputRoot()": FunctionFragment;
    "faultGameMaxClockDuration()": FunctionFragment;
    "faultGameMaxDepth()": FunctionFragment;
    "faultGameSplitDepth()": FunctionFragment;
    "faultGameWithdrawalDelay()": FunctionFragment;
    "finalSystemOwner()": FunctionFragment;
    "finalizationPeriodSeconds()": FunctionFragment;
    "fork()": FunctionFragment;
    "fundDevAccounts()": FunctionFragment;
    "governanceTokenName()": FunctionFragment;
    "governanceTokenOwner()": FunctionFragment;
    "governanceTokenSymbol()": FunctionFragment;
    "l1ChainID()": FunctionFragment;
    "l1StartingBlockTag()": FunctionFragment;
    "l2BlockTime()": FunctionFragment;
    "l2ChainID()": FunctionFragment;
    "l2GenesisBlockGasLimit()": FunctionFragment;
    "l2GenesisDeltaTimeOffset()": FunctionFragment;
    "l2GenesisEcotoneTimeOffset()": FunctionFragment;
    "l2GenesisFjordTimeOffset()": FunctionFragment;
    "l2GenesisGraniteTimeOffset()": FunctionFragment;
    "l2OutputOracleChallenger()": FunctionFragment;
    "l2OutputOracleProposer()": FunctionFragment;
    "l2OutputOracleStartingBlockNumber()": FunctionFragment;
    "l2OutputOracleStartingTimestamp()": FunctionFragment;
    "l2OutputOracleSubmissionInterval()": FunctionFragment;
    "maxSequencerDrift()": FunctionFragment;
    "p2pSequencerKey()": FunctionFragment;
    "preimageOracleChallengePeriod()": FunctionFragment;
    "preimageOracleMinProposalSize()": FunctionFragment;
    "proofMaturityDelaySeconds()": FunctionFragment;
    "proxyAdminOwner()": FunctionFragment;
    "read(string)": FunctionFragment;
    "recommendedProtocolVersion()": FunctionFragment;
    "requiredProtocolVersion()": FunctionFragment;
    "respectedGameType()": FunctionFragment;
    "sequencerWindowSize()": FunctionFragment;
    "setFundDevAccounts(bool)": FunctionFragment;
    "setUseAltDA(bool)": FunctionFragment;
    "setUseCustomGasToken(address)": FunctionFragment;
    "setUseFaultProofs(bool)": FunctionFragment;
    "setUseInterop(bool)": FunctionFragment;
    "superchainConfigGuardian()": FunctionFragment;
    "systemConfigStartBlock()": FunctionFragment;
    "useAltDA()": FunctionFragment;
    "useCustomGasToken()": FunctionFragment;
    "useFaultProofs()": FunctionFragment;
    "useInterop()": FunctionFragment;
    "useSafe()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "basefeeScalar"
      | "batchInboxAddress"
      | "batchSenderAddress"
      | "blobbasefeeScalar"
      | "channelTimeout"
      | "customGasTokenAddress"
      | "daBondSize"
      | "daChallengeWindow"
      | "daCommitmentType"
      | "daResolveWindow"
      | "daResolverRefundPercentage"
      | "disputeGameFinalityDelaySeconds"
      | "eip1559Denominator"
      | "eip1559Elasticity"
      | "enableGovernance"
      | "faultGameAbsolutePrestate"
      | "faultGameClockExtension"
      | "faultGameGenesisBlock"
      | "faultGameGenesisOutputRoot"
      | "faultGameMaxClockDuration"
      | "faultGameMaxDepth"
      | "faultGameSplitDepth"
      | "faultGameWithdrawalDelay"
      | "finalSystemOwner"
      | "finalizationPeriodSeconds"
      | "fork"
      | "fundDevAccounts"
      | "governanceTokenName"
      | "governanceTokenOwner"
      | "governanceTokenSymbol"
      | "l1ChainID"
      | "l1StartingBlockTag"
      | "l2BlockTime"
      | "l2ChainID"
      | "l2GenesisBlockGasLimit"
      | "l2GenesisDeltaTimeOffset"
      | "l2GenesisEcotoneTimeOffset"
      | "l2GenesisFjordTimeOffset"
      | "l2GenesisGraniteTimeOffset"
      | "l2OutputOracleChallenger"
      | "l2OutputOracleProposer"
      | "l2OutputOracleStartingBlockNumber"
      | "l2OutputOracleStartingTimestamp"
      | "l2OutputOracleSubmissionInterval"
      | "maxSequencerDrift"
      | "p2pSequencerKey"
      | "preimageOracleChallengePeriod"
      | "preimageOracleMinProposalSize"
      | "proofMaturityDelaySeconds"
      | "proxyAdminOwner"
      | "read"
      | "recommendedProtocolVersion"
      | "requiredProtocolVersion"
      | "respectedGameType"
      | "sequencerWindowSize"
      | "setFundDevAccounts"
      | "setUseAltDA"
      | "setUseCustomGasToken"
      | "setUseFaultProofs"
      | "setUseInterop"
      | "superchainConfigGuardian"
      | "systemConfigStartBlock"
      | "useAltDA"
      | "useCustomGasToken"
      | "useFaultProofs"
      | "useInterop"
      | "useSafe"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "basefeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchInboxAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchSenderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blobbasefeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "channelTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customGasTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daBondSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daChallengeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daCommitmentType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daResolveWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daResolverRefundPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFinalityDelaySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip1559Denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip1559Elasticity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameAbsolutePrestate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameClockExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameGenesisBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameGenesisOutputRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameMaxClockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameMaxDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameSplitDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultGameWithdrawalDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalSystemOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizationPeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundDevAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1ChainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1StartingBlockTag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2BlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2ChainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2GenesisBlockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2GenesisDeltaTimeOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2GenesisEcotoneTimeOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2GenesisFjordTimeOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2GenesisGraniteTimeOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracleChallenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracleProposer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracleStartingBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracleStartingTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracleSubmissionInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSequencerDrift",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "p2pSequencerKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preimageOracleChallengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preimageOracleMinProposalSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proofMaturityDelaySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdminOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "read", values: [string]): string;
  encodeFunctionData(
    functionFragment: "recommendedProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "respectedGameType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerWindowSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundDevAccounts",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseAltDA",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseCustomGasToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseFaultProofs",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseInterop",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "superchainConfigGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemConfigStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "useAltDA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "useCustomGasToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useFaultProofs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useInterop",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "useSafe", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basefeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchInboxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blobbasefeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customGasTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daBondSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daChallengeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daCommitmentType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daResolveWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daResolverRefundPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFinalityDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip1559Denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip1559Elasticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameAbsolutePrestate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameClockExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameGenesisBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameGenesisOutputRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameMaxClockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameMaxDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameSplitDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultGameWithdrawalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalSystemOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizationPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundDevAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1ChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1StartingBlockTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2ChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2GenesisBlockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2GenesisDeltaTimeOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2GenesisEcotoneTimeOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2GenesisFjordTimeOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2GenesisGraniteTimeOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracleChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracleProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracleStartingBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracleStartingTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracleSubmissionInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSequencerDrift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p2pSequencerKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preimageOracleChallengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preimageOracleMinProposalSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proofMaturityDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyAdminOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recommendedProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respectedGameType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerWindowSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundDevAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseAltDA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseCustomGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseFaultProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseInterop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superchainConfigGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useAltDA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useCustomGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useFaultProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useInterop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "useSafe", data: BytesLike): Result;

  events: {};
}

export interface DeployConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    basefeeScalar(overrides?: CallOverrides): Promise<[number]>;

    batchInboxAddress(overrides?: CallOverrides): Promise<[string]>;

    batchSenderAddress(overrides?: CallOverrides): Promise<[string]>;

    blobbasefeeScalar(overrides?: CallOverrides): Promise<[number]>;

    channelTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    customGasTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    daBondSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    daChallengeWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    daCommitmentType(overrides?: CallOverrides): Promise<[string]>;

    daResolveWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    daResolverRefundPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    eip1559Denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    eip1559Elasticity(overrides?: CallOverrides): Promise<[BigNumber]>;

    enableGovernance(overrides?: CallOverrides): Promise<[boolean]>;

    faultGameAbsolutePrestate(overrides?: CallOverrides): Promise<[BigNumber]>;

    faultGameClockExtension(overrides?: CallOverrides): Promise<[BigNumber]>;

    faultGameGenesisBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    faultGameGenesisOutputRoot(overrides?: CallOverrides): Promise<[string]>;

    faultGameMaxClockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    faultGameMaxDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    faultGameSplitDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    faultGameWithdrawalDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalSystemOwner(overrides?: CallOverrides): Promise<[string]>;

    finalizationPeriodSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    fork(overrides?: CallOverrides): Promise<[number] & { fork_: number }>;

    fundDevAccounts(overrides?: CallOverrides): Promise<[boolean]>;

    governanceTokenName(overrides?: CallOverrides): Promise<[string]>;

    governanceTokenOwner(overrides?: CallOverrides): Promise<[string]>;

    governanceTokenSymbol(overrides?: CallOverrides): Promise<[string]>;

    l1ChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1StartingBlockTag(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    l2BlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2ChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2GenesisBlockGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2GenesisDeltaTimeOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2GenesisEcotoneTimeOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2GenesisFjordTimeOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2GenesisGraniteTimeOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2OutputOracleChallenger(overrides?: CallOverrides): Promise<[string]>;

    l2OutputOracleProposer(overrides?: CallOverrides): Promise<[string]>;

    l2OutputOracleStartingBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l2OutputOracleStartingTimestamp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    l2OutputOracleSubmissionInterval(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxSequencerDrift(overrides?: CallOverrides): Promise<[BigNumber]>;

    p2pSequencerKey(overrides?: CallOverrides): Promise<[string]>;

    preimageOracleChallengePeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    preimageOracleMinProposalSize(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxyAdminOwner(overrides?: CallOverrides): Promise<[string]>;

    read(
      _path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recommendedProtocolVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredProtocolVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    respectedGameType(overrides?: CallOverrides): Promise<[BigNumber]>;

    sequencerWindowSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allow the `fundDevAccounts` config to be overridden.
     */
    setFundDevAccounts(
      _fundDevAccounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allow the `useAltDA` config to be overridden in testing environments
     */
    setUseAltDA(
      _useAltDA: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allow the `useCustomGasToken` config to be overridden in testing environments
     */
    setUseCustomGasToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allow the `useFaultProofs` config to be overridden in testing environments
     */
    setUseFaultProofs(
      _useFaultProofs: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allow the `useInterop` config to be overridden in testing environments
     */
    setUseInterop(
      _useInterop: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    superchainConfigGuardian(overrides?: CallOverrides): Promise<[string]>;

    systemConfigStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    useAltDA(overrides?: CallOverrides): Promise<[boolean]>;

    useCustomGasToken(overrides?: CallOverrides): Promise<[boolean]>;

    useFaultProofs(overrides?: CallOverrides): Promise<[boolean]>;

    useInterop(overrides?: CallOverrides): Promise<[boolean]>;

    useSafe(overrides?: CallOverrides): Promise<[boolean]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  basefeeScalar(overrides?: CallOverrides): Promise<number>;

  batchInboxAddress(overrides?: CallOverrides): Promise<string>;

  batchSenderAddress(overrides?: CallOverrides): Promise<string>;

  blobbasefeeScalar(overrides?: CallOverrides): Promise<number>;

  channelTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  customGasTokenAddress(overrides?: CallOverrides): Promise<string>;

  daBondSize(overrides?: CallOverrides): Promise<BigNumber>;

  daChallengeWindow(overrides?: CallOverrides): Promise<BigNumber>;

  daCommitmentType(overrides?: CallOverrides): Promise<string>;

  daResolveWindow(overrides?: CallOverrides): Promise<BigNumber>;

  daResolverRefundPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  disputeGameFinalityDelaySeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  eip1559Denominator(overrides?: CallOverrides): Promise<BigNumber>;

  eip1559Elasticity(overrides?: CallOverrides): Promise<BigNumber>;

  enableGovernance(overrides?: CallOverrides): Promise<boolean>;

  faultGameAbsolutePrestate(overrides?: CallOverrides): Promise<BigNumber>;

  faultGameClockExtension(overrides?: CallOverrides): Promise<BigNumber>;

  faultGameGenesisBlock(overrides?: CallOverrides): Promise<BigNumber>;

  faultGameGenesisOutputRoot(overrides?: CallOverrides): Promise<string>;

  faultGameMaxClockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  faultGameMaxDepth(overrides?: CallOverrides): Promise<BigNumber>;

  faultGameSplitDepth(overrides?: CallOverrides): Promise<BigNumber>;

  faultGameWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

  finalSystemOwner(overrides?: CallOverrides): Promise<string>;

  finalizationPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  fork(overrides?: CallOverrides): Promise<number>;

  fundDevAccounts(overrides?: CallOverrides): Promise<boolean>;

  governanceTokenName(overrides?: CallOverrides): Promise<string>;

  governanceTokenOwner(overrides?: CallOverrides): Promise<string>;

  governanceTokenSymbol(overrides?: CallOverrides): Promise<string>;

  l1ChainID(overrides?: CallOverrides): Promise<BigNumber>;

  l1StartingBlockTag(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  l2BlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  l2ChainID(overrides?: CallOverrides): Promise<BigNumber>;

  l2GenesisBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  l2GenesisDeltaTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

  l2GenesisEcotoneTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

  l2GenesisFjordTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

  l2GenesisGraniteTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

  l2OutputOracleChallenger(overrides?: CallOverrides): Promise<string>;

  l2OutputOracleProposer(overrides?: CallOverrides): Promise<string>;

  l2OutputOracleStartingBlockNumber(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l2OutputOracleStartingTimestamp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  l2OutputOracleSubmissionInterval(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxSequencerDrift(overrides?: CallOverrides): Promise<BigNumber>;

  p2pSequencerKey(overrides?: CallOverrides): Promise<string>;

  preimageOracleChallengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  preimageOracleMinProposalSize(overrides?: CallOverrides): Promise<BigNumber>;

  proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

  proxyAdminOwner(overrides?: CallOverrides): Promise<string>;

  read(
    _path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recommendedProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  requiredProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  respectedGameType(overrides?: CallOverrides): Promise<BigNumber>;

  sequencerWindowSize(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allow the `fundDevAccounts` config to be overridden.
   */
  setFundDevAccounts(
    _fundDevAccounts: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allow the `useAltDA` config to be overridden in testing environments
   */
  setUseAltDA(
    _useAltDA: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allow the `useCustomGasToken` config to be overridden in testing environments
   */
  setUseCustomGasToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allow the `useFaultProofs` config to be overridden in testing environments
   */
  setUseFaultProofs(
    _useFaultProofs: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allow the `useInterop` config to be overridden in testing environments
   */
  setUseInterop(
    _useInterop: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  superchainConfigGuardian(overrides?: CallOverrides): Promise<string>;

  systemConfigStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  useAltDA(overrides?: CallOverrides): Promise<boolean>;

  useCustomGasToken(overrides?: CallOverrides): Promise<boolean>;

  useFaultProofs(overrides?: CallOverrides): Promise<boolean>;

  useInterop(overrides?: CallOverrides): Promise<boolean>;

  useSafe(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    basefeeScalar(overrides?: CallOverrides): Promise<number>;

    batchInboxAddress(overrides?: CallOverrides): Promise<string>;

    batchSenderAddress(overrides?: CallOverrides): Promise<string>;

    blobbasefeeScalar(overrides?: CallOverrides): Promise<number>;

    channelTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    customGasTokenAddress(overrides?: CallOverrides): Promise<string>;

    daBondSize(overrides?: CallOverrides): Promise<BigNumber>;

    daChallengeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    daCommitmentType(overrides?: CallOverrides): Promise<string>;

    daResolveWindow(overrides?: CallOverrides): Promise<BigNumber>;

    daResolverRefundPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eip1559Denominator(overrides?: CallOverrides): Promise<BigNumber>;

    eip1559Elasticity(overrides?: CallOverrides): Promise<BigNumber>;

    enableGovernance(overrides?: CallOverrides): Promise<boolean>;

    faultGameAbsolutePrestate(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameClockExtension(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameGenesisBlock(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameGenesisOutputRoot(overrides?: CallOverrides): Promise<string>;

    faultGameMaxClockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameMaxDepth(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameSplitDepth(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    finalSystemOwner(overrides?: CallOverrides): Promise<string>;

    finalizationPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    fork(overrides?: CallOverrides): Promise<number>;

    fundDevAccounts(overrides?: CallOverrides): Promise<boolean>;

    governanceTokenName(overrides?: CallOverrides): Promise<string>;

    governanceTokenOwner(overrides?: CallOverrides): Promise<string>;

    governanceTokenSymbol(overrides?: CallOverrides): Promise<string>;

    l1ChainID(overrides?: CallOverrides): Promise<BigNumber>;

    l1StartingBlockTag(overrides?: CallOverrides): Promise<string>;

    l2BlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    l2ChainID(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisDeltaTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisEcotoneTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisFjordTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisGraniteTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2OutputOracleChallenger(overrides?: CallOverrides): Promise<string>;

    l2OutputOracleProposer(overrides?: CallOverrides): Promise<string>;

    l2OutputOracleStartingBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2OutputOracleStartingTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2OutputOracleSubmissionInterval(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSequencerDrift(overrides?: CallOverrides): Promise<BigNumber>;

    p2pSequencerKey(overrides?: CallOverrides): Promise<string>;

    preimageOracleChallengePeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preimageOracleMinProposalSize(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdminOwner(overrides?: CallOverrides): Promise<string>;

    read(_path: string, overrides?: CallOverrides): Promise<void>;

    recommendedProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    requiredProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    respectedGameType(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerWindowSize(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allow the `fundDevAccounts` config to be overridden.
     */
    setFundDevAccounts(
      _fundDevAccounts: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allow the `useAltDA` config to be overridden in testing environments
     */
    setUseAltDA(_useAltDA: boolean, overrides?: CallOverrides): Promise<void>;

    /**
     * Allow the `useCustomGasToken` config to be overridden in testing environments
     */
    setUseCustomGasToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allow the `useFaultProofs` config to be overridden in testing environments
     */
    setUseFaultProofs(
      _useFaultProofs: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allow the `useInterop` config to be overridden in testing environments
     */
    setUseInterop(
      _useInterop: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    superchainConfigGuardian(overrides?: CallOverrides): Promise<string>;

    systemConfigStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    useAltDA(overrides?: CallOverrides): Promise<boolean>;

    useCustomGasToken(overrides?: CallOverrides): Promise<boolean>;

    useFaultProofs(overrides?: CallOverrides): Promise<boolean>;

    useInterop(overrides?: CallOverrides): Promise<boolean>;

    useSafe(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    basefeeScalar(overrides?: CallOverrides): Promise<BigNumber>;

    batchInboxAddress(overrides?: CallOverrides): Promise<BigNumber>;

    batchSenderAddress(overrides?: CallOverrides): Promise<BigNumber>;

    blobbasefeeScalar(overrides?: CallOverrides): Promise<BigNumber>;

    channelTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    customGasTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    daBondSize(overrides?: CallOverrides): Promise<BigNumber>;

    daChallengeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    daCommitmentType(overrides?: CallOverrides): Promise<BigNumber>;

    daResolveWindow(overrides?: CallOverrides): Promise<BigNumber>;

    daResolverRefundPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eip1559Denominator(overrides?: CallOverrides): Promise<BigNumber>;

    eip1559Elasticity(overrides?: CallOverrides): Promise<BigNumber>;

    enableGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameAbsolutePrestate(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameClockExtension(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameGenesisBlock(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameGenesisOutputRoot(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameMaxClockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameMaxDepth(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameSplitDepth(overrides?: CallOverrides): Promise<BigNumber>;

    faultGameWithdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

    finalSystemOwner(overrides?: CallOverrides): Promise<BigNumber>;

    finalizationPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    fork(overrides?: CallOverrides): Promise<BigNumber>;

    fundDevAccounts(overrides?: CallOverrides): Promise<BigNumber>;

    governanceTokenName(overrides?: CallOverrides): Promise<BigNumber>;

    governanceTokenOwner(overrides?: CallOverrides): Promise<BigNumber>;

    governanceTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    l1ChainID(overrides?: CallOverrides): Promise<BigNumber>;

    l1StartingBlockTag(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    l2BlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    l2ChainID(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisDeltaTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisEcotoneTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisFjordTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2GenesisGraniteTimeOffset(overrides?: CallOverrides): Promise<BigNumber>;

    l2OutputOracleChallenger(overrides?: CallOverrides): Promise<BigNumber>;

    l2OutputOracleProposer(overrides?: CallOverrides): Promise<BigNumber>;

    l2OutputOracleStartingBlockNumber(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2OutputOracleStartingTimestamp(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    l2OutputOracleSubmissionInterval(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSequencerDrift(overrides?: CallOverrides): Promise<BigNumber>;

    p2pSequencerKey(overrides?: CallOverrides): Promise<BigNumber>;

    preimageOracleChallengePeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preimageOracleMinProposalSize(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdminOwner(overrides?: CallOverrides): Promise<BigNumber>;

    read(
      _path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recommendedProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    requiredProtocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    respectedGameType(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerWindowSize(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allow the `fundDevAccounts` config to be overridden.
     */
    setFundDevAccounts(
      _fundDevAccounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allow the `useAltDA` config to be overridden in testing environments
     */
    setUseAltDA(
      _useAltDA: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allow the `useCustomGasToken` config to be overridden in testing environments
     */
    setUseCustomGasToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allow the `useFaultProofs` config to be overridden in testing environments
     */
    setUseFaultProofs(
      _useFaultProofs: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allow the `useInterop` config to be overridden in testing environments
     */
    setUseInterop(
      _useInterop: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    superchainConfigGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    systemConfigStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    useAltDA(overrides?: CallOverrides): Promise<BigNumber>;

    useCustomGasToken(overrides?: CallOverrides): Promise<BigNumber>;

    useFaultProofs(overrides?: CallOverrides): Promise<BigNumber>;

    useInterop(overrides?: CallOverrides): Promise<BigNumber>;

    useSafe(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basefeeScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchInboxAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchSenderAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blobbasefeeScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    channelTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customGasTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daBondSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daChallengeWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daCommitmentType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daResolveWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daResolverRefundPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eip1559Denominator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eip1559Elasticity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    faultGameAbsolutePrestate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultGameClockExtension(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultGameGenesisBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultGameGenesisOutputRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultGameMaxClockDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultGameMaxDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    faultGameSplitDepth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultGameWithdrawalDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalSystemOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizationPeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundDevAccounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceTokenName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceTokenOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceTokenSymbol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1StartingBlockTag(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    l2BlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2ChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2GenesisBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2GenesisDeltaTimeOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2GenesisEcotoneTimeOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2GenesisFjordTimeOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2GenesisGraniteTimeOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2OutputOracleChallenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2OutputOracleProposer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2OutputOracleStartingBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2OutputOracleStartingTimestamp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    l2OutputOracleSubmissionInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSequencerDrift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p2pSequencerKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preimageOracleChallengePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preimageOracleMinProposalSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proofMaturityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAdminOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    read(
      _path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recommendedProtocolVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredProtocolVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respectedGameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerWindowSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allow the `fundDevAccounts` config to be overridden.
     */
    setFundDevAccounts(
      _fundDevAccounts: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allow the `useAltDA` config to be overridden in testing environments
     */
    setUseAltDA(
      _useAltDA: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allow the `useCustomGasToken` config to be overridden in testing environments
     */
    setUseCustomGasToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allow the `useFaultProofs` config to be overridden in testing environments
     */
    setUseFaultProofs(
      _useFaultProofs: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allow the `useInterop` config to be overridden in testing environments
     */
    setUseInterop(
      _useInterop: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    superchainConfigGuardian(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    systemConfigStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    useAltDA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useCustomGasToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useFaultProofs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useInterop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
