/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IMulticall3 {
  export type Call3Struct = {
    target: string;
    allowFailure: boolean;
    callData: BytesLike;
  };

  export type Call3StructOutput = [string, boolean, string] & {
    target: string;
    allowFailure: boolean;
    callData: string;
  };

  export type ResultStruct = { success: boolean; returnData: BytesLike };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };
}

export interface IMulticall3Interface extends utils.Interface {
  functions: {
    "aggregate3((address,bool,bytes)[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "aggregate3"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregate3",
    values: [IMulticall3.Call3Struct[]]
  ): string;

  decodeFunctionResult(functionFragment: "aggregate3", data: BytesLike): Result;

  events: {};
}

export interface IMulticall3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMulticall3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregate3(
      calls: IMulticall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  aggregate3(
    calls: IMulticall3.Call3Struct[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    aggregate3(
      calls: IMulticall3.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<IMulticall3.ResultStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    aggregate3(
      calls: IMulticall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregate3(
      calls: IMulticall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
