/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type SchemaRecordStruct = {
  uid: BytesLike;
  resolver: string;
  revocable: boolean;
  schema: string;
};

export type SchemaRecordStructOutput = [string, string, boolean, string] & {
  uid: string;
  resolver: string;
  revocable: boolean;
  schema: string;
};

export interface ISchemaRegistryInterface extends utils.Interface {
  functions: {
    "getSchema(bytes32)": FunctionFragment;
    "register(string,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getSchema" | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSchema",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "getSchema", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {
    "Registered(bytes32,address,(bytes32,address,bool,string))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
}

export interface RegisteredEventObject {
  uid: string;
  registerer: string;
  schema: SchemaRecordStructOutput;
}
export type RegisteredEvent = TypedEvent<
  [string, string, SchemaRecordStructOutput],
  RegisteredEventObject
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export interface ISchemaRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISchemaRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns an existing schema by UID
     * @param uid The UID of the schema to retrieve.
     */
    getSchema(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SchemaRecordStructOutput]>;

    /**
     * Submits and reserves a new schema
     * @param resolver An optional schema resolver.
     * @param revocable Whether the schema allows revocations explicitly.
     * @param schema The schema data schema.
     */
    register(
      schema: string,
      resolver: string,
      revocable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns an existing schema by UID
   * @param uid The UID of the schema to retrieve.
   */
  getSchema(
    uid: BytesLike,
    overrides?: CallOverrides
  ): Promise<SchemaRecordStructOutput>;

  /**
   * Submits and reserves a new schema
   * @param resolver An optional schema resolver.
   * @param revocable Whether the schema allows revocations explicitly.
   * @param schema The schema data schema.
   */
  register(
    schema: string,
    resolver: string,
    revocable: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns an existing schema by UID
     * @param uid The UID of the schema to retrieve.
     */
    getSchema(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<SchemaRecordStructOutput>;

    /**
     * Submits and reserves a new schema
     * @param resolver An optional schema resolver.
     * @param revocable Whether the schema allows revocations explicitly.
     * @param schema The schema data schema.
     */
    register(
      schema: string,
      resolver: string,
      revocable: boolean,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Registered(bytes32,address,(bytes32,address,bool,string))"(
      uid?: BytesLike | null,
      registerer?: string | null,
      schema?: null
    ): RegisteredEventFilter;
    Registered(
      uid?: BytesLike | null,
      registerer?: string | null,
      schema?: null
    ): RegisteredEventFilter;
  };

  estimateGas: {
    /**
     * Returns an existing schema by UID
     * @param uid The UID of the schema to retrieve.
     */
    getSchema(uid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Submits and reserves a new schema
     * @param resolver An optional schema resolver.
     * @param revocable Whether the schema allows revocations explicitly.
     * @param schema The schema data schema.
     */
    register(
      schema: string,
      resolver: string,
      revocable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns an existing schema by UID
     * @param uid The UID of the schema to retrieve.
     */
    getSchema(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Submits and reserves a new schema
     * @param resolver An optional schema resolver.
     * @param revocable Whether the schema allows revocations explicitly.
     * @param schema The schema data schema.
     */
    register(
      schema: string,
      resolver: string,
      revocable: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
