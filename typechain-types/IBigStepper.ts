/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IBigStepperInterface extends utils.Interface {
  functions: {
    "oracle()": FunctionFragment;
    "step(bytes,bytes,bytes32)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "oracle" | "step"): FunctionFragment;

  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "step",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;

  events: {};
}

export interface IBigStepper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBigStepperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the preimage oracle used by the state machine.
     */
    oracle(overrides?: CallOverrides): Promise<[string] & { oracle_: string }>;

    /**
     * Performs the state transition from a given prestate and returns the hash of the post state witness.
     * @param _localContext The local key context for the preimage oracle. Optional, can be set as a constant if the                      implementation only requires one set of local keys.
     * @param _proof Opaque proof data, can be used to prove things about the prestate in relation to the state of the               interface's implementation.
     * @param _stateData The raw opaque prestate data.
     */
    step(
      _stateData: BytesLike,
      _proof: BytesLike,
      _localContext: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the preimage oracle used by the state machine.
   */
  oracle(overrides?: CallOverrides): Promise<string>;

  /**
   * Performs the state transition from a given prestate and returns the hash of the post state witness.
   * @param _localContext The local key context for the preimage oracle. Optional, can be set as a constant if the                      implementation only requires one set of local keys.
   * @param _proof Opaque proof data, can be used to prove things about the prestate in relation to the state of the               interface's implementation.
   * @param _stateData The raw opaque prestate data.
   */
  step(
    _stateData: BytesLike,
    _proof: BytesLike,
    _localContext: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the preimage oracle used by the state machine.
     */
    oracle(overrides?: CallOverrides): Promise<string>;

    /**
     * Performs the state transition from a given prestate and returns the hash of the post state witness.
     * @param _localContext The local key context for the preimage oracle. Optional, can be set as a constant if the                      implementation only requires one set of local keys.
     * @param _proof Opaque proof data, can be used to prove things about the prestate in relation to the state of the               interface's implementation.
     * @param _stateData The raw opaque prestate data.
     */
    step(
      _stateData: BytesLike,
      _proof: BytesLike,
      _localContext: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Returns the preimage oracle used by the state machine.
     */
    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Performs the state transition from a given prestate and returns the hash of the post state witness.
     * @param _localContext The local key context for the preimage oracle. Optional, can be set as a constant if the                      implementation only requires one set of local keys.
     * @param _proof Opaque proof data, can be used to prove things about the prestate in relation to the state of the               interface's implementation.
     * @param _stateData The raw opaque prestate data.
     */
    step(
      _stateData: BytesLike,
      _proof: BytesLike,
      _localContext: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the preimage oracle used by the state machine.
     */
    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Performs the state transition from a given prestate and returns the hash of the post state witness.
     * @param _localContext The local key context for the preimage oracle. Optional, can be set as a constant if the                      implementation only requires one set of local keys.
     * @param _proof Opaque proof data, can be used to prove things about the prestate in relation to the state of the               interface's implementation.
     * @param _stateData The raw opaque prestate data.
     */
    step(
      _stateData: BytesLike,
      _proof: BytesLike,
      _localContext: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
