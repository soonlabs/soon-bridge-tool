/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ResourceMetering {
  export type ResourceConfigStruct = {
    maxResourceLimit: BigNumberish;
    elasticityMultiplier: BigNumberish;
    baseFeeMaxChangeDenominator: BigNumberish;
    minimumBaseFee: BigNumberish;
    systemTxMaxGas: BigNumberish;
    maximumBaseFee: BigNumberish;
  };

  export type ResourceConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber
  ] & {
    maxResourceLimit: number;
    elasticityMultiplier: number;
    baseFeeMaxChangeDenominator: number;
    minimumBaseFee: number;
    systemTxMaxGas: number;
    maximumBaseFee: BigNumber;
  };
}

export interface ISystemConfigV0Interface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "batcherHash()": FunctionFragment;
    "gasLimit()": FunctionFragment;
    "overhead()": FunctionFragment;
    "owner()": FunctionFragment;
    "resourceConfig()": FunctionFragment;
    "scalar()": FunctionFragment;
    "unsafeBlockSigner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "batcherHash"
      | "gasLimit"
      | "overhead"
      | "owner"
      | "resourceConfig"
      | "scalar"
      | "unsafeBlockSigner"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batcherHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "overhead", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resourceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scalar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unsafeBlockSigner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batcherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "overhead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scalar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeBlockSigner",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISystemConfigV0 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISystemConfigV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    batcherHash(overrides?: CallOverrides): Promise<[string]>;

    gasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    overhead(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<[ResourceMetering.ResourceConfigStructOutput]>;

    scalar(overrides?: CallOverrides): Promise<[BigNumber]>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<[string]>;
  };

  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  batcherHash(overrides?: CallOverrides): Promise<string>;

  gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  overhead(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  resourceConfig(
    overrides?: CallOverrides
  ): Promise<ResourceMetering.ResourceConfigStructOutput>;

  scalar(overrides?: CallOverrides): Promise<BigNumber>;

  unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    batcherHash(overrides?: CallOverrides): Promise<string>;

    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    overhead(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    resourceConfig(
      overrides?: CallOverrides
    ): Promise<ResourceMetering.ResourceConfigStructOutput>;

    scalar(overrides?: CallOverrides): Promise<BigNumber>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    batcherHash(overrides?: CallOverrides): Promise<BigNumber>;

    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    overhead(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    resourceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    scalar(overrides?: CallOverrides): Promise<BigNumber>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batcherHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overhead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resourceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
