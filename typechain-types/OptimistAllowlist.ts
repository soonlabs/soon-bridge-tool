/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OptimistAllowlistInterface extends utils.Interface {
  functions: {
    "ALLOWLIST_ATTESTOR()": FunctionFragment;
    "ATTESTATION_STATION()": FunctionFragment;
    "COINBASE_QUEST_ATTESTOR()": FunctionFragment;
    "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY()": FunctionFragment;
    "OPTIMIST_CAN_MINT_ATTESTATION_KEY()": FunctionFragment;
    "OPTIMIST_INVITER()": FunctionFragment;
    "isAllowedToMint(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ALLOWLIST_ATTESTOR"
      | "ATTESTATION_STATION"
      | "COINBASE_QUEST_ATTESTOR"
      | "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY"
      | "OPTIMIST_CAN_MINT_ATTESTATION_KEY"
      | "OPTIMIST_INVITER"
      | "isAllowedToMint"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALLOWLIST_ATTESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ATTESTATION_STATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COINBASE_QUEST_ATTESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMIST_INVITER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToMint",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ALLOWLIST_ATTESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ATTESTATION_STATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COINBASE_QUEST_ATTESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMIST_INVITER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface OptimistAllowlist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimistAllowlistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Attestor that issues 'optimist.can-mint' attestations.
     */
    ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Attestor that issues 'coinbase.quest-eligible' attestations.
     */
    COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Attestation key used by Coinbase to issue attestations for Quest participants.
     */
    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.
     */
    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.
     */
    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract.
     * @param _claimer Address to check.
     */
    isAllowedToMint(
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed_: boolean }>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Attestor that issues 'optimist.can-mint' attestations.
   */
  ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of the AttestationStation contract.
   */
  ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

  /**
   * Attestor that issues 'coinbase.quest-eligible' attestations.
   */
  COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

  /**
   * Attestation key used by Coinbase to issue attestations for Quest participants.
   */
  COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.
   */
  OPTIMIST_CAN_MINT_ATTESTATION_KEY(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.
   */
  OPTIMIST_INVITER(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract.
   * @param _claimer Address to check.
   */
  isAllowedToMint(
    _claimer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Attestor that issues 'optimist.can-mint' attestations.
     */
    ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

    /**
     * Attestor that issues 'coinbase.quest-eligible' attestations.
     */
    COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<string>;

    /**
     * Attestation key used by Coinbase to issue attestations for Quest participants.
     */
    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.
     */
    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.
     */
    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract.
     * @param _claimer Address to check.
     */
    isAllowedToMint(
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Attestor that issues 'optimist.can-mint' attestations.
     */
    ALLOWLIST_ATTESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Attestor that issues 'coinbase.quest-eligible' attestations.
     */
    COINBASE_QUEST_ATTESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Attestation key used by Coinbase to issue attestations for Quest participants.
     */
    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.
     */
    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.
     */
    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract.
     * @param _claimer Address to check.
     */
    isAllowedToMint(
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Attestor that issues 'optimist.can-mint' attestations.
     */
    ALLOWLIST_ATTESTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Attestor that issues 'coinbase.quest-eligible' attestations.
     */
    COINBASE_QUEST_ATTESTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Attestation key used by Coinbase to issue attestations for Quest participants.
     */
    COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Attestation key used by the AllowlistAttestor to manually add addresses to the         allowlist.
     */
    OPTIMIST_CAN_MINT_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Address of OptimistInviter contract that issues 'optimist.can-mint-from-invite'         attestations.
     */
    OPTIMIST_INVITER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks whether a given address is allowed to mint the Optimist NFT yet. Since the         Optimist NFT will also be used as part of the Citizens House, mints are currently         restricted. Eventually anyone will be able to mint.         Currently, address is allowed to mint if it satisfies any of the following:          1) Has a valid 'optimist.can-mint' attestation from the allowlist attestor.          2) Has a valid 'coinbase.quest-eligible' attestation from Coinbase Quest attestor          3) Has a valid 'optimist.can-mint-from-invite' attestation from the OptimistInviter             contract.
     * @param _claimer Address to check.
     */
    isAllowedToMint(
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
