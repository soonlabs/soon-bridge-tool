/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DeployImplementationsOutput {
  export type OutputStruct = {
    delayedWETHImpl: string;
    optimismPortal2Impl: string;
    preimageOracleSingleton: string;
    mipsSingleton: string;
    systemConfigImpl: string;
    l1CrossDomainMessengerImpl: string;
    l1ERC721BridgeImpl: string;
    l1StandardBridgeImpl: string;
    optimismMintableERC20FactoryImpl: string;
  };

  export type OutputStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    delayedWETHImpl: string;
    optimismPortal2Impl: string;
    preimageOracleSingleton: string;
    mipsSingleton: string;
    systemConfigImpl: string;
    l1CrossDomainMessengerImpl: string;
    l1ERC721BridgeImpl: string;
    l1StandardBridgeImpl: string;
    optimismMintableERC20FactoryImpl: string;
  };
}

export interface DeployImplementationsOutputInterface extends utils.Interface {
  functions: {
    "checkOutput()": FunctionFragment;
    "delayedWETHImpl()": FunctionFragment;
    "l1CrossDomainMessengerImpl()": FunctionFragment;
    "l1ERC721BridgeImpl()": FunctionFragment;
    "l1StandardBridgeImpl()": FunctionFragment;
    "mipsSingleton()": FunctionFragment;
    "optimismMintableERC20FactoryImpl()": FunctionFragment;
    "optimismPortal2Impl()": FunctionFragment;
    "output()": FunctionFragment;
    "preimageOracleSingleton()": FunctionFragment;
    "set(bytes4,address)": FunctionFragment;
    "systemConfigImpl()": FunctionFragment;
    "writeOutputFile(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkOutput"
      | "delayedWETHImpl"
      | "l1CrossDomainMessengerImpl"
      | "l1ERC721BridgeImpl"
      | "l1StandardBridgeImpl"
      | "mipsSingleton"
      | "optimismMintableERC20FactoryImpl"
      | "optimismPortal2Impl"
      | "output"
      | "preimageOracleSingleton"
      | "set"
      | "systemConfigImpl"
      | "writeOutputFile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkOutput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedWETHImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1CrossDomainMessengerImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1ERC721BridgeImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1StandardBridgeImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mipsSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismMintableERC20FactoryImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismPortal2Impl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "output", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preimageOracleSingleton",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "systemConfigImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "writeOutputFile",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedWETHImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessengerImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ERC721BridgeImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1StandardBridgeImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mipsSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismMintableERC20FactoryImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismPortal2Impl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "output", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preimageOracleSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeOutputFile",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DeployImplementationsOutput extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployImplementationsOutputInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkOutput(overrides?: CallOverrides): Promise<[void]>;

    delayedWETHImpl(overrides?: CallOverrides): Promise<[string]>;

    l1CrossDomainMessengerImpl(overrides?: CallOverrides): Promise<[string]>;

    l1ERC721BridgeImpl(overrides?: CallOverrides): Promise<[string]>;

    l1StandardBridgeImpl(overrides?: CallOverrides): Promise<[string]>;

    mipsSingleton(overrides?: CallOverrides): Promise<[string]>;

    optimismMintableERC20FactoryImpl(
      overrides?: CallOverrides
    ): Promise<[string]>;

    optimismPortal2Impl(overrides?: CallOverrides): Promise<[string]>;

    output(
      overrides?: CallOverrides
    ): Promise<[DeployImplementationsOutput.OutputStructOutput]>;

    preimageOracleSingleton(overrides?: CallOverrides): Promise<[string]>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    systemConfigImpl(overrides?: CallOverrides): Promise<[string]>;

    writeOutputFile(
      _outfile: string,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  checkOutput(overrides?: CallOverrides): Promise<void>;

  delayedWETHImpl(overrides?: CallOverrides): Promise<string>;

  l1CrossDomainMessengerImpl(overrides?: CallOverrides): Promise<string>;

  l1ERC721BridgeImpl(overrides?: CallOverrides): Promise<string>;

  l1StandardBridgeImpl(overrides?: CallOverrides): Promise<string>;

  mipsSingleton(overrides?: CallOverrides): Promise<string>;

  optimismMintableERC20FactoryImpl(overrides?: CallOverrides): Promise<string>;

  optimismPortal2Impl(overrides?: CallOverrides): Promise<string>;

  output(
    overrides?: CallOverrides
  ): Promise<DeployImplementationsOutput.OutputStructOutput>;

  preimageOracleSingleton(overrides?: CallOverrides): Promise<string>;

  set(
    sel: BytesLike,
    _addr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  systemConfigImpl(overrides?: CallOverrides): Promise<string>;

  writeOutputFile(_outfile: string, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    checkOutput(overrides?: CallOverrides): Promise<void>;

    delayedWETHImpl(overrides?: CallOverrides): Promise<string>;

    l1CrossDomainMessengerImpl(overrides?: CallOverrides): Promise<string>;

    l1ERC721BridgeImpl(overrides?: CallOverrides): Promise<string>;

    l1StandardBridgeImpl(overrides?: CallOverrides): Promise<string>;

    mipsSingleton(overrides?: CallOverrides): Promise<string>;

    optimismMintableERC20FactoryImpl(
      overrides?: CallOverrides
    ): Promise<string>;

    optimismPortal2Impl(overrides?: CallOverrides): Promise<string>;

    output(
      overrides?: CallOverrides
    ): Promise<DeployImplementationsOutput.OutputStructOutput>;

    preimageOracleSingleton(overrides?: CallOverrides): Promise<string>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    systemConfigImpl(overrides?: CallOverrides): Promise<string>;

    writeOutputFile(_outfile: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkOutput(overrides?: CallOverrides): Promise<BigNumber>;

    delayedWETHImpl(overrides?: CallOverrides): Promise<BigNumber>;

    l1CrossDomainMessengerImpl(overrides?: CallOverrides): Promise<BigNumber>;

    l1ERC721BridgeImpl(overrides?: CallOverrides): Promise<BigNumber>;

    l1StandardBridgeImpl(overrides?: CallOverrides): Promise<BigNumber>;

    mipsSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    optimismMintableERC20FactoryImpl(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimismPortal2Impl(overrides?: CallOverrides): Promise<BigNumber>;

    output(overrides?: CallOverrides): Promise<BigNumber>;

    preimageOracleSingleton(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    systemConfigImpl(overrides?: CallOverrides): Promise<BigNumber>;

    writeOutputFile(
      _outfile: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkOutput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedWETHImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1CrossDomainMessengerImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ERC721BridgeImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1StandardBridgeImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mipsSingleton(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimismMintableERC20FactoryImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimismPortal2Impl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    output(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preimageOracleSingleton(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    systemConfigImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    writeOutputFile(
      _outfile: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
