/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DeployImplementationsInput {
  export type InputStruct = {
    withdrawalDelaySeconds: BigNumberish;
    minProposalSizeBytes: BigNumberish;
    challengePeriodSeconds: BigNumberish;
    proofMaturityDelaySeconds: BigNumberish;
    disputeGameFinalityDelaySeconds: BigNumberish;
  };

  export type InputStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    withdrawalDelaySeconds: BigNumber;
    minProposalSizeBytes: BigNumber;
    challengePeriodSeconds: BigNumber;
    proofMaturityDelaySeconds: BigNumber;
    disputeGameFinalityDelaySeconds: BigNumber;
  };
}

export declare namespace DeployImplementationsOutput {
  export type OutputStruct = {
    delayedWETHImpl: string;
    optimismPortal2Impl: string;
    preimageOracleSingleton: string;
    mipsSingleton: string;
    systemConfigImpl: string;
    l1CrossDomainMessengerImpl: string;
    l1ERC721BridgeImpl: string;
    l1StandardBridgeImpl: string;
    optimismMintableERC20FactoryImpl: string;
  };

  export type OutputStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    delayedWETHImpl: string;
    optimismPortal2Impl: string;
    preimageOracleSingleton: string;
    mipsSingleton: string;
    systemConfigImpl: string;
    l1CrossDomainMessengerImpl: string;
    l1ERC721BridgeImpl: string;
    l1StandardBridgeImpl: string;
    optimismMintableERC20FactoryImpl: string;
  };
}

export interface DeployImplementationsInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "deployDelayedWETHImpl(address,address)": FunctionFragment;
    "deployL1CrossDomainMessengerImpl(address,address)": FunctionFragment;
    "deployL1ERC721BridgeImpl(address,address)": FunctionFragment;
    "deployL1StandardBridgeImpl(address,address)": FunctionFragment;
    "deployMipsSingleton(address,address)": FunctionFragment;
    "deployOptimismMintableERC20FactoryImpl(address,address)": FunctionFragment;
    "deployOptimismPortalImpl(address,address)": FunctionFragment;
    "deployPreimageOracleSingleton(address,address)": FunctionFragment;
    "deploySystemConfigImpl(address,address)": FunctionFragment;
    "getIOContracts()": FunctionFragment;
    "run(string)": FunctionFragment;
    "run((uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "run(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "deployDelayedWETHImpl"
      | "deployL1CrossDomainMessengerImpl"
      | "deployL1ERC721BridgeImpl"
      | "deployL1StandardBridgeImpl"
      | "deployMipsSingleton"
      | "deployOptimismMintableERC20FactoryImpl"
      | "deployOptimismPortalImpl"
      | "deployPreimageOracleSingleton"
      | "deploySystemConfigImpl"
      | "getIOContracts"
      | "run(string)"
      | "run((uint256,uint256,uint256,uint256,uint256))"
      | "run(address,address)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployDelayedWETHImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployL1CrossDomainMessengerImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployL1ERC721BridgeImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployL1StandardBridgeImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployMipsSingleton",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOptimismMintableERC20FactoryImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOptimismPortalImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPreimageOracleSingleton",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deploySystemConfigImpl",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIOContracts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "run(string)", values: [string]): string;
  encodeFunctionData(
    functionFragment: "run((uint256,uint256,uint256,uint256,uint256))",
    values: [DeployImplementationsInput.InputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "run(address,address)",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployDelayedWETHImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployL1CrossDomainMessengerImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployL1ERC721BridgeImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployL1StandardBridgeImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployMipsSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOptimismMintableERC20FactoryImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOptimismPortalImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPreimageOracleSingleton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySystemConfigImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIOContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "run(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "run((uint256,uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "run(address,address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DeployImplementations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployImplementationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    deployDelayedWETHImpl(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployL1CrossDomainMessengerImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployL1ERC721BridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployL1StandardBridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployMipsSingleton(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployOptimismMintableERC20FactoryImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployOptimismPortalImpl(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployPreimageOracleSingleton(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deploySystemConfigImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getIOContracts(
      overrides?: CallOverrides
    ): Promise<[string, string] & { dsi_: string; dso_: string }>;

    "run(string)"(
      _infile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "run((uint256,uint256,uint256,uint256,uint256))"(
      _input: DeployImplementationsInput.InputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "run(address,address)"(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  deployDelayedWETHImpl(
    _dsi: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployL1CrossDomainMessengerImpl(
    arg0: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployL1ERC721BridgeImpl(
    arg0: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployL1StandardBridgeImpl(
    arg0: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployMipsSingleton(
    arg0: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployOptimismMintableERC20FactoryImpl(
    arg0: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployOptimismPortalImpl(
    _dsi: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployPreimageOracleSingleton(
    _dsi: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deploySystemConfigImpl(
    arg0: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getIOContracts(
    overrides?: CallOverrides
  ): Promise<[string, string] & { dsi_: string; dso_: string }>;

  "run(string)"(
    _infile: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "run((uint256,uint256,uint256,uint256,uint256))"(
    _input: DeployImplementationsInput.InputStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "run(address,address)"(
    _dsi: string,
    _dso: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    deployDelayedWETHImpl(
      _dsi: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployL1CrossDomainMessengerImpl(
      arg0: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployL1ERC721BridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployL1StandardBridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployMipsSingleton(
      arg0: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployOptimismMintableERC20FactoryImpl(
      arg0: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployOptimismPortalImpl(
      _dsi: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPreimageOracleSingleton(
      _dsi: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deploySystemConfigImpl(
      arg0: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getIOContracts(
      overrides?: CallOverrides
    ): Promise<[string, string] & { dsi_: string; dso_: string }>;

    "run(string)"(_infile: string, overrides?: CallOverrides): Promise<void>;

    "run((uint256,uint256,uint256,uint256,uint256))"(
      _input: DeployImplementationsInput.InputStruct,
      overrides?: CallOverrides
    ): Promise<DeployImplementationsOutput.OutputStructOutput>;

    "run(address,address)"(
      _dsi: string,
      _dso: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    deployDelayedWETHImpl(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployL1CrossDomainMessengerImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployL1ERC721BridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployL1StandardBridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployMipsSingleton(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployOptimismMintableERC20FactoryImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployOptimismPortalImpl(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployPreimageOracleSingleton(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deploySystemConfigImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getIOContracts(overrides?: CallOverrides): Promise<BigNumber>;

    "run(string)"(
      _infile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "run((uint256,uint256,uint256,uint256,uint256))"(
      _input: DeployImplementationsInput.InputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "run(address,address)"(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployDelayedWETHImpl(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployL1CrossDomainMessengerImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployL1ERC721BridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployL1StandardBridgeImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployMipsSingleton(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployOptimismMintableERC20FactoryImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployOptimismPortalImpl(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployPreimageOracleSingleton(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deploySystemConfigImpl(
      arg0: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getIOContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "run(string)"(
      _infile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "run((uint256,uint256,uint256,uint256,uint256))"(
      _input: DeployImplementationsInput.InputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "run(address,address)"(
      _dsi: string,
      _dso: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
