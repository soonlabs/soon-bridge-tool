/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DrippieConfigInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "drip(uint256)": FunctionFragment;
    "dripchecks(string)": FunctionFragment;
    "drippie()": FunctionFragment;
    "drips(uint256)": FunctionFragment;
    "dripsLength()": FunctionFragment;
    "gelato()": FunctionFragment;
    "mustGetDripCheck(string)": FunctionFragment;
    "names(string)": FunctionFragment;
    "prefix()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "drip"
      | "dripchecks"
      | "drippie"
      | "drips"
      | "dripsLength"
      | "gelato"
      | "mustGetDripCheck"
      | "names"
      | "prefix"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "drip", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "dripchecks", values: [string]): string;
  encodeFunctionData(functionFragment: "drippie", values?: undefined): string;
  encodeFunctionData(functionFragment: "drips", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "dripsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mustGetDripCheck",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "names", values: [string]): string;
  encodeFunctionData(functionFragment: "prefix", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dripchecks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drippie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dripsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mustGetDripCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "names", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prefix", data: BytesLike): Result;

  events: {};
}

export interface DrippieConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DrippieConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Returns the drip configuration at the given index as ABI-encoded bytes.
     */
    drip(_index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Mapping of dripcheck names to addresses.
     */
    dripchecks(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Drippie contract.
     */
    drippie(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Drip configuration array.
     */
    drips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber, string] & {
        name: string;
        dripcheck: string;
        checkparams: string;
        recipient: string;
        value: BigNumber;
        interval: BigNumber;
        data: string;
      }
    >;

    /**
     * Returns the number of drips in the configuration.
     */
    dripsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gelato automation contract.
     */
    gelato(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Retrieves the address of a dripcheck and reverts if it is not found.
     * @param _name Name of the dripcheck.
     */
    mustGetDripCheck(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Mapping of drip names in the config.
     */
    names(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Prefix for the configuration file.
     */
    prefix(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the drip configuration at the given index as ABI-encoded bytes.
   */
  drip(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Mapping of dripcheck names to addresses.
   */
  dripchecks(arg0: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Drippie contract.
   */
  drippie(overrides?: CallOverrides): Promise<string>;

  /**
   * Drip configuration array.
   */
  drips(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber, string] & {
      name: string;
      dripcheck: string;
      checkparams: string;
      recipient: string;
      value: BigNumber;
      interval: BigNumber;
      data: string;
    }
  >;

  /**
   * Returns the number of drips in the configuration.
   */
  dripsLength(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gelato automation contract.
   */
  gelato(overrides?: CallOverrides): Promise<string>;

  /**
   * Retrieves the address of a dripcheck and reverts if it is not found.
   * @param _name Name of the dripcheck.
   */
  mustGetDripCheck(_name: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Mapping of drip names in the config.
   */
  names(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Prefix for the configuration file.
   */
  prefix(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the drip configuration at the given index as ABI-encoded bytes.
     */
    drip(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Mapping of dripcheck names to addresses.
     */
    dripchecks(arg0: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Drippie contract.
     */
    drippie(overrides?: CallOverrides): Promise<string>;

    /**
     * Drip configuration array.
     */
    drips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber, string] & {
        name: string;
        dripcheck: string;
        checkparams: string;
        recipient: string;
        value: BigNumber;
        interval: BigNumber;
        data: string;
      }
    >;

    /**
     * Returns the number of drips in the configuration.
     */
    dripsLength(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gelato automation contract.
     */
    gelato(overrides?: CallOverrides): Promise<string>;

    /**
     * Retrieves the address of a dripcheck and reverts if it is not found.
     * @param _name Name of the dripcheck.
     */
    mustGetDripCheck(_name: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Mapping of drip names in the config.
     */
    names(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Prefix for the configuration file.
     */
    prefix(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the drip configuration at the given index as ABI-encoded bytes.
     */
    drip(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Mapping of dripcheck names to addresses.
     */
    dripchecks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Drippie contract.
     */
    drippie(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Drip configuration array.
     */
    drips(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the number of drips in the configuration.
     */
    dripsLength(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gelato automation contract.
     */
    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves the address of a dripcheck and reverts if it is not found.
     * @param _name Name of the dripcheck.
     */
    mustGetDripCheck(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Mapping of drip names in the config.
     */
    names(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Prefix for the configuration file.
     */
    prefix(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the drip configuration at the given index as ABI-encoded bytes.
     */
    drip(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mapping of dripcheck names to addresses.
     */
    dripchecks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Drippie contract.
     */
    drippie(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Drip configuration array.
     */
    drips(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of drips in the configuration.
     */
    dripsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gelato automation contract.
     */
    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Retrieves the address of a dripcheck and reverts if it is not found.
     * @param _name Name of the dripcheck.
     */
    mustGetDripCheck(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mapping of drip names in the config.
     */
    names(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Prefix for the configuration file.
     */
    prefix(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
