/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DeputyGuardianModuleInterface extends utils.Interface {
  functions: {
    "blacklistDisputeGame(address,address)": FunctionFragment;
    "deputyGuardian()": FunctionFragment;
    "pause()": FunctionFragment;
    "safe()": FunctionFragment;
    "setAnchorState(address,address)": FunctionFragment;
    "setRespectedGameType(address,uint32)": FunctionFragment;
    "superchainConfig()": FunctionFragment;
    "unpause()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blacklistDisputeGame"
      | "deputyGuardian"
      | "pause"
      | "safe"
      | "setAnchorState"
      | "setRespectedGameType"
      | "superchainConfig"
      | "unpause"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blacklistDisputeGame",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deputyGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAnchorState",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRespectedGameType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "superchainConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "blacklistDisputeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deputyGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnchorState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRespectedGameType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superchainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DisputeGameBlacklisted(address)": EventFragment;
    "Paused(string)": EventFragment;
    "RespectedGameTypeSet(uint32,uint64)": EventFragment;
    "Unpaused()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputeGameBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RespectedGameTypeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DisputeGameBlacklistedEventObject {
  game: string;
}
export type DisputeGameBlacklistedEvent = TypedEvent<
  [string],
  DisputeGameBlacklistedEventObject
>;

export type DisputeGameBlacklistedEventFilter =
  TypedEventFilter<DisputeGameBlacklistedEvent>;

export interface PausedEventObject {
  identifier: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RespectedGameTypeSetEventObject {
  gameType: number;
  updatedAt: BigNumber;
}
export type RespectedGameTypeSetEvent = TypedEvent<
  [number, BigNumber],
  RespectedGameTypeSetEventObject
>;

export type RespectedGameTypeSetEventFilter =
  TypedEventFilter<RespectedGameTypeSetEvent>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DeputyGuardianModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeputyGuardianModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `blacklistDisputeGame()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _game The `IDisputeGame` contract instance.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    blacklistDisputeGame(
      _portal: string,
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Getter function for the deputy guardian's address
     */
    deputyGuardian(
      overrides?: CallOverrides
    ): Promise<[string] & { deputyGuardian_: string }>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `pause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<[string] & { safe_: string }>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setAnchorState()` on the `AnchorStateRegistry` contract.      Only the deputy guardian can call this function.
     * @param _game The `IFaultDisputeGame` contract instance.
     * @param _registry The `AnchorStateRegistry` contract instance.
     */
    setAnchorState(
      _registry: string,
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setRespectedGameType()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _gameType The `GameType` to set as the respected game type.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    setRespectedGameType(
      _portal: string,
      _gameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Getter function for the SuperchainConfig's address
     */
    superchainConfig(
      overrides?: CallOverrides
    ): Promise<[string] & { superchainConfig_: string }>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `unpause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `blacklistDisputeGame()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
   * @param _game The `IDisputeGame` contract instance.
   * @param _portal The `OptimismPortal2` contract instance.
   */
  blacklistDisputeGame(
    _portal: string,
    _game: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Getter function for the deputy guardian's address
   */
  deputyGuardian(overrides?: CallOverrides): Promise<string>;

  /**
   * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `pause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
   */
  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Getter function for the Safe contract instance
   */
  safe(overrides?: CallOverrides): Promise<string>;

  /**
   * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setAnchorState()` on the `AnchorStateRegistry` contract.      Only the deputy guardian can call this function.
   * @param _game The `IFaultDisputeGame` contract instance.
   * @param _registry The `AnchorStateRegistry` contract instance.
   */
  setAnchorState(
    _registry: string,
    _game: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setRespectedGameType()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
   * @param _gameType The `GameType` to set as the respected game type.
   * @param _portal The `OptimismPortal2` contract instance.
   */
  setRespectedGameType(
    _portal: string,
    _gameType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Getter function for the SuperchainConfig's address
   */
  superchainConfig(overrides?: CallOverrides): Promise<string>;

  /**
   * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `unpause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
   */
  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `blacklistDisputeGame()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _game The `IDisputeGame` contract instance.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    blacklistDisputeGame(
      _portal: string,
      _game: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getter function for the deputy guardian's address
     */
    deputyGuardian(overrides?: CallOverrides): Promise<string>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `pause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    pause(overrides?: CallOverrides): Promise<void>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<string>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setAnchorState()` on the `AnchorStateRegistry` contract.      Only the deputy guardian can call this function.
     * @param _game The `IFaultDisputeGame` contract instance.
     * @param _registry The `AnchorStateRegistry` contract instance.
     */
    setAnchorState(
      _registry: string,
      _game: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setRespectedGameType()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _gameType The `GameType` to set as the respected game type.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    setRespectedGameType(
      _portal: string,
      _gameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getter function for the SuperchainConfig's address
     */
    superchainConfig(overrides?: CallOverrides): Promise<string>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `unpause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    unpause(overrides?: CallOverrides): Promise<void>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DisputeGameBlacklisted(address)"(
      game?: string | null
    ): DisputeGameBlacklistedEventFilter;
    DisputeGameBlacklisted(
      game?: string | null
    ): DisputeGameBlacklistedEventFilter;

    "Paused(string)"(identifier?: null): PausedEventFilter;
    Paused(identifier?: null): PausedEventFilter;

    "RespectedGameTypeSet(uint32,uint64)"(
      gameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;
    RespectedGameTypeSet(
      gameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `blacklistDisputeGame()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _game The `IDisputeGame` contract instance.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    blacklistDisputeGame(
      _portal: string,
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Getter function for the deputy guardian's address
     */
    deputyGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `pause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setAnchorState()` on the `AnchorStateRegistry` contract.      Only the deputy guardian can call this function.
     * @param _game The `IFaultDisputeGame` contract instance.
     * @param _registry The `AnchorStateRegistry` contract instance.
     */
    setAnchorState(
      _registry: string,
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setRespectedGameType()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _gameType The `GameType` to set as the respected game type.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    setRespectedGameType(
      _portal: string,
      _gameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Getter function for the SuperchainConfig's address
     */
    superchainConfig(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `unpause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `blacklistDisputeGame()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _game The `IDisputeGame` contract instance.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    blacklistDisputeGame(
      _portal: string,
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the deputy guardian's address
     */
    deputyGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `pause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setAnchorState()` on the `AnchorStateRegistry` contract.      Only the deputy guardian can call this function.
     * @param _game The `IFaultDisputeGame` contract instance.
     * @param _registry The `AnchorStateRegistry` contract instance.
     */
    setAnchorState(
      _registry: string,
      _game: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `setRespectedGameType()` on the `OptimismPortal2` contract.      Only the deputy guardian can call this function.
     * @param _gameType The `GameType` to set as the respected game type.
     * @param _portal The `OptimismPortal2` contract instance.
     */
    setRespectedGameType(
      _portal: string,
      _gameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the SuperchainConfig's address
     */
    superchainConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calls the Security Council Safe's `execTransactionFromModuleReturnData()`, with the arguments      necessary to call `unpause()` on the `SuperchainConfig` contract.      Only the deputy guardian can call this function.
     */
    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
