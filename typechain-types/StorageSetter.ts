/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace StorageSetter {
  export type SlotStruct = { key: BytesLike; value: BytesLike };

  export type SlotStructOutput = [string, string] & {
    key: string;
    value: string;
  };
}

export interface StorageSetterInterface extends utils.Interface {
  functions: {
    "getAddress(bytes32)": FunctionFragment;
    "getBool(bytes32)": FunctionFragment;
    "getBytes32(bytes32)": FunctionFragment;
    "getUint(bytes32)": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setBool(bytes32,bool)": FunctionFragment;
    "setBytes32((bytes32,bytes32)[])": FunctionFragment;
    "setBytes32(bytes32,bytes32)": FunctionFragment;
    "setUint(bytes32,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAddress"
      | "getBool"
      | "getBytes32"
      | "getUint"
      | "setAddress"
      | "setBool"
      | "setBytes32((bytes32,bytes32)[])"
      | "setBytes32(bytes32,bytes32)"
      | "setUint"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getBool", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getUint", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32((bytes32,bytes32)[])",
    values: [StorageSetter.SlotStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBytes32((bytes32,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBytes32(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface StorageSetter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StorageSetterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Retrieves an address value from `_slot`.
     */
    getAddress(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Retrieves a bool value from `_slot`.
     */
    getBool(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { value_: boolean }>;

    /**
     * Retrieves a bytes32 value from `_slot`.
     */
    getBytes32(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { value_: string }>;

    /**
     * Retrieves a uint256 value from `_slot`.
     */
    getUint(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value_: BigNumber }>;

    /**
     * Stores an address `_value` at `_slot`.
     */
    setAddress(
      _slot: BytesLike,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Stores a bool `_value` at `_slot`.
     */
    setBool(
      _slot: BytesLike,
      _value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "setBytes32((bytes32,bytes32)[])"(
      slots: StorageSetter.SlotStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Stores a bytes32 `_value` at `_slot`. Any storage slots that         are packed should be set through this interface.
     */
    "setBytes32(bytes32,bytes32)"(
      _slot: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Stores a uint256 `_value` at `_slot`.
     */
    setUint(
      _slot: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Retrieves an address value from `_slot`.
   */
  getAddress(_slot: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Retrieves a bool value from `_slot`.
   */
  getBool(_slot: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Retrieves a bytes32 value from `_slot`.
   */
  getBytes32(_slot: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Retrieves a uint256 value from `_slot`.
   */
  getUint(_slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Stores an address `_value` at `_slot`.
   */
  setAddress(
    _slot: BytesLike,
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Stores a bool `_value` at `_slot`.
   */
  setBool(
    _slot: BytesLike,
    _value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "setBytes32((bytes32,bytes32)[])"(
    slots: StorageSetter.SlotStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Stores a bytes32 `_value` at `_slot`. Any storage slots that         are packed should be set through this interface.
   */
  "setBytes32(bytes32,bytes32)"(
    _slot: BytesLike,
    _value: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Stores a uint256 `_value` at `_slot`.
   */
  setUint(
    _slot: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Retrieves an address value from `_slot`.
     */
    getAddress(_slot: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Retrieves a bool value from `_slot`.
     */
    getBool(_slot: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Retrieves a bytes32 value from `_slot`.
     */
    getBytes32(_slot: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Retrieves a uint256 value from `_slot`.
     */
    getUint(_slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores an address `_value` at `_slot`.
     */
    setAddress(
      _slot: BytesLike,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Stores a bool `_value` at `_slot`.
     */
    setBool(
      _slot: BytesLike,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBytes32((bytes32,bytes32)[])"(
      slots: StorageSetter.SlotStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Stores a bytes32 `_value` at `_slot`. Any storage slots that         are packed should be set through this interface.
     */
    "setBytes32(bytes32,bytes32)"(
      _slot: BytesLike,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Stores a uint256 `_value` at `_slot`.
     */
    setUint(
      _slot: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Retrieves an address value from `_slot`.
     */
    getAddress(_slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves a bool value from `_slot`.
     */
    getBool(_slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves a bytes32 value from `_slot`.
     */
    getBytes32(_slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves a uint256 value from `_slot`.
     */
    getUint(_slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Stores an address `_value` at `_slot`.
     */
    setAddress(
      _slot: BytesLike,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Stores a bool `_value` at `_slot`.
     */
    setBool(
      _slot: BytesLike,
      _value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "setBytes32((bytes32,bytes32)[])"(
      slots: StorageSetter.SlotStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Stores a bytes32 `_value` at `_slot`. Any storage slots that         are packed should be set through this interface.
     */
    "setBytes32(bytes32,bytes32)"(
      _slot: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Stores a uint256 `_value` at `_slot`.
     */
    setUint(
      _slot: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Retrieves an address value from `_slot`.
     */
    getAddress(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves a bool value from `_slot`.
     */
    getBool(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves a bytes32 value from `_slot`.
     */
    getBytes32(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves a uint256 value from `_slot`.
     */
    getUint(
      _slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Stores an address `_value` at `_slot`.
     */
    setAddress(
      _slot: BytesLike,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Stores a bool `_value` at `_slot`.
     */
    setBool(
      _slot: BytesLike,
      _value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "setBytes32((bytes32,bytes32)[])"(
      slots: StorageSetter.SlotStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Stores a bytes32 `_value` at `_slot`. Any storage slots that         are packed should be set through this interface.
     */
    "setBytes32(bytes32,bytes32)"(
      _slot: BytesLike,
      _value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Stores a uint256 `_value` at `_slot`.
     */
    setUint(
      _slot: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
