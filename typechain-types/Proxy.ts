/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProxyInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Gets the owner of the proxy contract.
     */
    admin(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _admin New owner of the proxy contract.
     */
    changeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     */
    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Set the implementation contract address. The code at the given address will execute         when this contract is called.
     * @param _implementation Address of the implementation contract.
     */
    upgradeTo(
      _implementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Set the implementation and call a function in a single transaction. Useful to ensure         atomic execution of initialization-based upgrades.
     * @param _data Calldata to delegatecall the new implementation with.
     * @param _implementation Address of the implementation contract.
     */
    upgradeToAndCall(
      _implementation: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Gets the owner of the proxy contract.
   */
  admin(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Changes the owner of the proxy contract. Only callable by the owner.
   * @param _admin New owner of the proxy contract.
   */
  changeAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   */
  implementation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Set the implementation contract address. The code at the given address will execute         when this contract is called.
   * @param _implementation Address of the implementation contract.
   */
  upgradeTo(
    _implementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Set the implementation and call a function in a single transaction. Useful to ensure         atomic execution of initialization-based upgrades.
   * @param _data Calldata to delegatecall the new implementation with.
   * @param _implementation Address of the implementation contract.
   */
  upgradeToAndCall(
    _implementation: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Gets the owner of the proxy contract.
     */
    admin(overrides?: CallOverrides): Promise<string>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _admin New owner of the proxy contract.
     */
    changeAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    /**
     */
    implementation(overrides?: CallOverrides): Promise<string>;

    /**
     * Set the implementation contract address. The code at the given address will execute         when this contract is called.
     * @param _implementation Address of the implementation contract.
     */
    upgradeTo(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set the implementation and call a function in a single transaction. Useful to ensure         atomic execution of initialization-based upgrades.
     * @param _data Calldata to delegatecall the new implementation with.
     * @param _implementation Address of the implementation contract.
     */
    upgradeToAndCall(
      _implementation: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    /**
     * Gets the owner of the proxy contract.
     */
    admin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _admin New owner of the proxy contract.
     */
    changeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     */
    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Set the implementation contract address. The code at the given address will execute         when this contract is called.
     * @param _implementation Address of the implementation contract.
     */
    upgradeTo(
      _implementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Set the implementation and call a function in a single transaction. Useful to ensure         atomic execution of initialization-based upgrades.
     * @param _data Calldata to delegatecall the new implementation with.
     * @param _implementation Address of the implementation contract.
     */
    upgradeToAndCall(
      _implementation: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the owner of the proxy contract.
     */
    admin(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Changes the owner of the proxy contract. Only callable by the owner.
     * @param _admin New owner of the proxy contract.
     */
    changeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     */
    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the implementation contract address. The code at the given address will execute         when this contract is called.
     * @param _implementation Address of the implementation contract.
     */
    upgradeTo(
      _implementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the implementation and call a function in a single transaction. Useful to ensure         atomic execution of initialization-based upgrades.
     * @param _data Calldata to delegatecall the new implementation with.
     * @param _implementation Address of the implementation contract.
     */
    upgradeToAndCall(
      _implementation: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
