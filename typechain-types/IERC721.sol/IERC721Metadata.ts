/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IERC721MetadataInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "isApprovedForAll"
      | "name"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  _owner: string;
  _approved: string;
  _tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  _owner: string;
  _operator: string;
  _approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferEventObject {
  _from: string;
  _to: string;
  _tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IERC721Metadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC721MetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.
     * Change or reaffirm the approved address for an NFT
     * @param _approved The new approved NFT controller
     * @param _tokenId The NFT to approve
     */
    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.
     * Count all NFTs assigned to an owner
     * @param _owner An address for whom to query the balance
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Throws if `_tokenId` is not a valid NFT.
     * Get the approved address for a single NFT
     * @param _tokenId The NFT to find the approved address for
     */
    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Query if an address is an authorized operator for another address
     * @param _operator The address that acts on behalf of the owner
     * @param _owner The address that owns the NFTs
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * A descriptive name for a collection of NFTs in this contract
     */
    name(overrides?: CallOverrides): Promise<[string] & { _name: string }>;

    /**
     * NFTs assigned to zero address are considered invalid, and queries about them do throw.
     * Find the owner of an NFT
     * @param _tokenId The identifier for an NFT
     */
    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * This works identically to the other function with an extra data parameter, except this function just sets data to "".
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     * @param data Additional data with no specified format, sent in call to `_to`
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s assets
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Interface identification is specified in ERC-165. This function uses less than 30,000 gas.
     * Query if a contract implements an interface
     * @param interfaceID The interface identifier, as specified in ERC-165
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * An abbreviated name for NFTs in this contract
     */
    symbol(overrides?: CallOverrides): Promise<[string] & { _symbol: string }>;

    /**
     * Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the "ERC721 Metadata JSON Schema".
     * A distinct Uniform Resource Identifier (URI) for a given asset.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.
     * Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.
   * Change or reaffirm the approved address for an NFT
   * @param _approved The new approved NFT controller
   * @param _tokenId The NFT to approve
   */
  approve(
    _approved: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.
   * Count all NFTs assigned to an owner
   * @param _owner An address for whom to query the balance
   */
  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Throws if `_tokenId` is not a valid NFT.
   * Get the approved address for a single NFT
   * @param _tokenId The NFT to find the approved address for
   */
  getApproved(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Query if an address is an authorized operator for another address
   * @param _operator The address that acts on behalf of the owner
   * @param _owner The address that owns the NFTs
   */
  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * A descriptive name for a collection of NFTs in this contract
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * NFTs assigned to zero address are considered invalid, and queries about them do throw.
   * Find the owner of an NFT
   * @param _tokenId The identifier for an NFT
   */
  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * This works identically to the other function with an extra data parameter, except this function just sets data to "".
   * Transfers the ownership of an NFT from one address to another address
   * @param _from The current owner of the NFT
   * @param _to The new owner
   * @param _tokenId The NFT to transfer
   */
  "safeTransferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
   * Transfers the ownership of an NFT from one address to another address
   * @param _from The current owner of the NFT
   * @param _to The new owner
   * @param _tokenId The NFT to transfer
   * @param data Additional data with no specified format, sent in call to `_to`
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.
   * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s assets
   * @param _approved True if the operator is approved, false to revoke approval
   * @param _operator Address to add to the set of authorized operators
   */
  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Interface identification is specified in ERC-165. This function uses less than 30,000 gas.
   * Query if a contract implements an interface
   * @param interfaceID The interface identifier, as specified in ERC-165
   */
  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * An abbreviated name for NFTs in this contract
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the "ERC721 Metadata JSON Schema".
   * A distinct Uniform Resource Identifier (URI) for a given asset.
   */
  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.
   * Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST
   * @param _from The current owner of the NFT
   * @param _to The new owner
   * @param _tokenId The NFT to transfer
   */
  transferFrom(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.
     * Change or reaffirm the approved address for an NFT
     * @param _approved The new approved NFT controller
     * @param _tokenId The NFT to approve
     */
    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.
     * Count all NFTs assigned to an owner
     * @param _owner An address for whom to query the balance
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Throws if `_tokenId` is not a valid NFT.
     * Get the approved address for a single NFT
     * @param _tokenId The NFT to find the approved address for
     */
    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Query if an address is an authorized operator for another address
     * @param _operator The address that acts on behalf of the owner
     * @param _owner The address that owns the NFTs
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * A descriptive name for a collection of NFTs in this contract
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * NFTs assigned to zero address are considered invalid, and queries about them do throw.
     * Find the owner of an NFT
     * @param _tokenId The identifier for an NFT
     */
    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * This works identically to the other function with an extra data parameter, except this function just sets data to "".
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     * @param data Additional data with no specified format, sent in call to `_to`
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s assets
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Interface identification is specified in ERC-165. This function uses less than 30,000 gas.
     * Query if a contract implements an interface
     * @param interfaceID The interface identifier, as specified in ERC-165
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * An abbreviated name for NFTs in this contract
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the "ERC721 Metadata JSON Schema".
     * A distinct Uniform Resource Identifier (URI) for a given asset.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.
     * Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    /**
     * The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.
     * Change or reaffirm the approved address for an NFT
     * @param _approved The new approved NFT controller
     * @param _tokenId The NFT to approve
     */
    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.
     * Count all NFTs assigned to an owner
     * @param _owner An address for whom to query the balance
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Throws if `_tokenId` is not a valid NFT.
     * Get the approved address for a single NFT
     * @param _tokenId The NFT to find the approved address for
     */
    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Query if an address is an authorized operator for another address
     * @param _operator The address that acts on behalf of the owner
     * @param _owner The address that owns the NFTs
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * A descriptive name for a collection of NFTs in this contract
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * NFTs assigned to zero address are considered invalid, and queries about them do throw.
     * Find the owner of an NFT
     * @param _tokenId The identifier for an NFT
     */
    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This works identically to the other function with an extra data parameter, except this function just sets data to "".
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     * @param data Additional data with no specified format, sent in call to `_to`
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s assets
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Interface identification is specified in ERC-165. This function uses less than 30,000 gas.
     * Query if a contract implements an interface
     * @param interfaceID The interface identifier, as specified in ERC-165
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * An abbreviated name for NFTs in this contract
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the "ERC721 Metadata JSON Schema".
     * A distinct Uniform Resource Identifier (URI) for a given asset.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.
     * Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.
     * Change or reaffirm the approved address for an NFT
     * @param _approved The new approved NFT controller
     * @param _tokenId The NFT to approve
     */
    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.
     * Count all NFTs assigned to an owner
     * @param _owner An address for whom to query the balance
     */
    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Throws if `_tokenId` is not a valid NFT.
     * Get the approved address for a single NFT
     * @param _tokenId The NFT to find the approved address for
     */
    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Query if an address is an authorized operator for another address
     * @param _operator The address that acts on behalf of the owner
     * @param _owner The address that owns the NFTs
     */
    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * A descriptive name for a collection of NFTs in this contract
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * NFTs assigned to zero address are considered invalid, and queries about them do throw.
     * Find the owner of an NFT
     * @param _tokenId The identifier for an NFT
     */
    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This works identically to the other function with an extra data parameter, except this function just sets data to "".
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
     * Transfers the ownership of an NFT from one address to another address
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     * @param data Additional data with no specified format, sent in call to `_to`
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Emits the ApprovalForAll event. The contract MUST allow multiple operators per owner.
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s assets
     * @param _approved True if the operator is approved, false to revoke approval
     * @param _operator Address to add to the set of authorized operators
     */
    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Interface identification is specified in ERC-165. This function uses less than 30,000 gas.
     * Query if a contract implements an interface
     * @param interfaceID The interface identifier, as specified in ERC-165
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * An abbreviated name for NFTs in this contract
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC 3986. The URI may point to a JSON file that conforms to the "ERC721 Metadata JSON Schema".
     * A distinct Uniform Resource Identifier (URI) for a given asset.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.
     * Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE THEY MAY BE PERMANENTLY LOST
     * @param _from The current owner of the NFT
     * @param _to The new owner
     * @param _tokenId The NFT to transfer
     */
    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
