/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LivenessGuardInterface extends utils.Interface {
  functions: {
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "lastLive(address)": FunctionFragment;
    "safe()": FunctionFragment;
    "showLiveness()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkAfterExecution"
      | "checkTransaction"
      | "lastLive"
      | "safe"
      | "showLiveness"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "lastLive", values: [string]): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "showLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "OwnerRecorded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerRecorded"): EventFragment;
}

export interface OwnerRecordedEventObject {
  owner: string;
}
export type OwnerRecordedEvent = TypedEvent<[string], OwnerRecordedEventObject>;

export type OwnerRecordedEventFilter = TypedEventFilter<OwnerRecordedEvent>;

export interface LivenessGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LivenessGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Called by the Safe contract after the execution of a transaction.      We use this post execution hook to compare the set of owners before and after.      If the set of owners has changed then we:      1. Add new owners to the lastLive mapping      2. Delete removed owners from the lastLive mapping
     * Update the lastLive mapping according to the set of owners before and after execution.
     */
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Called by the Safe contract before execution of a transaction.
     * Records the most recent time which any owner has signed a transaction.
     */
    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of the timestamp at which an owner last participated in signing a         an executed transaction, or called showLiveness.
     */
    lastLive(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<[string] & { safe_: string }>;

    /**
     * Enables an owner to demonstrate liveness by calling this method directly.         This is useful for owners who have not recently signed a transaction via the Safe.
     */
    showLiveness(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Called by the Safe contract after the execution of a transaction.      We use this post execution hook to compare the set of owners before and after.      If the set of owners has changed then we:      1. Add new owners to the lastLive mapping      2. Delete removed owners from the lastLive mapping
   * Update the lastLive mapping according to the set of owners before and after execution.
   */
  checkAfterExecution(
    arg0: BytesLike,
    arg1: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Called by the Safe contract before execution of a transaction.
   * Records the most recent time which any owner has signed a transaction.
   */
  checkTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    msgSender: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of the timestamp at which an owner last participated in signing a         an executed transaction, or called showLiveness.
   */
  lastLive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter function for the Safe contract instance
   */
  safe(overrides?: CallOverrides): Promise<string>;

  /**
   * Enables an owner to demonstrate liveness by calling this method directly.         This is useful for owners who have not recently signed a transaction via the Safe.
   */
  showLiveness(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Called by the Safe contract after the execution of a transaction.      We use this post execution hook to compare the set of owners before and after.      If the set of owners has changed then we:      1. Add new owners to the lastLive mapping      2. Delete removed owners from the lastLive mapping
     * Update the lastLive mapping according to the set of owners before and after execution.
     */
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by the Safe contract before execution of a transaction.
     * Records the most recent time which any owner has signed a transaction.
     */
    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A mapping of the timestamp at which an owner last participated in signing a         an executed transaction, or called showLiveness.
     */
    lastLive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<string>;

    /**
     * Enables an owner to demonstrate liveness by calling this method directly.         This is useful for owners who have not recently signed a transaction via the Safe.
     */
    showLiveness(overrides?: CallOverrides): Promise<void>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnerRecorded(address)"(owner?: null): OwnerRecordedEventFilter;
    OwnerRecorded(owner?: null): OwnerRecordedEventFilter;
  };

  estimateGas: {
    /**
     * Called by the Safe contract after the execution of a transaction.      We use this post execution hook to compare the set of owners before and after.      If the set of owners has changed then we:      1. Add new owners to the lastLive mapping      2. Delete removed owners from the lastLive mapping
     * Update the lastLive mapping according to the set of owners before and after execution.
     */
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Called by the Safe contract before execution of a transaction.
     * Records the most recent time which any owner has signed a transaction.
     */
    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A mapping of the timestamp at which an owner last participated in signing a         an executed transaction, or called showLiveness.
     */
    lastLive(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Enables an owner to demonstrate liveness by calling this method directly.         This is useful for owners who have not recently signed a transaction via the Safe.
     */
    showLiveness(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Called by the Safe contract after the execution of a transaction.      We use this post execution hook to compare the set of owners before and after.      If the set of owners has changed then we:      1. Add new owners to the lastLive mapping      2. Delete removed owners from the lastLive mapping
     * Update the lastLive mapping according to the set of owners before and after execution.
     */
    checkAfterExecution(
      arg0: BytesLike,
      arg1: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Called by the Safe contract before execution of a transaction.
     * Records the most recent time which any owner has signed a transaction.
     */
    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of the timestamp at which an owner last participated in signing a         an executed transaction, or called showLiveness.
     */
    lastLive(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the Safe contract instance
     */
    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Enables an owner to demonstrate liveness by calling this method directly.         This is useful for owners who have not recently signed a transaction via the Safe.
     */
    showLiveness(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
