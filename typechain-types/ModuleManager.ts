/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ModuleManagerInterface extends utils.Interface {
  functions: {
    "disableModule(address,address)": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "isModuleEnabled(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "disableModule"
      | "enableModule"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "getModulesPaginated"
      | "isModuleEnabled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;

  events: {
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
}

export interface DisabledModuleEventObject {
  module: string;
}
export type DisabledModuleEvent = TypedEvent<
  [string],
  DisabledModuleEventObject
>;

export type DisabledModuleEventFilter = TypedEventFilter<DisabledModuleEvent>;

export interface EnabledModuleEventObject {
  module: string;
}
export type EnabledModuleEvent = TypedEvent<[string], EnabledModuleEventObject>;

export type EnabledModuleEventFilter = TypedEventFilter<EnabledModuleEvent>;

export interface ExecutionFromModuleFailureEventObject {
  module: string;
}
export type ExecutionFromModuleFailureEvent = TypedEvent<
  [string],
  ExecutionFromModuleFailureEventObject
>;

export type ExecutionFromModuleFailureEventFilter =
  TypedEventFilter<ExecutionFromModuleFailureEvent>;

export interface ExecutionFromModuleSuccessEventObject {
  module: string;
}
export type ExecutionFromModuleSuccessEvent = TypedEvent<
  [string],
  ExecutionFromModuleSuccessEventObject
>;

export type ExecutionFromModuleSuccessEventFilter =
  TypedEventFilter<ExecutionFromModuleSuccessEvent>;

export interface ModuleManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ModuleManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
   * Disables the module `module` for the Safe.
   * @param module Module to be removed.
   * @param prevModule Module that pointed to the module to be removed in the linked list
   */
  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
   * Enables the module `module` for the Safe.
   * @param module Module to be whitelisted.
   */
  enableModule(
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations.
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows a Module to execute a Safe transaction without any further confirmations and return data
   * @param data Data payload of module transaction.
   * @param operation Operation type of module transaction.
   * @param to Destination address of module transaction.
   * @param value Ether value of module transaction.
   */
  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns array of modules.
   * @param pageSize Maximum number of modules that should be returned.
   * @param start Start of the page.
   */
  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  /**
   * Returns if an module is enabled
   */
  isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DisabledModule(address)"(module?: null): DisabledModuleEventFilter;
    DisabledModule(module?: null): DisabledModuleEventFilter;

    "EnabledModule(address)"(module?: null): EnabledModuleEventFilter;
    EnabledModule(module?: null): EnabledModuleEventFilter;

    "ExecutionFromModuleFailure(address)"(
      module?: string | null
    ): ExecutionFromModuleFailureEventFilter;
    ExecutionFromModuleFailure(
      module?: string | null
    ): ExecutionFromModuleFailureEventFilter;

    "ExecutionFromModuleSuccess(address)"(
      module?: string | null
    ): ExecutionFromModuleSuccessEventFilter;
    ExecutionFromModuleSuccess(
      module?: string | null
    ): ExecutionFromModuleSuccessEventFilter;
  };

  estimateGas: {
    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Allows to remove a module from the whitelist.      This can only be done via a Safe transaction.
     * Disables the module `module` for the Safe.
     * @param module Module to be removed.
     * @param prevModule Module that pointed to the module to be removed in the linked list
     */
    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows to add a module to the whitelist.      This can only be done via a Safe transaction.
     * Enables the module `module` for the Safe.
     * @param module Module to be whitelisted.
     */
    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations.
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a Module to execute a Safe transaction without any further confirmations and return data
     * @param data Data payload of module transaction.
     * @param operation Operation type of module transaction.
     * @param to Destination address of module transaction.
     * @param value Ether value of module transaction.
     */
    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns array of modules.
     * @param pageSize Maximum number of modules that should be returned.
     * @param start Start of the page.
     */
    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns if an module is enabled
     */
    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
