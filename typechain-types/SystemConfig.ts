/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ResourceMetering {
  export type ResourceConfigStruct = {
    maxResourceLimit: BigNumberish;
    elasticityMultiplier: BigNumberish;
    baseFeeMaxChangeDenominator: BigNumberish;
    minimumBaseFee: BigNumberish;
    systemTxMaxGas: BigNumberish;
    maximumBaseFee: BigNumberish;
  };

  export type ResourceConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber
  ] & {
    maxResourceLimit: number;
    elasticityMultiplier: number;
    baseFeeMaxChangeDenominator: number;
    minimumBaseFee: number;
    systemTxMaxGas: number;
    maximumBaseFee: BigNumber;
  };
}

export declare namespace SystemConfig {
  export type AddressesStruct = {
    l1CrossDomainMessenger: string;
    l1ERC721Bridge: string;
    l1StandardBridge: string;
    disputeGameFactory: string;
    optimismPortal: string;
    optimismMintableERC20Factory: string;
    gasPayingToken: string;
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    l1CrossDomainMessenger: string;
    l1ERC721Bridge: string;
    l1StandardBridge: string;
    disputeGameFactory: string;
    optimismPortal: string;
    optimismMintableERC20Factory: string;
    gasPayingToken: string;
  };
}

export interface SystemConfigInterface extends utils.Interface {
  functions: {
    "BATCH_INBOX_SLOT()": FunctionFragment;
    "DISPUTE_GAME_FACTORY_SLOT()": FunctionFragment;
    "L1_CROSS_DOMAIN_MESSENGER_SLOT()": FunctionFragment;
    "L1_ERC_721_BRIDGE_SLOT()": FunctionFragment;
    "L1_STANDARD_BRIDGE_SLOT()": FunctionFragment;
    "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT()": FunctionFragment;
    "OPTIMISM_PORTAL_SLOT()": FunctionFragment;
    "START_BLOCK_SLOT()": FunctionFragment;
    "UNSAFE_BLOCK_SIGNER_SLOT()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "basefeeScalar()": FunctionFragment;
    "batchInbox()": FunctionFragment;
    "batcherHash()": FunctionFragment;
    "blobbasefeeScalar()": FunctionFragment;
    "disputeGameFactory()": FunctionFragment;
    "gasLimit()": FunctionFragment;
    "gasPayingToken()": FunctionFragment;
    "gasPayingTokenName()": FunctionFragment;
    "gasPayingTokenSymbol()": FunctionFragment;
    "initialize(address,uint32,uint32,bytes32,uint64,address,(uint32,uint8,uint8,uint32,uint32,uint128),address,(address,address,address,address,address,address,address))": FunctionFragment;
    "isCustomGasToken()": FunctionFragment;
    "l1CrossDomainMessenger()": FunctionFragment;
    "l1ERC721Bridge()": FunctionFragment;
    "l1StandardBridge()": FunctionFragment;
    "maximumGasLimit()": FunctionFragment;
    "minimumGasLimit()": FunctionFragment;
    "optimismMintableERC20Factory()": FunctionFragment;
    "optimismPortal()": FunctionFragment;
    "overhead()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resourceConfig()": FunctionFragment;
    "scalar()": FunctionFragment;
    "setBatcherHash(bytes32)": FunctionFragment;
    "setGasConfig(uint256,uint256)": FunctionFragment;
    "setGasConfigEcotone(uint32,uint32)": FunctionFragment;
    "setGasLimit(uint64)": FunctionFragment;
    "setUnsafeBlockSigner(address)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsafeBlockSigner()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BATCH_INBOX_SLOT"
      | "DISPUTE_GAME_FACTORY_SLOT"
      | "L1_CROSS_DOMAIN_MESSENGER_SLOT"
      | "L1_ERC_721_BRIDGE_SLOT"
      | "L1_STANDARD_BRIDGE_SLOT"
      | "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT"
      | "OPTIMISM_PORTAL_SLOT"
      | "START_BLOCK_SLOT"
      | "UNSAFE_BLOCK_SIGNER_SLOT"
      | "VERSION"
      | "basefeeScalar"
      | "batchInbox"
      | "batcherHash"
      | "blobbasefeeScalar"
      | "disputeGameFactory"
      | "gasLimit"
      | "gasPayingToken"
      | "gasPayingTokenName"
      | "gasPayingTokenSymbol"
      | "initialize"
      | "isCustomGasToken"
      | "l1CrossDomainMessenger"
      | "l1ERC721Bridge"
      | "l1StandardBridge"
      | "maximumGasLimit"
      | "minimumGasLimit"
      | "optimismMintableERC20Factory"
      | "optimismPortal"
      | "overhead"
      | "owner"
      | "renounceOwnership"
      | "resourceConfig"
      | "scalar"
      | "setBatcherHash"
      | "setGasConfig"
      | "setGasConfigEcotone"
      | "setGasLimit"
      | "setUnsafeBlockSigner"
      | "startBlock"
      | "transferOwnership"
      | "unsafeBlockSigner"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BATCH_INBOX_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISPUTE_GAME_FACTORY_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L1_CROSS_DOMAIN_MESSENGER_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L1_ERC_721_BRIDGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L1_STANDARD_BRIDGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMISM_PORTAL_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_BLOCK_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSAFE_BLOCK_SIGNER_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "basefeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchInbox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batcherHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blobbasefeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasPayingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasPayingTokenName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasPayingTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      ResourceMetering.ResourceConfigStruct,
      string,
      SystemConfig.AddressesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isCustomGasToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1CrossDomainMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1ERC721Bridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1StandardBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismMintableERC20Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismPortal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "overhead", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scalar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBatcherHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasConfigEcotone",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnsafeBlockSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeBlockSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BATCH_INBOX_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISPUTE_GAME_FACTORY_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L1_CROSS_DOMAIN_MESSENGER_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L1_ERC_721_BRIDGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L1_STANDARD_BRIDGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMISM_PORTAL_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_BLOCK_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSAFE_BLOCK_SIGNER_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basefeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchInbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batcherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blobbasefeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasPayingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPayingTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPayingTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCustomGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ERC721Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1StandardBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismMintableERC20Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "overhead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scalar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBatcherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasConfigEcotone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnsafeBlockSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeBlockSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ConfigUpdate(uint256,uint8,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ConfigUpdateEventObject {
  version: BigNumber;
  updateType: number;
  data: string;
}
export type ConfigUpdateEvent = TypedEvent<
  [BigNumber, number, string],
  ConfigUpdateEventObject
>;

export type ConfigUpdateEventFilter = TypedEventFilter<ConfigUpdateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SystemConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SystemConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Storage slot that the batch inbox address is stored at.
     */
    BATCH_INBOX_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Storage slot for the DisputeGameFactory address.
     */
    DISPUTE_GAME_FACTORY_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Storage slot that the L1CrossDomainMessenger address is stored at.
     */
    L1_CROSS_DOMAIN_MESSENGER_SLOT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Storage slot that the L1ERC721Bridge address is stored at.
     */
    L1_ERC_721_BRIDGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Storage slot that the L1StandardBridge address is stored at.
     */
    L1_STANDARD_BRIDGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Storage slot that the OptimismMintableERC20Factory address is stored at.
     */
    OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Storage slot that the OptimismPortal address is stored at.
     */
    OPTIMISM_PORTAL_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Storage slot for block at which the op-node can start searching for logs from.
     */
    START_BLOCK_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Basefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    basefeeScalar(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Getter for the BatchInbox address.
     */
    batchInbox(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Blobbasefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    blobbasefeeScalar(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Getter for the DisputeGameFactory address.
     */
    disputeGameFactory(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the gas paying asset address.
     */
    gasPayingToken(
      overrides?: CallOverrides
    ): Promise<[string, number] & { addr_: string; decimals_: number }>;

    /**
     * Getter for the gas paying token name.
     */
    gasPayingTokenName(
      overrides?: CallOverrides
    ): Promise<[string] & { name_: string }>;

    /**
     * Getter for the gas paying token symbol.
     */
    gasPayingTokenSymbol(
      overrides?: CallOverrides
    ): Promise<[string] & { symbol_: string }>;

    initialize(
      _owner: string,
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      _batchInbox: string,
      _addresses: SystemConfig.AddressesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Getter for custom gas token paying networks. Returns true if the         network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Getter for the L1CrossDomainMessenger address.
     */
    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Getter for the L1ERC721Bridge address.
     */
    l1ERC721Bridge(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Getter for the L1StandardBridge address.
     */
    l1StandardBridge(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Returns the maximum L2 gas limit that can be safely set for the system to         operate. This bound is used to prevent the gas limit from being set too high         and causing the system to be unable to process and/or prove L2 blocks.
     */
    maximumGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the OptimismMintableERC20Factory address.
     */
    optimismMintableERC20Factory(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Getter for the OptimismPortal address.
     */
    optimismPortal(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.         Deprecated since the Ecotone network upgrade
     */
    overhead(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(
      overrides?: CallOverrides
    ): Promise<[ResourceMetering.ResourceConfigStructOutput]>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.         The most significant byte is used to determine the version since the         Ecotone network upgrade.
     */
    scalar(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates gas config. Can only be called by the owner.         Deprecated in favor of setGasConfigEcotone since the Ecotone upgrade.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates gas config as of the Ecotone upgrade. Can only be called by the owner.
     * @param _basefeeScalar New basefeeScalar value.
     * @param _blobbasefeeScalar New blobbasefeeScalar value.
     */
    setGasConfigEcotone(
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Getter for the StartBlock number.
     */
    startBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { startBlock_: BigNumber }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Storage slot that the batch inbox address is stored at.
   */
  BATCH_INBOX_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot for the DisputeGameFactory address.
   */
  DISPUTE_GAME_FACTORY_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot that the L1CrossDomainMessenger address is stored at.
   */
  L1_CROSS_DOMAIN_MESSENGER_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot that the L1ERC721Bridge address is stored at.
   */
  L1_ERC_721_BRIDGE_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot that the L1StandardBridge address is stored at.
   */
  L1_STANDARD_BRIDGE_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot that the OptimismMintableERC20Factory address is stored at.
   */
  OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT(
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Storage slot that the OptimismPortal address is stored at.
   */
  OPTIMISM_PORTAL_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot for block at which the op-node can start searching for logs from.
   */
  START_BLOCK_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
   */
  UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Version identifier, used for upgrades.
   */
  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Basefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
   */
  basefeeScalar(overrides?: CallOverrides): Promise<number>;

  /**
   * Getter for the BatchInbox address.
   */
  batchInbox(overrides?: CallOverrides): Promise<string>;

  /**
   * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
   */
  batcherHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Blobbasefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
   */
  blobbasefeeScalar(overrides?: CallOverrides): Promise<number>;

  /**
   * Getter for the DisputeGameFactory address.
   */
  disputeGameFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * L2 block gas limit.
   */
  gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the gas paying asset address.
   */
  gasPayingToken(
    overrides?: CallOverrides
  ): Promise<[string, number] & { addr_: string; decimals_: number }>;

  /**
   * Getter for the gas paying token name.
   */
  gasPayingTokenName(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the gas paying token symbol.
   */
  gasPayingTokenSymbol(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: string,
    _basefeeScalar: BigNumberish,
    _blobbasefeeScalar: BigNumberish,
    _batcherHash: BytesLike,
    _gasLimit: BigNumberish,
    _unsafeBlockSigner: string,
    _config: ResourceMetering.ResourceConfigStruct,
    _batchInbox: string,
    _addresses: SystemConfig.AddressesStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Getter for custom gas token paying networks. Returns true if the         network uses a custom gas token.
   */
  isCustomGasToken(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Getter for the L1CrossDomainMessenger address.
   */
  l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the L1ERC721Bridge address.
   */
  l1ERC721Bridge(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the L1StandardBridge address.
   */
  l1StandardBridge(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the maximum L2 gas limit that can be safely set for the system to         operate. This bound is used to prevent the gas limit from being set too high         and causing the system to be unable to process and/or prove L2 blocks.
   */
  maximumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
   */
  minimumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the OptimismMintableERC20Factory address.
   */
  optimismMintableERC20Factory(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the OptimismPortal address.
   */
  optimismPortal(overrides?: CallOverrides): Promise<string>;

  /**
   * Fixed L2 gas overhead. Used as part of the L2 fee calculation.         Deprecated since the Ecotone network upgrade
   */
  overhead(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
   */
  resourceConfig(
    overrides?: CallOverrides
  ): Promise<ResourceMetering.ResourceConfigStructOutput>;

  /**
   * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.         The most significant byte is used to determine the version since the         Ecotone network upgrade.
   */
  scalar(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Updates the batcher hash. Can only be called by the owner.
   * @param _batcherHash New batcher hash.
   */
  setBatcherHash(
    _batcherHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates gas config. Can only be called by the owner.         Deprecated in favor of setGasConfigEcotone since the Ecotone upgrade.
   * @param _overhead New overhead value.
   * @param _scalar New scalar value.
   */
  setGasConfig(
    _overhead: BigNumberish,
    _scalar: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates gas config as of the Ecotone upgrade. Can only be called by the owner.
   * @param _basefeeScalar New basefeeScalar value.
   * @param _blobbasefeeScalar New blobbasefeeScalar value.
   */
  setGasConfigEcotone(
    _basefeeScalar: BigNumberish,
    _blobbasefeeScalar: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates the L2 gas limit. Can only be called by the owner.
   * @param _gasLimit New gas limit.
   */
  setGasLimit(
    _gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates the unsafe block signer address. Can only be called by the owner.
   * @param _unsafeBlockSigner New unsafe block signer address.
   */
  setUnsafeBlockSigner(
    _unsafeBlockSigner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Getter for the StartBlock number.
   */
  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
   */
  unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Storage slot that the batch inbox address is stored at.
     */
    BATCH_INBOX_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot for the DisputeGameFactory address.
     */
    DISPUTE_GAME_FACTORY_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot that the L1CrossDomainMessenger address is stored at.
     */
    L1_CROSS_DOMAIN_MESSENGER_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot that the L1ERC721Bridge address is stored at.
     */
    L1_ERC_721_BRIDGE_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot that the L1StandardBridge address is stored at.
     */
    L1_STANDARD_BRIDGE_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot that the OptimismMintableERC20Factory address is stored at.
     */
    OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Storage slot that the OptimismPortal address is stored at.
     */
    OPTIMISM_PORTAL_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot for block at which the op-node can start searching for logs from.
     */
    START_BLOCK_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Basefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    basefeeScalar(overrides?: CallOverrides): Promise<number>;

    /**
     * Getter for the BatchInbox address.
     */
    batchInbox(overrides?: CallOverrides): Promise<string>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Blobbasefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    blobbasefeeScalar(overrides?: CallOverrides): Promise<number>;

    /**
     * Getter for the DisputeGameFactory address.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the gas paying asset address.
     */
    gasPayingToken(
      overrides?: CallOverrides
    ): Promise<[string, number] & { addr_: string; decimals_: number }>;

    /**
     * Getter for the gas paying token name.
     */
    gasPayingTokenName(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the gas paying token symbol.
     */
    gasPayingTokenSymbol(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: string,
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      _batchInbox: string,
      _addresses: SystemConfig.AddressesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getter for custom gas token paying networks. Returns true if the         network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Getter for the L1CrossDomainMessenger address.
     */
    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the L1ERC721Bridge address.
     */
    l1ERC721Bridge(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the L1StandardBridge address.
     */
    l1StandardBridge(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the maximum L2 gas limit that can be safely set for the system to         operate. This bound is used to prevent the gas limit from being set too high         and causing the system to be unable to process and/or prove L2 blocks.
     */
    maximumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the OptimismMintableERC20Factory address.
     */
    optimismMintableERC20Factory(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the OptimismPortal address.
     */
    optimismPortal(overrides?: CallOverrides): Promise<string>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.         Deprecated since the Ecotone network upgrade
     */
    overhead(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(
      overrides?: CallOverrides
    ): Promise<ResourceMetering.ResourceConfigStructOutput>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.         The most significant byte is used to determine the version since the         Ecotone network upgrade.
     */
    scalar(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates gas config. Can only be called by the owner.         Deprecated in favor of setGasConfigEcotone since the Ecotone upgrade.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates gas config as of the Ecotone upgrade. Can only be called by the owner.
     * @param _basefeeScalar New basefeeScalar value.
     * @param _blobbasefeeScalar New blobbasefeeScalar value.
     */
    setGasConfigEcotone(
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Getter for the StartBlock number.
     */
    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ConfigUpdate(uint256,uint8,bytes)"(
      version?: BigNumberish | null,
      updateType?: BigNumberish | null,
      data?: null
    ): ConfigUpdateEventFilter;
    ConfigUpdate(
      version?: BigNumberish | null,
      updateType?: BigNumberish | null,
      data?: null
    ): ConfigUpdateEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    /**
     * Storage slot that the batch inbox address is stored at.
     */
    BATCH_INBOX_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Storage slot for the DisputeGameFactory address.
     */
    DISPUTE_GAME_FACTORY_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Storage slot that the L1CrossDomainMessenger address is stored at.
     */
    L1_CROSS_DOMAIN_MESSENGER_SLOT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Storage slot that the L1ERC721Bridge address is stored at.
     */
    L1_ERC_721_BRIDGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Storage slot that the L1StandardBridge address is stored at.
     */
    L1_STANDARD_BRIDGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Storage slot that the OptimismMintableERC20Factory address is stored at.
     */
    OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Storage slot that the OptimismPortal address is stored at.
     */
    OPTIMISM_PORTAL_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Storage slot for block at which the op-node can start searching for logs from.
     */
    START_BLOCK_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Basefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    basefeeScalar(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the BatchInbox address.
     */
    batchInbox(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Blobbasefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    blobbasefeeScalar(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the DisputeGameFactory address.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the gas paying asset address.
     */
    gasPayingToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the gas paying token name.
     */
    gasPayingTokenName(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the gas paying token symbol.
     */
    gasPayingTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      _batchInbox: string,
      _addresses: SystemConfig.AddressesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Getter for custom gas token paying networks. Returns true if the         network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the L1CrossDomainMessenger address.
     */
    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the L1ERC721Bridge address.
     */
    l1ERC721Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the L1StandardBridge address.
     */
    l1StandardBridge(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the maximum L2 gas limit that can be safely set for the system to         operate. This bound is used to prevent the gas limit from being set too high         and causing the system to be unable to process and/or prove L2 blocks.
     */
    maximumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the OptimismMintableERC20Factory address.
     */
    optimismMintableERC20Factory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the OptimismPortal address.
     */
    optimismPortal(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.         Deprecated since the Ecotone network upgrade
     */
    overhead(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.         The most significant byte is used to determine the version since the         Ecotone network upgrade.
     */
    scalar(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates gas config. Can only be called by the owner.         Deprecated in favor of setGasConfigEcotone since the Ecotone upgrade.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates gas config as of the Ecotone upgrade. Can only be called by the owner.
     * @param _basefeeScalar New basefeeScalar value.
     * @param _blobbasefeeScalar New blobbasefeeScalar value.
     */
    setGasConfigEcotone(
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Getter for the StartBlock number.
     */
    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Storage slot that the batch inbox address is stored at.
     */
    BATCH_INBOX_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Storage slot for the DisputeGameFactory address.
     */
    DISPUTE_GAME_FACTORY_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Storage slot that the L1CrossDomainMessenger address is stored at.
     */
    L1_CROSS_DOMAIN_MESSENGER_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Storage slot that the L1ERC721Bridge address is stored at.
     */
    L1_ERC_721_BRIDGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Storage slot that the L1StandardBridge address is stored at.
     */
    L1_STANDARD_BRIDGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Storage slot that the OptimismMintableERC20Factory address is stored at.
     */
    OPTIMISM_MINTABLE_ERC20_FACTORY_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Storage slot that the OptimismPortal address is stored at.
     */
    OPTIMISM_PORTAL_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Storage slot for block at which the op-node can start searching for logs from.
     */
    START_BLOCK_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Basefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    basefeeScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the BatchInbox address.
     */
    batchInbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Blobbasefee scalar value. Part of the L2 fee calculation since the Ecotone network upgrade.
     */
    blobbasefeeScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the DisputeGameFactory address.
     */
    disputeGameFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the gas paying asset address.
     */
    gasPayingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the gas paying token name.
     */
    gasPayingTokenName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the gas paying token symbol.
     */
    gasPayingTokenSymbol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      _batchInbox: string,
      _addresses: SystemConfig.AddressesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for custom gas token paying networks. Returns true if the         network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the L1CrossDomainMessenger address.
     */
    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the L1ERC721Bridge address.
     */
    l1ERC721Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the L1StandardBridge address.
     */
    l1StandardBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the maximum L2 gas limit that can be safely set for the system to         operate. This bound is used to prevent the gas limit from being set too high         and causing the system to be unable to process and/or prove L2 blocks.
     */
    maximumGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the OptimismMintableERC20Factory address.
     */
    optimismMintableERC20Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the OptimismPortal address.
     */
    optimismPortal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.         Deprecated since the Ecotone network upgrade
     */
    overhead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.         The most significant byte is used to determine the version since the         Ecotone network upgrade.
     */
    scalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates gas config. Can only be called by the owner.         Deprecated in favor of setGasConfigEcotone since the Ecotone upgrade.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates gas config as of the Ecotone upgrade. Can only be called by the owner.
     * @param _basefeeScalar New basefeeScalar value.
     * @param _blobbasefeeScalar New blobbasefeeScalar value.
     */
    setGasConfigEcotone(
      _basefeeScalar: BigNumberish,
      _blobbasefeeScalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the StartBlock number.
     */
    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
