/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DelayedVetoableInterface extends utils.Interface {
  functions: {
    "delay()": FunctionFragment;
    "initiator()": FunctionFragment;
    "queuedAt(bytes32)": FunctionFragment;
    "target()": FunctionFragment;
    "version()": FunctionFragment;
    "vetoer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "delay"
      | "initiator"
      | "queuedAt"
      | "target"
      | "version"
      | "vetoer"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(functionFragment: "initiator", values?: undefined): string;
  encodeFunctionData(functionFragment: "queuedAt", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "vetoer", values?: undefined): string;

  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initiator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queuedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vetoer", data: BytesLike): Result;

  events: {
    "DelayActivated(uint256)": EventFragment;
    "Forwarded(bytes32,bytes)": EventFragment;
    "Initiated(bytes32,bytes)": EventFragment;
    "Vetoed(bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelayActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Forwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vetoed"): EventFragment;
}

export interface DelayActivatedEventObject {
  delay: BigNumber;
}
export type DelayActivatedEvent = TypedEvent<
  [BigNumber],
  DelayActivatedEventObject
>;

export type DelayActivatedEventFilter = TypedEventFilter<DelayActivatedEvent>;

export interface ForwardedEventObject {
  callHash: string;
  data: string;
}
export type ForwardedEvent = TypedEvent<[string, string], ForwardedEventObject>;

export type ForwardedEventFilter = TypedEventFilter<ForwardedEvent>;

export interface InitiatedEventObject {
  callHash: string;
  data: string;
}
export type InitiatedEvent = TypedEvent<[string, string], InitiatedEventObject>;

export type InitiatedEventFilter = TypedEventFilter<InitiatedEvent>;

export interface VetoedEventObject {
  callHash: string;
  data: string;
}
export type VetoedEvent = TypedEvent<[string, string], VetoedEventObject>;

export type VetoedEventFilter = TypedEventFilter<VetoedEvent>;

export interface DelayedVetoable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelayedVetoableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Gets the delay
     */
    delay(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Gets the initiator
     */
    initiator(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Gets entries in the _queuedAt mapping.
     * @param callHash The hash of the call data.
     */
    queuedAt(
      callHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     */
    target(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;

    /**
     */
    vetoer(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Gets the delay
   */
  delay(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Gets the initiator
   */
  initiator(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Gets entries in the _queuedAt mapping.
   * @param callHash The hash of the call data.
   */
  queuedAt(
    callHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   */
  target(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  /**
   */
  vetoer(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Gets the delay
     */
    delay(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the initiator
     */
    initiator(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets entries in the _queuedAt mapping.
     * @param callHash The hash of the call data.
     */
    queuedAt(
      callHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     */
    target(overrides?: CallOverrides): Promise<string>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;

    /**
     */
    vetoer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DelayActivated(uint256)"(delay?: null): DelayActivatedEventFilter;
    DelayActivated(delay?: null): DelayActivatedEventFilter;

    "Forwarded(bytes32,bytes)"(
      callHash?: BytesLike | null,
      data?: null
    ): ForwardedEventFilter;
    Forwarded(callHash?: BytesLike | null, data?: null): ForwardedEventFilter;

    "Initiated(bytes32,bytes)"(
      callHash?: BytesLike | null,
      data?: null
    ): InitiatedEventFilter;
    Initiated(callHash?: BytesLike | null, data?: null): InitiatedEventFilter;

    "Vetoed(bytes32,bytes)"(
      callHash?: BytesLike | null,
      data?: null
    ): VetoedEventFilter;
    Vetoed(callHash?: BytesLike | null, data?: null): VetoedEventFilter;
  };

  estimateGas: {
    /**
     * Gets the delay
     */
    delay(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Gets the initiator
     */
    initiator(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Gets entries in the _queuedAt mapping.
     * @param callHash The hash of the call data.
     */
    queuedAt(
      callHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     */
    target(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     */
    vetoer(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the delay
     */
    delay(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the initiator
     */
    initiator(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets entries in the _queuedAt mapping.
     * @param callHash The hash of the call data.
     */
    queuedAt(
      callHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     */
    target(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     */
    vetoer(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
