/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OptimismMintableERC20FactoryInterface extends utils.Interface {
  functions: {
    "BRIDGE()": FunctionFragment;
    "bridge()": FunctionFragment;
    "createOptimismMintableERC20(bytes32,string,string)": FunctionFragment;
    "createOptimismMintableERC20WithDecimals(bytes32,string,string,uint8)": FunctionFragment;
    "deployments(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGE"
      | "bridge"
      | "createOptimismMintableERC20"
      | "createOptimismMintableERC20WithDecimals"
      | "deployments"
      | "initialize"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BRIDGE", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOptimismMintableERC20",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createOptimismMintableERC20WithDecimals",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployments", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BRIDGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOptimismMintableERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOptimismMintableERC20WithDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OptimismMintableERC20Created(address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OptimismMintableERC20Created"
  ): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OptimismMintableERC20CreatedEventObject {
  localToken: string;
  remoteToken: string;
  deployer: string;
}
export type OptimismMintableERC20CreatedEvent = TypedEvent<
  [string, string, string],
  OptimismMintableERC20CreatedEventObject
>;

export type OptimismMintableERC20CreatedEventFilter =
  TypedEventFilter<OptimismMintableERC20CreatedEvent>;

export interface OptimismMintableERC20Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimismMintableERC20FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Getter function for the address of the StandardBridge on this chain.         Public getter is legacy and will be removed in the future. Use `bridge` instead.
     */
    BRIDGE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Address of the StandardBridge on this chain.
     */
    bridge(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract.
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract, with specified decimals.
     * @param _decimals ERC20 decimals
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20WithDecimals(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Mapping of local token address to remote token address.         This is used to keep track of the token deployments.
     */
    deployments(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Initializes the contract.
     * @param _bridge Address of the StandardBridge on this chain.
     */
    initialize(
      _bridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * The semver MUST be bumped any time that there is a change in         the OptimismMintableERC20 token contract since this contract         is responsible for deploying OptimismMintableERC20 contracts.Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Getter function for the address of the StandardBridge on this chain.         Public getter is legacy and will be removed in the future. Use `bridge` instead.
   */
  BRIDGE(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of the StandardBridge on this chain.
   */
  bridge(overrides?: CallOverrides): Promise<string>;

  /**
   * Creates an instance of the OptimismMintableERC20 contract.
   * @param _name ERC20 name.
   * @param _remoteToken Address of the token on the remote chain.
   * @param _symbol ERC20 symbol.
   */
  createOptimismMintableERC20(
    _remoteToken: BytesLike,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Creates an instance of the OptimismMintableERC20 contract, with specified decimals.
   * @param _decimals ERC20 decimals
   * @param _name ERC20 name.
   * @param _remoteToken Address of the token on the remote chain.
   * @param _symbol ERC20 symbol.
   */
  createOptimismMintableERC20WithDecimals(
    _remoteToken: BytesLike,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Mapping of local token address to remote token address.         This is used to keep track of the token deployments.
   */
  deployments(arg0: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Initializes the contract.
   * @param _bridge Address of the StandardBridge on this chain.
   */
  initialize(
    _bridge: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * The semver MUST be bumped any time that there is a change in         the OptimismMintableERC20 token contract since this contract         is responsible for deploying OptimismMintableERC20 contracts.Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Getter function for the address of the StandardBridge on this chain.         Public getter is legacy and will be removed in the future. Use `bridge` instead.
     */
    BRIDGE(overrides?: CallOverrides): Promise<string>;

    /**
     * Address of the StandardBridge on this chain.
     */
    bridge(overrides?: CallOverrides): Promise<string>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract.
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract, with specified decimals.
     * @param _decimals ERC20 decimals
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20WithDecimals(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Mapping of local token address to remote token address.         This is used to keep track of the token deployments.
     */
    deployments(arg0: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Initializes the contract.
     * @param _bridge Address of the StandardBridge on this chain.
     */
    initialize(_bridge: string, overrides?: CallOverrides): Promise<void>;

    /**
     * The semver MUST be bumped any time that there is a change in         the OptimismMintableERC20 token contract since this contract         is responsible for deploying OptimismMintableERC20 contracts.Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OptimismMintableERC20Created(address,bytes32,address)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      deployer?: null
    ): OptimismMintableERC20CreatedEventFilter;
    OptimismMintableERC20Created(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      deployer?: null
    ): OptimismMintableERC20CreatedEventFilter;
  };

  estimateGas: {
    /**
     * Getter function for the address of the StandardBridge on this chain.         Public getter is legacy and will be removed in the future. Use `bridge` instead.
     */
    BRIDGE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address of the StandardBridge on this chain.
     */
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract.
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract, with specified decimals.
     * @param _decimals ERC20 decimals
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20WithDecimals(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Mapping of local token address to remote token address.         This is used to keep track of the token deployments.
     */
    deployments(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Initializes the contract.
     * @param _bridge Address of the StandardBridge on this chain.
     */
    initialize(
      _bridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * The semver MUST be bumped any time that there is a change in         the OptimismMintableERC20 token contract since this contract         is responsible for deploying OptimismMintableERC20 contracts.Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Getter function for the address of the StandardBridge on this chain.         Public getter is legacy and will be removed in the future. Use `bridge` instead.
     */
    BRIDGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Address of the StandardBridge on this chain.
     */
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract.
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Creates an instance of the OptimismMintableERC20 contract, with specified decimals.
     * @param _decimals ERC20 decimals
     * @param _name ERC20 name.
     * @param _remoteToken Address of the token on the remote chain.
     * @param _symbol ERC20 symbol.
     */
    createOptimismMintableERC20WithDecimals(
      _remoteToken: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Mapping of local token address to remote token address.         This is used to keep track of the token deployments.
     */
    deployments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Initializes the contract.
     * @param _bridge Address of the StandardBridge on this chain.
     */
    initialize(
      _bridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * The semver MUST be bumped any time that there is a change in         the OptimismMintableERC20 token contract since this contract         is responsible for deploying OptimismMintableERC20 contracts.Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
