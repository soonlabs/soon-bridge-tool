/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TransferOnion {
  export type LayerStruct = {
    recipient: string;
    amount: BigNumberish;
    shell: BytesLike;
  };

  export type LayerStructOutput = [string, BigNumber, string] & {
    recipient: string;
    amount: BigNumber;
    shell: string;
  };
}

export interface TransferOnionInterface extends utils.Interface {
  functions: {
    "SENDER()": FunctionFragment;
    "TOKEN()": FunctionFragment;
    "peel((address,uint256,bytes32)[])": FunctionFragment;
    "shell()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "SENDER" | "TOKEN" | "peel" | "shell"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "SENDER", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "peel",
    values: [TransferOnion.LayerStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "shell", values?: undefined): string;

  decodeFunctionResult(functionFragment: "SENDER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shell", data: BytesLike): Result;

  events: {};
}

export interface TransferOnion extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransferOnionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Address of the account to distribute tokens from.
     */
    SENDER(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Address of the token to distribute.
     */
    TOKEN(overrides?: CallOverrides): Promise<[string]>;

    peel(
      _layers: TransferOnion.LayerStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Current shell hash.
     */
    shell(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Address of the account to distribute tokens from.
   */
  SENDER(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of the token to distribute.
   */
  TOKEN(overrides?: CallOverrides): Promise<string>;

  peel(
    _layers: TransferOnion.LayerStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Current shell hash.
   */
  shell(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Address of the account to distribute tokens from.
     */
    SENDER(overrides?: CallOverrides): Promise<string>;

    /**
     * Address of the token to distribute.
     */
    TOKEN(overrides?: CallOverrides): Promise<string>;

    peel(
      _layers: TransferOnion.LayerStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Current shell hash.
     */
    shell(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Address of the account to distribute tokens from.
     */
    SENDER(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address of the token to distribute.
     */
    TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    peel(
      _layers: TransferOnion.LayerStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Current shell hash.
     */
    shell(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Address of the account to distribute tokens from.
     */
    SENDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Address of the token to distribute.
     */
    TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peel(
      _layers: TransferOnion.LayerStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Current shell hash.
     */
    shell(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
