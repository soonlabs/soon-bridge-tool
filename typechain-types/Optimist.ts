/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OptimistInterface extends utils.Interface {
  functions: {
    "ATTESTATION_STATION()": FunctionFragment;
    "BASE_URI_ATTESTATION_KEY()": FunctionFragment;
    "BASE_URI_ATTESTOR()": FunctionFragment;
    "OPTIMIST_ALLOWLIST()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "initialize(string,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isOnAllowList(address)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdOfAddress(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ATTESTATION_STATION"
      | "BASE_URI_ATTESTATION_KEY"
      | "BASE_URI_ATTESTOR"
      | "OPTIMIST_ALLOWLIST"
      | "approve"
      | "balanceOf"
      | "baseURI"
      | "burn"
      | "getApproved"
      | "initialize"
      | "isApprovedForAll"
      | "isOnAllowList"
      | "mint"
      | "name"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenIdOfAddress"
      | "tokenURI"
      | "transferFrom"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ATTESTATION_STATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_URI_ATTESTATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_URI_ATTESTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMIST_ALLOWLIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnAllowList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdOfAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ATTESTATION_STATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_URI_ATTESTATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_URI_ATTESTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMIST_ALLOWLIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOnAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdOfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Optimist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Attestation key used by the attestor to attest the baseURI.
     */
    BASE_URI_ATTESTATION_KEY(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Attestor who attests to baseURI.
     */
    BASE_URI_ATTESTOR(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Address of the OptimistAllowlist contract.
     */
    OPTIMIST_ALLOWLIST(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the baseURI for all tokens.
     */
    baseURI(overrides?: CallOverrides): Promise<[string] & { uri_: string }>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Initializes the Optimist contract.
     * @param _name Token name.
     * @param _symbol Token symbol.
     */
    initialize(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.
     */
    isOnAllowList(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed_: boolean }>;

    /**
     * Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.
     * @param _recipient Address of the token recipient.
     */
    mint(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.
     */
    tokenIdOfAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the token URI for a given token by ID
     * @param _tokenId Token ID to query.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { uri_: string }>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Address of the AttestationStation contract.
   */
  ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

  /**
   * Attestation key used by the attestor to attest the baseURI.
   */
  BASE_URI_ATTESTATION_KEY(overrides?: CallOverrides): Promise<string>;

  /**
   * Attestor who attests to baseURI.
   */
  BASE_URI_ATTESTOR(overrides?: CallOverrides): Promise<string>;

  /**
   * Address of the OptimistAllowlist contract.
   */
  OPTIMIST_ALLOWLIST(overrides?: CallOverrides): Promise<string>;

  /**
   * Disabled for the Optimist NFT (Soul Bound Token).
   */
  approve(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * See {IERC721-balanceOf}.
   */
  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the baseURI for all tokens.
   */
  baseURI(overrides?: CallOverrides): Promise<string>;

  /**
   * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
   */
  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-getApproved}.
   */
  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Initializes the Optimist contract.
   * @param _name Token name.
   * @param _symbol Token symbol.
   */
  initialize(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-isApprovedForAll}.
   */
  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.
   */
  isOnAllowList(
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.
   * @param _recipient Address of the token recipient.
   */
  mint(
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721Metadata-name}.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-ownerOf}.
   */
  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC721-safeTransferFrom}.
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Disabled for the Optimist NFT (Soul Bound Token).
   */
  setApprovalForAll(
    arg0: string,
    arg1: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {IERC721Metadata-symbol}.
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.
   */
  tokenIdOfAddress(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the token URI for a given token by ID
   * @param _tokenId Token ID to query.
   */
  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * See {IERC721-transferFrom}.
   */
  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<string>;

    /**
     * Attestation key used by the attestor to attest the baseURI.
     */
    BASE_URI_ATTESTATION_KEY(overrides?: CallOverrides): Promise<string>;

    /**
     * Attestor who attests to baseURI.
     */
    BASE_URI_ATTESTOR(overrides?: CallOverrides): Promise<string>;

    /**
     * Address of the OptimistAllowlist contract.
     */
    OPTIMIST_ALLOWLIST(overrides?: CallOverrides): Promise<string>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the baseURI for all tokens.
     */
    baseURI(overrides?: CallOverrides): Promise<string>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Initializes the Optimist contract.
     * @param _name Token name.
     * @param _symbol Token symbol.
     */
    initialize(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.
     */
    isOnAllowList(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.
     * @param _recipient Address of the token recipient.
     */
    mint(_recipient: string, overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.
     */
    tokenIdOfAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the token URI for a given token by ID
     * @param _tokenId Token ID to query.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Attestation key used by the attestor to attest the baseURI.
     */
    BASE_URI_ATTESTATION_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Attestor who attests to baseURI.
     */
    BASE_URI_ATTESTOR(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address of the OptimistAllowlist contract.
     */
    OPTIMIST_ALLOWLIST(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the baseURI for all tokens.
     */
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Initializes the Optimist contract.
     * @param _name Token name.
     * @param _symbol Token symbol.
     */
    initialize(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.
     */
    isOnAllowList(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.
     * @param _recipient Address of the token recipient.
     */
    mint(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.
     */
    tokenIdOfAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the token URI for a given token by ID
     * @param _tokenId Token ID to query.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Address of the AttestationStation contract.
     */
    ATTESTATION_STATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Attestation key used by the attestor to attest the baseURI.
     */
    BASE_URI_ATTESTATION_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Attestor who attests to baseURI.
     */
    BASE_URI_ATTESTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Address of the OptimistAllowlist contract.
     */
    OPTIMIST_ALLOWLIST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-balanceOf}.
     */
    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the baseURI for all tokens.
     */
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.
     */
    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-getApproved}.
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Initializes the Optimist contract.
     * @param _name Token name.
     * @param _symbol Token symbol.
     */
    initialize(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-isApprovedForAll}.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks OptimistAllowlist to determine whether a given address is allowed to mint         the Optimist NFT. Since the Optimist NFT will also be used as part of the         Citizens House, mints are currently restricted. Eventually anyone will be able         to mint.
     */
    isOnAllowList(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an address to mint an Optimist NFT. Token ID is the uint256 representation         of the recipient's address. Recipients must be permitted to mint, eventually anyone         will be able to mint. One token per address.
     * @param _recipient Address of the token recipient.
     */
    mint(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-name}.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-ownerOf}.
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-safeTransferFrom}.
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Disabled for the Optimist NFT (Soul Bound Token).
     */
    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721Metadata-symbol}.
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the token ID for the token owned by a given address. This is the uint256         representation of the given address.
     */
    tokenIdOfAddress(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the token URI for a given token by ID
     * @param _tokenId Token ID to query.
     */
    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC721-transferFrom}.
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
