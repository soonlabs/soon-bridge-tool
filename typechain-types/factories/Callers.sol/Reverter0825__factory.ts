/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Reverter0825,
  Reverter0825Interface,
} from "../../Callers.sol/Reverter0825";

const _abi = [
  {
    type: "fallback",
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "doRevert",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b5060a580601a5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c8063afc874d214602a575b5f80fd5b60306032565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5265766572746572207265766572746564000000000000000000000000000000604482015260640160405180910390fdfea164736f6c6343000819000a";

type Reverter0825ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Reverter0825ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reverter0825__factory extends ContractFactory {
  constructor(...args: Reverter0825ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Reverter0825> {
    return super.deploy(overrides || {}) as Promise<Reverter0825>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Reverter0825 {
    return super.attach(address) as Reverter0825;
  }
  override connect(signer: Signer): Reverter0825__factory {
    return super.connect(signer) as Reverter0825__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Reverter0825Interface {
    return new utils.Interface(_abi) as Reverter0825Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverter0825 {
    return new Contract(address, _abi, signerOrProvider) as Reverter0825;
  }
}
