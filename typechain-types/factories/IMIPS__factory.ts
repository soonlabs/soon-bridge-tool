/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IMIPS, IMIPSInterface } from "../IMIPS";

const _abi = [
  {
    type: "function",
    name: "oracle",
    inputs: [],
    outputs: [
      {
        name: "oracle_",
        type: "address",
        internalType: "contract IPreimageOracle",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "step",
    inputs: [
      {
        name: "_stateData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_proof",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_localContext",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
] as const;

export class IMIPS__factory {
  static readonly abi = _abi;
  static createInterface(): IMIPSInterface {
    return new utils.Interface(_abi) as IMIPSInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IMIPS {
    return new Contract(address, _abi, signerOrProvider) as IMIPS;
  }
}
