/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FakeClone,
  FakeCloneInterface,
} from "../../DisputeGameFactory.t.sol/FakeClone";

const _abi = [
  {
    type: "function",
    name: "extraData",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "parentHash",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "rootClaim",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "Claim",
      },
    ],
    stateMutability: "pure",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610133806100206000396000f3fe60806040526004361061003f5760003560e01c806351a9f1e614610044578063609d3334146100655780638129fc1c146100b1578063bcef3b5514610044575b600080fd5b34801561005057600080fd5b50604051600081526020015b60405180910390f35b34801561007157600080fd5b50604080518082018252600381527fff042000000000000000000000000000000000000000000000000000000000006020820152905161005c91906100b3565b005b600060208083528351808285015260005b818110156100e0578581018301518582016040015282016100c4565b818111156100f2576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea164736f6c634300080f000a";

type FakeCloneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FakeCloneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FakeClone__factory extends ContractFactory {
  constructor(...args: FakeCloneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<FakeClone> {
    return super.deploy(overrides || {}) as Promise<FakeClone>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FakeClone {
    return super.attach(address) as FakeClone;
  }
  override connect(signer: Signer): FakeClone__factory {
    return super.connect(signer) as FakeClone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeCloneInterface {
    return new utils.Interface(_abi) as FakeCloneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FakeClone {
    return new Contract(address, _abi, signerOrProvider) as FakeClone;
  }
}
