/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OPStackManager_Harness,
  OPStackManager_HarnessInterface,
} from "../../OPStackManager.t.sol/OPStackManager_Harness";

const _abi = [
  {
    type: "function",
    name: "chainIdToBatchInboxAddress_exposed",
    inputs: [
      {
        name: "l2ChainId",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "deploy",
    inputs: [
      {
        name: "_l2ChainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_basefeeScalar",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "_blobBasefeeScalar",
        type: "uint32",
        internalType: "uint32",
      },
      {
        name: "_roles",
        type: "tuple",
        internalType: "struct OPStackManager.Roles",
        components: [
          {
            name: "proxyAdminOwner",
            type: "address",
            internalType: "address",
          },
          {
            name: "systemConfigOwner",
            type: "address",
            internalType: "address",
          },
          {
            name: "batcher",
            type: "address",
            internalType: "address",
          },
          {
            name: "unsafeBlockSigner",
            type: "address",
            internalType: "address",
          },
          {
            name: "proposer",
            type: "address",
            internalType: "address",
          },
          {
            name: "challenger",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "systemConfig_",
        type: "address",
        internalType: "contract SystemConfig",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "Deployed",
    inputs: [
      {
        name: "l2ChainId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "systemConfig",
        type: "address",
        indexed: true,
        internalType: "contract SystemConfig",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "DeploymentFailed",
    inputs: [
      {
        name: "reason",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidChainId",
    inputs: [],
  },
  {
    type: "error",
    name: "NotImplemented",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061035e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806388e1b16b146100985780638c7907bc146100d0575b600080fd5b6100826040518060400160405280600c81526020017f312e302e302d626574612e31000000000000000000000000000000000000000081525081565b60405161008f91906101e6565b60405180910390f35b6100ab6100a6366004610272565b6100e3565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008f565b6100ab6100de3660046102e8565b61015a565b60008415806100f157504685145b15610128576040517f7a47c9a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101658261016b565b92915050565b604080516020808201849052825180830382018152828401845280519101206000606083018190527fffffffffffffffffffffffffffffffffffffff0000000000000000000000000082166061840152835160548185030181526074909301909352829181906101da90610301565b60601c95945050505050565b600060208083528351808285015260005b81811015610213578581018301518582016040015282016101f7565b81811115610225576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803563ffffffff8116811461026d57600080fd5b919050565b60008060008084860361012081121561028a57600080fd5b8535945061029a60208701610259565b93506102a860408701610259565b925060c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0820112156102da57600080fd5b509295919450926060019150565b6000602082840312156102fa57600080fd5b5035919050565b6000815160208301517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808216935060148310156103495780818460140360031b1b83161693505b50505091905056fea164736f6c634300080f000a";

type OPStackManager_HarnessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OPStackManager_HarnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OPStackManager_Harness__factory extends ContractFactory {
  constructor(...args: OPStackManager_HarnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<OPStackManager_Harness> {
    return super.deploy(overrides || {}) as Promise<OPStackManager_Harness>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OPStackManager_Harness {
    return super.attach(address) as OPStackManager_Harness;
  }
  override connect(signer: Signer): OPStackManager_Harness__factory {
    return super.connect(signer) as OPStackManager_Harness__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OPStackManager_HarnessInterface {
    return new utils.Interface(_abi) as OPStackManager_HarnessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OPStackManager_Harness {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OPStackManager_Harness;
  }
}
