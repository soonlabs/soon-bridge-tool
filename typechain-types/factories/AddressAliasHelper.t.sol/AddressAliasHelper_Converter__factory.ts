/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AddressAliasHelper_Converter,
  AddressAliasHelper_ConverterInterface,
} from "../../AddressAliasHelper.t.sol/AddressAliasHelper_Converter";

const _abi = [
  {
    type: "function",
    name: "convertRoundTrip",
    inputs: [
      {
        name: "addr",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "failedRoundtrip",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060af8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806351188e58146037578063c009306d146057575b600080fd5b60005460439060ff1681565b604051901515815260200160405180910390f35b606560623660046067565b50565b005b600060208284031215607857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609b57600080fd5b939250505056fea164736f6c634300080f000a";

type AddressAliasHelper_ConverterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressAliasHelper_ConverterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressAliasHelper_Converter__factory extends ContractFactory {
  constructor(...args: AddressAliasHelper_ConverterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<AddressAliasHelper_Converter> {
    return super.deploy(
      overrides || {}
    ) as Promise<AddressAliasHelper_Converter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressAliasHelper_Converter {
    return super.attach(address) as AddressAliasHelper_Converter;
  }
  override connect(signer: Signer): AddressAliasHelper_Converter__factory {
    return super.connect(signer) as AddressAliasHelper_Converter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressAliasHelper_ConverterInterface {
    return new utils.Interface(_abi) as AddressAliasHelper_ConverterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressAliasHelper_Converter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AddressAliasHelper_Converter;
  }
}
