/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Burn_GasBurner,
  Burn_GasBurnerInterface,
} from "../../Burn.Gas.t.sol/Burn_GasBurner";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_vm",
        type: "address",
        internalType: "contract Vm",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "burnGas",
    inputs: [
      {
        name: "_value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "failedGasBurn",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610601806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ad5d16f1461003b57806379df245a14610050575b600080fd5b61004e61004936600461048f565b610089565b005b6000546100759074010000000000000000000000000000000000000000900460ff1681565b604051901515815260200160405180910390f35b627a1200600061009a83828461010e565b905060005a90506100aa82610163565b60005a905082828203111580156100c2575081838303115b1561010757600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b5050505050565b600061011b848484610191565b905061015c6040518060400160405280600c81526020017f426f756e6420726573756c740000000000000000000000000000000000000000815250826103cd565b9392505050565b6000805a90505b825a61017690836104d7565b101561018c57610185826104ee565b915061016a565b505050565b600081831115610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156102375750818411155b1561024357508261015c565b600061024f84846104d7565b61025a906001610526565b90506003851115801561026c57508481115b156102835761027b8585610526565b91505061015c565b6102ae60037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104d7565b85101580156102e557506102e2857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104d7565b81115b1561031e57610314857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104d7565b61027b90846104d7565b8285111561037457600061033284876104d7565b90506000610340838361053e565b9050806000036103555784935050505061015c565b60016103618288610526565b61036b91906104d7565b935050506103c5565b838510156103c557600061038886866104d7565b90506000610396838361053e565b9050806000036103ab5785935050505061015c565b6103b581866104d7565b6103c0906001610526565b935050505b509392505050565b61045e82826040516024016103e3929190610579565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052610462565b5050565b61046b8161046e565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000602082840312156104a157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156104e9576104e96104a8565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361051f5761051f6104a8565b5060010190565b60008219821115610539576105396104a8565b500190565b600082610574577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b604081526000835180604084015260005b818110156105a7576020818701810151606086840101520161058a565b818111156105b9576000606083860101525b50602083019390935250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160600191905056fea164736f6c634300080f000a";

type Burn_GasBurnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Burn_GasBurnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Burn_GasBurner__factory extends ContractFactory {
  constructor(...args: Burn_GasBurnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vm: string,
    overrides?: Overrides & { from?: string }
  ): Promise<Burn_GasBurner> {
    return super.deploy(_vm, overrides || {}) as Promise<Burn_GasBurner>;
  }
  override getDeployTransaction(
    _vm: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_vm, overrides || {});
  }
  override attach(address: string): Burn_GasBurner {
    return super.attach(address) as Burn_GasBurner;
  }
  override connect(signer: Signer): Burn_GasBurner__factory {
    return super.connect(signer) as Burn_GasBurner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Burn_GasBurnerInterface {
    return new utils.Interface(_abi) as Burn_GasBurnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Burn_GasBurner {
    return new Contract(address, _abi, signerOrProvider) as Burn_GasBurner;
  }
}
