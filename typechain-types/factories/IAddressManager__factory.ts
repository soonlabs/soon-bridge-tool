/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAddressManager,
  IAddressManagerInterface,
} from "../IAddressManager";

const _abi = [
  {
    type: "function",
    name: "getAddress",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setAddress",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_address",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AddressSet",
    inputs: [
      {
        name: "name",
        type: "string",
        indexed: true,
        internalType: "string",
      },
      {
        name: "newAddress",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "oldAddress",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
] as const;

export class IAddressManager__factory {
  static readonly abi = _abi;
  static createInterface(): IAddressManagerInterface {
    return new utils.Interface(_abi) as IAddressManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAddressManager {
    return new Contract(address, _abi, signerOrProvider) as IAddressManager;
  }
}
