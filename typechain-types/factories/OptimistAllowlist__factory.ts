/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptimistAllowlist,
  OptimistAllowlistInterface,
} from "../OptimistAllowlist";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_attestationStation",
        type: "address",
        internalType: "contract AttestationStation",
      },
      {
        name: "_allowlistAttestor",
        type: "address",
        internalType: "address",
      },
      {
        name: "_coinbaseQuestAttestor",
        type: "address",
        internalType: "address",
      },
      {
        name: "_optimistInviter",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ALLOWLIST_ATTESTOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ATTESTATION_STATION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract AttestationStation",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "COINBASE_QUEST_ATTESTOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "COINBASE_QUEST_ELIGIBLE_ATTESTATION_KEY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "OPTIMIST_CAN_MINT_ATTESTATION_KEY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "OPTIMIST_INVITER",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isAllowedToMint",
    inputs: [
      {
        name: "_claimer",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "allowed_",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b506040516106ff3803806106ff8339810160408190526100309161006a565b6001600160a01b0393841660805291831660a052821660c0521660e0526100c9565b6001600160a01b038116811461006757600080fd5b50565b6000806000806080858703121561008057600080fd5b845161008b81610052565b602086015190945061009c81610052565b60408601519093506100ad81610052565b60608601519092506100be81610052565b939692955090935050565b60805160a05160c05160e0516105e261011d6000396000818161014f01526102eb0152600081816092015261029e0152600081816101d201526102510152600081816101ab015261038601526105e26000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063819f7e841161005b578063819f7e8414610171578063db083d71146101a6578063db3c3163146101cd578063e7bd804e146101f457600080fd5b80633ac52df71461008d5780634813d8a6146100de57806354fd4d50146101015780635e4f489a1461014a575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f16100ec36600461041d565b61021b565b60405190151581526020016100d5565b61013d6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516100d5919061048a565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101987f636f696e626173652e71756573742d656c696769626c6500000000000000000081565b6040519081526020016100d5565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101987f6f7074696d6973742e63616e2d6d696e7400000000000000000000000000000081565b60006102268261024a565b80610235575061023582610297565b806102445750610244826102e4565b92915050565b60006102447f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e7400000000000000000000000000000061032d565b60006102447f0000000000000000000000000000000000000000000000000000000000000000837f636f696e626173652e71756573742d656c696769626c6500000000000000000061032d565b60006102447f0000000000000000000000000000000000000000000000000000000000000000837f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e766974650000005b6040517f29b42cb500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905260009182917f000000000000000000000000000000000000000000000000000000000000000016906329b42cb590606401600060405180830381865afa1580156103cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610413919081019061050a565b5111949350505050565b60006020828403121561042f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461045357600080fd5b9392505050565b60005b8381101561047557818101518382015260200161045d565b83811115610484576000848401525b50505050565b60208152600082518060208401526104a981604085016020870161045a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561051c57600080fd5b815167ffffffffffffffff8082111561053457600080fd5b818401915084601f83011261054857600080fd5b81518181111561055a5761055a6104db565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156105a0576105a06104db565b816040528281528760208487010111156105b957600080fd5b6105ca83602083016020880161045a565b97965050505050505056fea164736f6c634300080f000a";

type OptimistAllowlistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimistAllowlistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimistAllowlist__factory extends ContractFactory {
  constructor(...args: OptimistAllowlistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _attestationStation: string,
    _allowlistAttestor: string,
    _coinbaseQuestAttestor: string,
    _optimistInviter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<OptimistAllowlist> {
    return super.deploy(
      _attestationStation,
      _allowlistAttestor,
      _coinbaseQuestAttestor,
      _optimistInviter,
      overrides || {}
    ) as Promise<OptimistAllowlist>;
  }
  override getDeployTransaction(
    _attestationStation: string,
    _allowlistAttestor: string,
    _coinbaseQuestAttestor: string,
    _optimistInviter: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _attestationStation,
      _allowlistAttestor,
      _coinbaseQuestAttestor,
      _optimistInviter,
      overrides || {}
    );
  }
  override attach(address: string): OptimistAllowlist {
    return super.attach(address) as OptimistAllowlist;
  }
  override connect(signer: Signer): OptimistAllowlist__factory {
    return super.connect(signer) as OptimistAllowlist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimistAllowlistInterface {
    return new utils.Interface(_abi) as OptimistAllowlistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimistAllowlist {
    return new Contract(address, _abi, signerOrProvider) as OptimistAllowlist;
  }
}
