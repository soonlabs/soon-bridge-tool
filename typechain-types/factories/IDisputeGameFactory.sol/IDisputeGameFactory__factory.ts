/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IDisputeGameFactory,
  IDisputeGameFactoryInterface,
} from "../../IDisputeGameFactory.sol/IDisputeGameFactory";

const _abi = [
  {
    type: "function",
    name: "create",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "_rootClaim",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "_extraData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "proxy_",
        type: "address",
        internalType: "contract IDisputeGame",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "findLatestGames",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "_start",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_n",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "games_",
        type: "tuple[]",
        internalType: "struct IDisputeGameFactory.GameSearchResult[]",
        components: [
          {
            name: "index",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "metadata",
            type: "bytes32",
            internalType: "GameId",
          },
          {
            name: "timestamp",
            type: "uint64",
            internalType: "Timestamp",
          },
          {
            name: "rootClaim",
            type: "bytes32",
            internalType: "Claim",
          },
          {
            name: "extraData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gameAtIndex",
    inputs: [
      {
        name: "_index",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "gameType_",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "timestamp_",
        type: "uint64",
        internalType: "Timestamp",
      },
      {
        name: "proxy_",
        type: "address",
        internalType: "contract IDisputeGame",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gameCount",
    inputs: [],
    outputs: [
      {
        name: "gameCount_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gameImpls",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
    ],
    outputs: [
      {
        name: "impl_",
        type: "address",
        internalType: "contract IDisputeGame",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "games",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "_rootClaim",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "_extraData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "proxy_",
        type: "address",
        internalType: "contract IDisputeGame",
      },
      {
        name: "timestamp_",
        type: "uint64",
        internalType: "Timestamp",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getGameUUID",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "_rootClaim",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "_extraData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "uuid_",
        type: "bytes32",
        internalType: "Hash",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "initBonds",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
    ],
    outputs: [
      {
        name: "bond_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setImplementation",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "_impl",
        type: "address",
        internalType: "contract IDisputeGame",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setInitBond",
    inputs: [
      {
        name: "_gameType",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "_initBond",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "DisputeGameCreated",
    inputs: [
      {
        name: "disputeProxy",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "gameType",
        type: "uint32",
        indexed: true,
        internalType: "GameType",
      },
      {
        name: "rootClaim",
        type: "bytes32",
        indexed: true,
        internalType: "Claim",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ImplementationSet",
    inputs: [
      {
        name: "impl",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "gameType",
        type: "uint32",
        indexed: true,
        internalType: "GameType",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InitBondUpdated",
    inputs: [
      {
        name: "gameType",
        type: "uint32",
        indexed: true,
        internalType: "GameType",
      },
      {
        name: "newBond",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

export class IDisputeGameFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IDisputeGameFactoryInterface {
    return new utils.Interface(_abi) as IDisputeGameFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDisputeGameFactory {
    return new Contract(address, _abi, signerOrProvider) as IDisputeGameFactory;
  }
}
