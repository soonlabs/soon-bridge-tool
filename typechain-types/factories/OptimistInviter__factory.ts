/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptimistInviter,
  OptimistInviterInterface,
} from "../OptimistInviter";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_inviteGranter",
        type: "address",
        internalType: "address",
      },
      {
        name: "_attestationStation",
        type: "address",
        internalType: "contract AttestationStation",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ATTESTATION_STATION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract AttestationStation",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "CAN_INVITE_ATTESTATION_KEY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "CLAIMABLE_INVITE_TYPEHASH",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "EIP712_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "INVITE_GRANTER",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MIN_COMMITMENT_PERIOD",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claimInvite",
    inputs: [
      {
        name: "_claimer",
        type: "address",
        internalType: "address",
      },
      {
        name: "_claimableInvite",
        type: "tuple",
        internalType: "struct OptimistInviter.ClaimableInvite",
        components: [
          {
            name: "issuer",
            type: "address",
            internalType: "address",
          },
          {
            name: "nonce",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
      {
        name: "_signature",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "commitInvite",
    inputs: [
      {
        name: "_commitment",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "commitmentTimestamps",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "inviteCounts",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setInviteCounts",
    inputs: [
      {
        name: "_accounts",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "_inviteCount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "usedNonces",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InviteClaimed",
    inputs: [
      {
        name: "issuer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "claimer",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001ae838038062001ae8833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051611a0a620000de6000396000818161028b015281816106850152610c3601526000818160f401526103e80152611a0a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916db22f1161008c578063db083d7111610066578063db083d7114610286578063de2dd221146102ad578063eccec5a8146102cd578063f62d18881461030957600080fd5b8063916db22f14610218578063b4245d731461023f578063c4fc453d1461025f57600080fd5b806350b414e6116100c857806350b414e61461016857806350eedbc21461017e57806354fd4d50146101915780635fda04c7146101da57600080fd5b806314b47241146100ef578063187e3cd11461014057806325b27a3d14610155575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015361014e3660046114b3565b61031c565b005b6101536101633660046114cc565b6103d0565b610170603c81565b604051908152602001610137565b61015361018c366004611633565b6106f3565b6101cd6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516101379190611749565b6102086101e836600461175c565b603660209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610137565b6101707f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081565b61017061024d3660046114b3565b60356020526000908152604090205481565b6101707f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101706102bb366004611786565b60376020526000908152604090205481565b6101cd6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101536103173660046117a1565b610d7c565b600081815260356020526040902054156103bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c726560448201527f616479206d61646500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000908152603560205260409020429055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4f7074696d697374496e76697465723a206f6e6c7920696e766974652067726160448201527f6e7465722063616e206772616e7420696e76697465730000000000000000000060648201526084016103b4565b8160008167ffffffffffffffff8111156104b1576104b1611570565b6040519080825280602002602001820160405280156104fe57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816104cf5790505b50905060005b82811015610647578360376000888885818110610523576105236117f2565b90506020020160208101906105389190611786565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040518060600160405280878784818110610593576105936117f2565b90506020020160208101906105a89190611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081526020016040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250815250828281518110610634576106346117f2565b6020908102919091010152600101610504565b506040517f5eb5ea1000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906106ba908490600401611821565b600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050505050505050565b600060356000858460405160200161070c9291906118d4565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4f7074696d697374496e76697465723a20636c61696d657220616e642073696760448201527f6e61747572652068617665206e6f74206265656e20636f6d6d6974746564207960648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4016103b4565b426107f5603c83611903565b1115610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d60448201527f656e7420706572696f6420686173206e6f7420656c617073656420796574000060648201526084016103b4565b60006109067f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce6108b66020870187611786565b6040805160208181019490945273ffffffffffffffffffffffffffffffffffffffff9092169082015290860135606082015260800160405160208183030381529060405280519060200120610f46565b905061091f6109186020860186611786565b8285610fb5565b6109ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696d697374496e76697465723a20696e76616c6964207369676e61747560448201527f726500000000000000000000000000000000000000000000000000000000000060648201526084016103b4565b603660006109bc6020870187611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812087840135825290925290205460ff1615610a83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4f7074696d697374496e76697465723a206e6f6e63652068617320616c72656160448201527f6479206265656e2075736564000000000000000000000000000000000000000060648201526084016103b4565b600160366000610a966020880188611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812088840180358352935290812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092556037908290610b0a9088611786565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610bd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696d697374496e76697465723a2069737375657220686173206e6f206960448201527f6e7669746573000000000000000000000000000000000000000000000000000060648201526084016103b4565b60376000610be36020870187611786565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604090910160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190557f0000000000000000000000000000000000000000000000000000000000000000169063702b9dee9087907f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e7669746500000090610c8d90890189611786565b6040805173ffffffffffffffffffffffffffffffffffffffff9092166020830152016040516020818303038152906040526040518463ffffffff1660e01b8152600401610cdc93929190611942565b600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff86169050610d336020860186611786565b73ffffffffffffffffffffffffffffffffffffffff167f745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be47560405160405180910390a35050505050565b600054610100900460ff1615808015610d9c5750600054600160ff909116105b80610db65750303b158015610db6575060005460ff166001145b610e42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610ea057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610edf826040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250611184565b8015610f4257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000610faf610f53611225565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610fc485856112a5565b90925090506000816004811115610fdd57610fdd611980565b14801561101557508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156110255760019250505061117d565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b888860405160240161105a9291906119af565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516110e391906119c8565b600060405180830381855afa9150503d806000811461111e576040519150601f19603f3d011682016040523d82523d6000602084013e611123565b606091505b5091509150818015611136575080516020145b8015611176575080517f1626ba7e000000000000000000000000000000000000000000000000000000009061117490830160209081019084016119e4565b145b9450505050505b9392505050565b600054610100900460ff1661121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103b4565b610f4282826112ea565b60006112a07f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61125460015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b60008082516041036112db5760208301516040840151606085015160001a6112cf8782858561139b565b945094505050506112e3565b506000905060025b9250929050565b600054610100900460ff16611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103b4565b815160209283012081519190920120600191909155600255565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113d257506000905060036114aa565b8460ff16601b141580156113ea57508460ff16601c14155b156113fb57506000905060046114aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561144f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114a3576000600192509250506114aa565b9150600090505b94509492505050565b6000602082840312156114c557600080fd5b5035919050565b6000806000604084860312156114e157600080fd5b833567ffffffffffffffff808211156114f957600080fd5b818601915086601f83011261150d57600080fd5b81358181111561151c57600080fd5b8760208260051b850101111561153157600080fd5b6020928301989097509590910135949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461156b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156115ba576115ba611570565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561160057611600611570565b8160405280935085815286868601111561161957600080fd5b858560208301376000602087830101525050509392505050565b6000806000838503608081121561164957600080fd5b61165285611547565b935060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561168457600080fd5b50602084019150606084013567ffffffffffffffff8111156116a557600080fd5b8401601f810186136116b657600080fd5b6116c58682356020840161159f565b9150509250925092565b60005b838110156116ea5781810151838201526020016116d2565b838111156116f9576000848401525b50505050565b600081518084526117178160208601602086016116cf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061117d60208301846116ff565b6000806040838503121561176f57600080fd5b61177883611547565b946020939093013593505050565b60006020828403121561179857600080fd5b61117d82611547565b6000602082840312156117b357600080fd5b813567ffffffffffffffff8111156117ca57600080fd5b8201601f810184136117db57600080fd5b6117ea8482356020840161159f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118c6578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff168452878101518885015286015160608785018190526118b2818601836116ff565b968901969450505090860190600101611848565b509098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006117ea60408301846116ff565b6000821982111561193d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061197760608301846116ff565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006117ea60408301846116ff565b600082516119da8184602087016116cf565b9190910192915050565b6000602082840312156119f657600080fd5b505191905056fea164736f6c634300080f000a";

type OptimistInviterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimistInviterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimistInviter__factory extends ContractFactory {
  constructor(...args: OptimistInviterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _inviteGranter: string,
    _attestationStation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<OptimistInviter> {
    return super.deploy(
      _inviteGranter,
      _attestationStation,
      overrides || {}
    ) as Promise<OptimistInviter>;
  }
  override getDeployTransaction(
    _inviteGranter: string,
    _attestationStation: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _inviteGranter,
      _attestationStation,
      overrides || {}
    );
  }
  override attach(address: string): OptimistInviter {
    return super.attach(address) as OptimistInviter;
  }
  override connect(signer: Signer): OptimistInviter__factory {
    return super.connect(signer) as OptimistInviter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimistInviterInterface {
    return new utils.Interface(_abi) as OptimistInviterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimistInviter {
    return new Contract(address, _abi, signerOrProvider) as OptimistInviter;
  }
}
