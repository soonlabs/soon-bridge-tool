/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SafeSend0815,
  SafeSend0815Interface,
} from "../../SafeSend.sol/SafeSend0815";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_recipient",
        type: "address",
        internalType: "address payable",
      },
    ],
    stateMutability: "payable",
  },
] as const;

const _bytecode =
  "0x608060405260405160593803806059833981016040819052601e91602a565b806001600160a01b0316ff5b600060208284031215603b57600080fd5b81516001600160a01b0381168114605157600080fd5b939250505056fe";

type SafeSend0815ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeSend0815ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeSend0815__factory extends ContractFactory {
  constructor(...args: SafeSend0815ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _recipient: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<SafeSend0815> {
    return super.deploy(_recipient, overrides || {}) as Promise<SafeSend0815>;
  }
  override getDeployTransaction(
    _recipient: string,
    overrides?: PayableOverrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_recipient, overrides || {});
  }
  override attach(address: string): SafeSend0815 {
    return super.attach(address) as SafeSend0815;
  }
  override connect(signer: Signer): SafeSend0815__factory {
    return super.connect(signer) as SafeSend0815__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeSend0815Interface {
    return new utils.Interface(_abi) as SafeSend0815Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeSend0815 {
    return new Contract(address, _abi, signerOrProvider) as SafeSend0815;
  }
}
