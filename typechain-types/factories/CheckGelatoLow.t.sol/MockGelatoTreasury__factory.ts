/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockGelatoTreasury,
  MockGelatoTreasuryInterface,
} from "../../CheckGelatoLow.t.sol/MockGelatoTreasury";

const _abi = [
  {
    type: "function",
    name: "setTotalDepositedAmount",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "totalDepositedAmount",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalWithdrawnAmount",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063562ac3dc1461004657806372eec2941461009d578063e1380b72146100e3575b600080fd5b61008b610054366004610153565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152602081815260408083209386168352929052205492915050565b60405190815260200160405180910390f35b6100e16100ab366004610186565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526020818152604080832095909416825293909352912055565b005b61008b6100f1366004610153565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602090815260408083209386168352929052205492915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461014e57600080fd5b919050565b6000806040838503121561016657600080fd5b61016f8361012a565b915061017d6020840161012a565b90509250929050565b60008060006060848603121561019b57600080fd5b6101a48461012a565b92506101b26020850161012a565b915060408401359050925092509256fea164736f6c634300080f000a";

type MockGelatoTreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGelatoTreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGelatoTreasury__factory extends ContractFactory {
  constructor(...args: MockGelatoTreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockGelatoTreasury> {
    return super.deploy(overrides || {}) as Promise<MockGelatoTreasury>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockGelatoTreasury {
    return super.attach(address) as MockGelatoTreasury;
  }
  override connect(signer: Signer): MockGelatoTreasury__factory {
    return super.connect(signer) as MockGelatoTreasury__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGelatoTreasuryInterface {
    return new utils.Interface(_abi) as MockGelatoTreasuryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockGelatoTreasury {
    return new Contract(address, _abi, signerOrProvider) as MockGelatoTreasury;
  }
}
