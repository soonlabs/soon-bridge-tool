/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptimismPortal_Depositor,
  OptimismPortal_DepositorInterface,
} from "../../OptimismPortal.t.sol/OptimismPortal_Depositor";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_vm",
        type: "address",
        internalType: "contract Vm",
      },
      {
        name: "_portal",
        type: "address",
        internalType: "contract OptimismPortal",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositTransactionCompletes",
    inputs: [
      {
        name: "_to",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_gasLimit",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "_isCreation",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "failedToComplete",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "params",
    inputs: [],
    outputs: [
      {
        name: "prevBaseFee",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "prevBoughtGas",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "prevBlockNum",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "resourceConfig",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ResourceMetering.ResourceConfig",
        components: [
          {
            name: "maxResourceLimit",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "elasticityMultiplier",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "baseFeeMaxChangeDenominator",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "minimumBaseFee",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "systemTxMaxGas",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "maximumBaseFee",
            type: "uint128",
            internalType: "uint128",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "OutOfGas",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011263803806200112683398101604081905262000034916200028c565b603280546001600160a01b038085166001600160a01b03199283161790925560338054928416929091169190911790556200006e62000076565b5050620002cb565b600054610100900460ff1615808015620000975750600054600160ff909116105b80620000c75750620000b430620001a860201b6200064e1760201c565b158015620000c7575060005460ff166001145b620001305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000154576000805461ff0019166101001790555b6200015e620001b7565b8015620001a5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b03163b151590565b600054610100900460ff16620002245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840162000127565b600154600160c01b90046001600160401b0316600003620002745760408051606081018252633b9aca0080825260006020830152436001600160401b031691909201819052600160c01b02176001555b565b6001600160a01b0381168114620001a557600080fd5b60008060408385031215620002a057600080fd5b8251620002ad8162000276565b6020840151909250620002c08162000276565b809150509250929050565b610e4b80620002db6000396000f3fe60806040526004361061003f5760003560e01c806399fca42f14610044578063cc731b021461008b578063cff0ab9614610110578063d40b5b1a146101b1575b600080fd5b34801561005057600080fd5b506033546100769074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b34801561009757600080fd5b506100a06101c6565b6040516100829190600060c08201905063ffffffff80845116835260ff602085015116602084015260ff6040850151166040840152806060850151166060840152806080850151166080840152506fffffffffffffffffffffffffffffffff60a08401511660a083015292915050565b34801561011c57600080fd5b50600154610178906fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845267ffffffffffffffff9283166020850152911690820152606001610082565b6101c46101bf366004610ad8565b610205565b005b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915261020061066a565b905090565b60325473ffffffffffffffffffffffffffffffffffffffff16634c63e5628315801561023057508615155b801561024057506201d4c0835111155b6040518263ffffffff1660e01b8152600401610260911515815260200190565b60006040518083038186803b15801561027857600080fd5b505afa15801561028c573d6000803e3d6000fd5b505050506000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633034a5ef6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190610be5565b9050600061034286836fffffffffffffffffffffffffffffffff610725565b6032546040517fc88a5e6d0000000000000000000000000000000000000000000000000000000081523060048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063c88a5e6d90604401600060405180830381600087803b1580156103b557600080fd5b505af11580156103c9573d6000803e3d6000fd5b50505050600047905060006103df838584610725565b90506103ea8161077a565b90506000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cff0ab966040518163ffffffff1660e01b8152600401606060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190610bfe565b50915050600061048d6101c6565b805160335489516040517fa35d99df00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff918216600482015293945063ffffffff9092169260009261056a92908e169173ffffffffffffffffffffffffffffffffffffffff9091169063a35d99df90602401602060405180830381865afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190610c60565b67ffffffffffffffff168667ffffffffffffffff16856105659190610cac565b610725565b9050603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3ef068868f88858f8f6040518763ffffffff1660e01b81526004016105d0959493929190610d2e565b6000604051808303818588803b1580156105e957600080fd5b505af1935050505080156105fb575060015b61063f57603380547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b50505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529061071f6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526301312d008152600a6020820152600891810191909152633b9aca006060820152620f424060808201526fffffffffffffffffffffffffffffffff60a082015290565b92915050565b6000610732848484610795565b90506107736040518060400160405280600c81526020017f426f756e6420726573756c740000000000000000000000000000000000000000815250826109d1565b9392505050565b6000633b9aca0061078b8184610d9f565b61071f9190610db3565b60008183111561082b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b82841015801561083b5750818411155b15610847575082610773565b60006108538484610cac565b61085e906001610df0565b90506003851115801561087057508481115b156108875761087f8585610df0565b915050610773565b6108b260037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cac565b85101580156108e957506108e6857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cac565b81115b1561092257610918857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610cac565b61087f9084610cac565b828511156109785760006109368487610cac565b905060006109448383610e08565b90508060000361095957849350505050610773565b60016109658288610df0565b61096f9190610cac565b935050506109c9565b838510156109c957600061098c8686610cac565b9050600061099a8383610e08565b9050806000036109af57859350505050610773565b6109b98186610cac565b6109c4906001610df0565b935050505b509392505050565b610a6282826040516024016109e7929190610e1c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052610a66565b5050565b610a6f81610a72565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b67ffffffffffffffff81168114610a6f57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080600060a08688031215610af057600080fd5b85359450602086013593506040860135610b0981610a93565b925060608601358015158114610b1e57600080fd5b9150608086013567ffffffffffffffff80821115610b3b57600080fd5b818801915088601f830112610b4f57600080fd5b813581811115610b6157610b61610aa9565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610ba757610ba7610aa9565b816040528281528b6020848701011115610bc057600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b600060208284031215610bf757600080fd5b5051919050565b600080600060608486031215610c1357600080fd5b83516fffffffffffffffffffffffffffffffff81168114610c3357600080fd5b6020850151909350610c4481610a93565b6040850151909250610c5581610a93565b809150509250925092565b600060208284031215610c7257600080fd5b815161077381610a93565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610cbe57610cbe610c7d565b500390565b6000815180845260005b81811015610ce957602081850181015186830182015201610ccd565b81811115610cfb576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b85815284602082015267ffffffffffffffff84166040820152821515606082015260a060808201526000610d6560a0830184610cc3565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610dae57610dae610d70565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610deb57610deb610c7d565b500290565b60008219821115610e0357610e03610c7d565b500190565b600082610e1757610e17610d70565b500690565b604081526000610e2f6040830185610cc3565b9050826020830152939250505056fea164736f6c634300080f000a";

type OptimismPortal_DepositorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimismPortal_DepositorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimismPortal_Depositor__factory extends ContractFactory {
  constructor(...args: OptimismPortal_DepositorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vm: string,
    _portal: string,
    overrides?: Overrides & { from?: string }
  ): Promise<OptimismPortal_Depositor> {
    return super.deploy(
      _vm,
      _portal,
      overrides || {}
    ) as Promise<OptimismPortal_Depositor>;
  }
  override getDeployTransaction(
    _vm: string,
    _portal: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_vm, _portal, overrides || {});
  }
  override attach(address: string): OptimismPortal_Depositor {
    return super.attach(address) as OptimismPortal_Depositor;
  }
  override connect(signer: Signer): OptimismPortal_Depositor__factory {
    return super.connect(signer) as OptimismPortal_Depositor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimismPortal_DepositorInterface {
    return new utils.Interface(_abi) as OptimismPortal_DepositorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimismPortal_Depositor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OptimismPortal_Depositor;
  }
}
