/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AdminFaucetAuthModule,
  AdminFaucetAuthModuleInterface,
} from "../AdminFaucetAuthModule";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_admin",
        type: "address",
        internalType: "address",
      },
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_version",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ADMIN",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PROOF_TYPEHASH",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "verify",
    inputs: [
      {
        name: "_params",
        type: "tuple",
        internalType: "struct Faucet.DripParameters",
        components: [
          {
            name: "recipient",
            type: "address",
            internalType: "address payable",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "nonce",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "gasLimit",
            type: "uint32",
            internalType: "uint32",
          },
        ],
      },
      {
        name: "_id",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_proof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "valid_",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x6101806040527fd4283507dc7a8282faa6b4c8c18bacbb74dbbab5467342e6f581656f3577236e6101605234801561003657600080fd5b50604051610c0a380380610c0a833981016040819052610055916101b8565b815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c094850190915281519190950120905291909152610120526001600160a01b03166101405261023a565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261011d57600080fd5b81516001600160401b0380821115610137576101376100f6565b604051601f8301601f19908116603f0116810190828211818310171561015f5761015f6100f6565b8160405283815260209250868385880101111561017b57600080fd5b600091505b8382101561019d5785820183015181830184015290820190610180565b838211156101ae5760008385830101525b9695505050505050565b6000806000606084860312156101cd57600080fd5b83516001600160a01b03811681146101e457600080fd5b60208501519093506001600160401b038082111561020157600080fd5b61020d8783880161010c565b9350604086015191508082111561022357600080fd5b506102308682870161010c565b9150509250925092565b60805160a05160c05160e051610100516101205161014051610160516109606102aa60003960008181609c015260fb015260008181604b015261015301526000610478015260006104c7015260006104a2015260006103fb015260006104250152600061044f01526109606000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632a0acc6a146100465780638b3e3bf614610097578063d855814f146100cc575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100be7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161008e565b6100df6100da366004610775565b6100ef565b604051901515815260200161008e565b825160408085015181517f0000000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9093169183019190915260608201526080810183905260009061019b907f0000000000000000000000000000000000000000000000000000000000000000906101959060a001604051602081830303815290604052805190602001206101a3565b84610212565b949350505050565b600061020c6101b06103e1565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006102218585610515565b9092509050600081600481111561023a5761023a610867565b14801561027257508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610282576001925050506103da565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016102b79291906108c6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610340919061091e565b600060405180830381855afa9150503d806000811461037b576040519150601f19603f3d011682016040523d82523d6000602084013e610380565b606091505b5091509150818015610393575080516020145b80156103d3575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906103d1908301602090810190840161093a565b145b9450505050505b9392505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561044757507f000000000000000000000000000000000000000000000000000000000000000046145b1561047157507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600080825160410361054b5760208301516040840151606085015160001a61053f8782858561055a565b94509450505050610553565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156105915750600090506003610669565b8460ff16601b141580156105a957508460ff16601c14155b156105ba5750600090506004610669565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561060e573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661066257600060019250925050610669565b9150600090505b94509492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156106c4576106c4610672565b60405290565b600082601f8301126106db57600080fd5b813567ffffffffffffffff808211156106f6576106f6610672565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561073c5761073c610672565b8160405283815286602085880101111561075557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561078a57600080fd5b833567ffffffffffffffff808211156107a257600080fd5b90850190608082880312156107b657600080fd5b6107be6106a1565b823573ffffffffffffffffffffffffffffffffffffffff811681146107e257600080fd5b81526020830135828111156107f657600080fd5b610802898286016106ca565b602083015250604083013560408201526060830135925063ffffffff8316831461082b57600080fd5b8260608201528095505060208601359350604086013591508082111561085057600080fd5b5061085d868287016106ca565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60005b838110156108b1578181015183820152602001610899565b838111156108c0576000848401525b50505050565b82815260406020820152600082518060408401526108eb816060850160208701610896565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b60008251610930818460208701610896565b9190910192915050565b60006020828403121561094c57600080fd5b505191905056fea164736f6c634300080f000a";

type AdminFaucetAuthModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdminFaucetAuthModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AdminFaucetAuthModule__factory extends ContractFactory {
  constructor(...args: AdminFaucetAuthModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _admin: string,
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string }
  ): Promise<AdminFaucetAuthModule> {
    return super.deploy(
      _admin,
      _name,
      _version,
      overrides || {}
    ) as Promise<AdminFaucetAuthModule>;
  }
  override getDeployTransaction(
    _admin: string,
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_admin, _name, _version, overrides || {});
  }
  override attach(address: string): AdminFaucetAuthModule {
    return super.attach(address) as AdminFaucetAuthModule;
  }
  override connect(signer: Signer): AdminFaucetAuthModule__factory {
    return super.connect(signer) as AdminFaucetAuthModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdminFaucetAuthModuleInterface {
    return new utils.Interface(_abi) as AdminFaucetAuthModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AdminFaucetAuthModule {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AdminFaucetAuthModule;
  }
}
