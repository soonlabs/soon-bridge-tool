/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WrappedGuard,
  WrappedGuardInterface,
} from "../../LivenessGuard.t.sol/WrappedGuard";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "safe",
        type: "address",
        internalType: "contract GnosisSafe",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "checkAfterExecution",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "checkTransaction",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "operation",
        type: "uint8",
        internalType: "enum Enum.Operation",
      },
      {
        name: "safeTxGas",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "baseGas",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "gasPrice",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "gasToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "refundReceiver",
        type: "address",
        internalType: "address payable",
      },
      {
        name: "signatures",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "msgSender",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "lastLive",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ownersBeforeLength",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "safe",
    inputs: [],
    outputs: [
      {
        name: "safe_",
        type: "address",
        internalType: "contract GnosisSafe",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "showLiveness",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "OwnerRecorded",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620016a1380380620016a1833981016040819052620000349162000172565b80806001600160a01b03166080816001600160a01b0316815250506000816001600160a01b031663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000090573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000ba9190810190620001c1565b905060005b81518110156200014f576000828281518110620000e057620000e062000293565b6020908102919091018101516001600160a01b0381166000818152808452604090819020429055519081529092507f833bc129023866d52116d61e94b791eb8be46f05709362e0bcf1fe7c1a8c225c910160405180910390a150806200014681620002a9565b915050620000bf565b50505050620002d1565b6001600160a01b03811681146200016f57600080fd5b50565b6000602082840312156200018557600080fd5b8151620001928162000159565b9392505050565b634e487b7160e01b600052604160045260246000fd5b8051620001bc8162000159565b919050565b60006020808385031215620001d557600080fd5b82516001600160401b0380821115620001ed57600080fd5b818501915085601f8301126200020257600080fd5b81518181111562000217576200021762000199565b8060051b604051601f19603f830116810181811085821117156200023f576200023f62000199565b6040529182528482019250838101850191888311156200025e57600080fd5b938501935b8285101562000287576200027785620001af565b8452938501939285019262000263565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620002ca57634e487b7160e01b600052601160045260246000fd5b5060010190565b6080516113846200031d60003960008181609c015281816101a80152818161030b0152818161040d0152818161045401528181610557015281816106f901526108e201526113846000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806375f0bb521161005b57806375f0bb521461011e5780639327136814610131578063ccc7a0f714610144578063e458779b1461015a57600080fd5b8063186f0354146100825780634c205d0d146100cb57806354fd4d50146100d5575b600080fd5b60405173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b6100d361017a565b005b6101116040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516100c29190610e22565b6100d361012c366004610f85565b6102ff565b6100d361013f366004611078565b6106ed565b61014c6108b9565b6040519081526020016100c2565b61014c6101683660046110a8565b60006020819052908152604090205481565b6040517f2f54bf6e0000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632f54bf6e90602401602060405180830381865afa158015610204573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022891906110c5565b6102b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4c6976656e65737347756172643a206f6e6c792053616665206f776e6572732060448201527f6d61792064656d6f6e737472617465206c6976656e657373000000000000000060648201526084015b60405180910390fd5b336000818152602081815260409182902042905590519182527f833bc129023866d52116d61e94b791eb8be46f05709362e0bcf1fe7c1a8c225c910160405180910390a1565b6103076108ca565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610374573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103ba91908101906110e2565b905060005b8151811015610408576103f58282815181106103dd576103dd611194565b6020026020010151600161099190919063ffffffff16565b5080610400816111f2565b9150506103bf565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d8d11f788e8e8e8e8e8e8e8e8e60017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663affed0e06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e1919061122a565b6104eb9190611243565b6040518b63ffffffff1660e01b81526004016105109a9998979695949392919061125a565b602060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610551919061122a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e4919061122a565b905060006105f38387846109bc565b905060005b81518110156106db574260008084848151811061061757610617611194565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f833bc129023866d52116d61e94b791eb8be46f05709362e0bcf1fe7c1a8c225c82828151811061069057610690611194565b60200260200101516040516106c1919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a1806106d3816111f2565b9150506105f8565b50505050505050505050505050505050565b6106f56108ca565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a0e67e2b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610762573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107a891908101906110e2565b905060005b815181101561082d5760008282815181106107ca576107ca611194565b602002602001015190506107e8816001610bd990919063ffffffff16565b151560000361081a5773ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604090204290555b5080610825816111f2565b9150506107ad565b50600061083a6001610bfb565b905060005b81518110156108b257600082828151811061085c5761085c611194565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff81166000908152918290526040822091909155905061089d600182610bd9565b505080806108aa906111f2565b91505061083f565b5050505050565b60006108c56001610c0f565b905090565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461098f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4c6976656e65737347756172643a206f6e6c7920536166652063616e2063616c60448201527f6c20746869732066756e6374696f6e000000000000000000000000000000000060648201526084016102b0565b565b60006109b38373ffffffffffffffffffffffffffffffffffffffff8416610c19565b90505b92915050565b60608167ffffffffffffffff8111156109d7576109d7610e6a565b604051908082528060200260200182016040528015610a00578160200160208202803683370190505b50905060008060008060005b86811015610bcd576041818102890160208101516040820151919092015160ff16955090935091506000849003610a48578260001c9450610b83565b8360ff16600103610a5e578260001c9450610b83565b601e8460ff161115610b23576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018a9052600190605c0160405160208183030381529060405280519060200120600486610ac39190611325565b6040805160008152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610b12573d6000803e3d6000fd5b505050602060405103519450610b83565b6040805160008152602081018083528b905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610b76573d6000803e3d6000fd5b5050506020604051035194505b84868281518110610b9657610b96611194565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610bc5816111f2565b915050610a0c565b50505050509392505050565b60006109b38373ffffffffffffffffffffffffffffffffffffffff8416610c68565b60606000610c0883610d5b565b9392505050565b60006109b6825490565b6000818152600183016020526040812054610c60575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109b6565b5060006109b6565b60008181526001830160205260408120548015610d51576000610c8c600183611243565b8554909150600090610ca090600190611243565b9050818114610d05576000866000018281548110610cc057610cc0611194565b9060005260206000200154905080876000018481548110610ce357610ce3611194565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610d1657610d16611348565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109b6565b60009150506109b6565b606081600001805480602002602001604051908101604052809291908181526020018280548015610dab57602002820191906000526020600020905b815481526020019060010190808311610d97575b50505050509050919050565b6000815180845260005b81811015610ddd57602081850181015186830182015201610dc1565b81811115610def576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006109b36020830184610db7565b73ffffffffffffffffffffffffffffffffffffffff81168114610e5757600080fd5b50565b8035610e6581610e35565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610ee057610ee0610e6a565b604052919050565b600082601f830112610ef957600080fd5b813567ffffffffffffffff811115610f1357610f13610e6a565b610f4460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610e99565b818152846020838601011115610f5957600080fd5b816020850160208301376000918101602001919091529392505050565b803560028110610e6557600080fd5b60008060008060008060008060008060006101608c8e031215610fa757600080fd5b610fb08c610e5a565b9a5060208c0135995067ffffffffffffffff8060408e01351115610fd357600080fd5b610fe38e60408f01358f01610ee8565b9950610ff160608e01610f76565b985060808d0135975060a08d0135965060c08d0135955061101460e08e01610e5a565b94506110236101008e01610e5a565b9350806101208e0135111561103757600080fd5b506110498d6101208e01358e01610ee8565b91506110586101408d01610e5a565b90509295989b509295989b9093969950565b8015158114610e5757600080fd5b6000806040838503121561108b57600080fd5b82359150602083013561109d8161106a565b809150509250929050565b6000602082840312156110ba57600080fd5b8135610c0881610e35565b6000602082840312156110d757600080fd5b8151610c088161106a565b600060208083850312156110f557600080fd5b825167ffffffffffffffff8082111561110d57600080fd5b818501915085601f83011261112157600080fd5b81518181111561113357611133610e6a565b8060051b9150611144848301610e99565b818152918301840191848101908884111561115e57600080fd5b938501935b83851015611188578451925061117883610e35565b8282529385019390850190611163565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611223576112236111c3565b5060010190565b60006020828403121561123c57600080fd5b5051919050565b600082821015611255576112556111c3565b500390565b600061014073ffffffffffffffffffffffffffffffffffffffff808e1684528c60208501528160408501526112918285018d610db7565b925060028b106112ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8a60608501528960808501528860a08501528760c085015280871660e0850152505061130f61010083018573ffffffffffffffffffffffffffffffffffffffff169052565b826101208301529b9a5050505050505050505050565b600060ff821660ff84168082101561133f5761133f6111c3565b90039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c634300080f000a";

type WrappedGuardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrappedGuardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrappedGuard__factory extends ContractFactory {
  constructor(...args: WrappedGuardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    safe: string,
    overrides?: Overrides & { from?: string }
  ): Promise<WrappedGuard> {
    return super.deploy(safe, overrides || {}) as Promise<WrappedGuard>;
  }
  override getDeployTransaction(
    safe: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(safe, overrides || {});
  }
  override attach(address: string): WrappedGuard {
    return super.attach(address) as WrappedGuard;
  }
  override connect(signer: Signer): WrappedGuard__factory {
    return super.connect(signer) as WrappedGuard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrappedGuardInterface {
    return new utils.Interface(_abi) as WrappedGuardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WrappedGuard {
    return new Contract(address, _abi, signerOrProvider) as WrappedGuard;
  }
}
