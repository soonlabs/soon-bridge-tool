/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Deployer, DeployerInterface } from "../Deployer";

const _abi = [
  {
    type: "function",
    name: "IS_SCRIPT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "cfg",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract DeployConfig",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "get",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Deployment",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "addr",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAddress",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address payable",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "has",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "loadInitializedSlot",
    inputs: [
      {
        name: "_contractName",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "initialized_",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mustGetAddress",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address payable",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "newDeployments",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct Deployment[]",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "addr",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "prankDeployment",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_addr",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "save",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_deployed",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "DeploymentDoesNotExist",
    inputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "FfiFailed",
    inputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidDeployment",
    inputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
  },
] as const;

export class Deployer__factory {
  static readonly abi = _abi;
  static createInterface(): DeployerInterface {
    return new utils.Interface(_abi) as DeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Deployer {
    return new Contract(address, _abi, signerOrProvider) as Deployer;
  }
}
