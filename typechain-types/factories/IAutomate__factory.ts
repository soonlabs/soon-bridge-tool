/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IAutomate, IAutomateInterface } from "../IAutomate";

const _abi = [
  {
    type: "function",
    name: "cancelTask",
    inputs: [
      {
        name: "taskId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createTask",
    inputs: [
      {
        name: "execAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "execData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "moduleData",
        type: "tuple",
        internalType: "struct LibDataTypes.ModuleData",
        components: [
          {
            name: "modules",
            type: "uint8[]",
            internalType: "enum LibDataTypes.Module[]",
          },
          {
            name: "args",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "feeToken",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "taskId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "exec",
    inputs: [
      {
        name: "taskCreator",
        type: "address",
        internalType: "address",
      },
      {
        name: "execAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "execData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "moduleData",
        type: "tuple",
        internalType: "struct LibDataTypes.ModuleData",
        components: [
          {
            name: "modules",
            type: "uint8[]",
            internalType: "enum LibDataTypes.Module[]",
          },
          {
            name: "args",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "txFee",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "feeToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "revertOnFailure",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "exec1Balance",
    inputs: [
      {
        name: "taskCreator",
        type: "address",
        internalType: "address",
      },
      {
        name: "execAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "execData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "moduleData",
        type: "tuple",
        internalType: "struct LibDataTypes.ModuleData",
        components: [
          {
            name: "modules",
            type: "uint8[]",
            internalType: "enum LibDataTypes.Module[]",
          },
          {
            name: "args",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "oneBalanceParam",
        type: "tuple",
        internalType: "struct IGelato1Balance.Gelato1BalanceParam",
        components: [
          {
            name: "sponsor",
            type: "address",
            internalType: "address",
          },
          {
            name: "feeToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "oneBalanceChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "nativeToFeeTokenXRateNumerator",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "nativeToFeeTokenXRateDenominator",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "correlationId",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
      {
        name: "revertOnFailure",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "execBypassModule",
    inputs: [
      {
        name: "taskCreator",
        type: "address",
        internalType: "address",
      },
      {
        name: "execAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "taskId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "correlationId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "execData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "revertOnFailure",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "singleExec",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "execBypassModuleSyncFee",
    inputs: [
      {
        name: "taskCreator",
        type: "address",
        internalType: "address",
      },
      {
        name: "execAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "taskId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "txFee",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "feeToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "execData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "revertOnFailure",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "singleExec",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getFeeDetails",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTaskId",
    inputs: [
      {
        name: "taskCreator",
        type: "address",
        internalType: "address",
      },
      {
        name: "execAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "execSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "moduleData",
        type: "tuple",
        internalType: "struct LibDataTypes.ModuleData",
        components: [
          {
            name: "modules",
            type: "uint8[]",
            internalType: "enum LibDataTypes.Module[]",
          },
          {
            name: "args",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
      {
        name: "feeToken",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "taskId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "getTaskIdsByUser",
    inputs: [
      {
        name: "taskCreator",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setModule",
    inputs: [
      {
        name: "modules",
        type: "uint8[]",
        internalType: "enum LibDataTypes.Module[]",
      },
      {
        name: "moduleAddresses",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "LogUseGelato1Balance",
    inputs: [
      {
        name: "sponsor",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "target",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "feeToken",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "oneBalanceChainId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "nativeToFeeTokenXRateNumerator",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "nativeToFeeTokenXRateDenominator",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "correlationId",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
] as const;

export class IAutomate__factory {
  static readonly abi = _abi;
  static createInterface(): IAutomateInterface {
    return new utils.Interface(_abi) as IAutomateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAutomate {
    return new Contract(address, _abi, signerOrProvider) as IAutomate;
  }
}
