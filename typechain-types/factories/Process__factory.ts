/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Process, ProcessInterface } from "../Process";

const _abi = [
  {
    type: "error",
    name: "FfiFailed",
    inputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
  },
] as const;

const _bytecode =
  "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080f000a";

type ProcessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProcessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Process__factory extends ContractFactory {
  constructor(...args: ProcessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Process> {
    return super.deploy(overrides || {}) as Promise<Process>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Process {
    return super.attach(address) as Process;
  }
  override connect(signer: Signer): Process__factory {
    return super.connect(signer) as Process__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProcessInterface {
    return new utils.Interface(_abi) as ProcessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Process {
    return new Contract(address, _abi, signerOrProvider) as Process;
  }
}
