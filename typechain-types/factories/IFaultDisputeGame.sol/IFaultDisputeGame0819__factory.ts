/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IFaultDisputeGame0819,
  IFaultDisputeGame0819Interface,
} from "../../IFaultDisputeGame.sol/IFaultDisputeGame0819";

const _abi = [
  {
    type: "function",
    name: "addLocalData",
    inputs: [
      {
        name: "_ident",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_execLeafIdx",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_partOffset",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "attack",
    inputs: [
      {
        name: "_disputed",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "_parentIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_claim",
        type: "bytes32",
        internalType: "Claim",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "createdAt",
    inputs: [],
    outputs: [
      {
        name: "createdAt_",
        type: "uint64",
        internalType: "Timestamp",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "defend",
    inputs: [
      {
        name: "_disputed",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "_parentIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_claim",
        type: "bytes32",
        internalType: "Claim",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "extraData",
    inputs: [],
    outputs: [
      {
        name: "extraData_",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "gameCreator",
    inputs: [],
    outputs: [
      {
        name: "creator_",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "gameData",
    inputs: [],
    outputs: [
      {
        name: "gameType_",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "rootClaim_",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "extraData_",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gameType",
    inputs: [],
    outputs: [
      {
        name: "gameType_",
        type: "uint32",
        internalType: "GameType",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getNumToResolve",
    inputs: [
      {
        name: "_claimIndex",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "numRemainingChildren_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "l1Head",
    inputs: [],
    outputs: [
      {
        name: "l1Head_",
        type: "bytes32",
        internalType: "Hash",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "l2BlockNumber",
    inputs: [],
    outputs: [
      {
        name: "l2BlockNumber_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "resolve",
    inputs: [],
    outputs: [
      {
        name: "status_",
        type: "uint8",
        internalType: "enum GameStatus",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "resolveClaim",
    inputs: [
      {
        name: "_claimIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_numToResolve",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "resolvedAt",
    inputs: [],
    outputs: [
      {
        name: "resolvedAt_",
        type: "uint64",
        internalType: "Timestamp",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rootClaim",
    inputs: [],
    outputs: [
      {
        name: "rootClaim_",
        type: "bytes32",
        internalType: "Claim",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "startingBlockNumber",
    inputs: [],
    outputs: [
      {
        name: "startingBlockNumber_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "startingOutputRoot",
    inputs: [],
    outputs: [
      {
        name: "startingRoot_",
        type: "bytes32",
        internalType: "Hash",
      },
      {
        name: "l2BlockNumber_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "startingRootHash",
    inputs: [],
    outputs: [
      {
        name: "startingRootHash_",
        type: "bytes32",
        internalType: "Hash",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "status",
    inputs: [],
    outputs: [
      {
        name: "status_",
        type: "uint8",
        internalType: "enum GameStatus",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "step",
    inputs: [
      {
        name: "_claimIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_isAttack",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "_stateData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_proof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Move",
    inputs: [
      {
        name: "parentIndex",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "claim",
        type: "bytes32",
        indexed: true,
        internalType: "Claim",
      },
      {
        name: "claimant",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Resolved",
    inputs: [
      {
        name: "status",
        type: "uint8",
        indexed: true,
        internalType: "enum GameStatus",
      },
    ],
    anonymous: false,
  },
] as const;

export class IFaultDisputeGame0819__factory {
  static readonly abi = _abi;
  static createInterface(): IFaultDisputeGame0819Interface {
    return new utils.Interface(_abi) as IFaultDisputeGame0819Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IFaultDisputeGame0819 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IFaultDisputeGame0819;
  }
}
