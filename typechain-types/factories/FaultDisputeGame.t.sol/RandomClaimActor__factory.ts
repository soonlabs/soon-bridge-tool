/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RandomClaimActor,
  RandomClaimActorInterface,
} from "../../FaultDisputeGame.t.sol/RandomClaimActor";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_gameProxy",
        type: "address",
        internalType: "contract FaultDisputeGame",
      },
      {
        name: "_vm",
        type: "address",
        internalType: "contract Vm",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "move",
    inputs: [
      {
        name: "_isAttack",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "_parentIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_claim",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "_bondAmount",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "totalBonded",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516109f53803806109f583398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a05161092b6100ca6000396000610151015260008181607e0152818161021401526102f3015261092b6000f3fe60806040526004361061002a5760003560e01c806344d96e95146100335780637cad91181461005b57005b3661003157005b005b34801561003f57600080fd5b5061004960005481565b60405190815260200160405180910390f35b34801561006757600080fd5b506100316100763660046106ba565b6101108360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638980e0cc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010b9190610716565b610367565b6040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815230600482015267ffffffffffffffff831660248201529093507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c88a5e6d90604401600060405180830381600087803b1580156101aa57600080fd5b505af11580156101be573d6000803e3d6000fd5b505050508067ffffffffffffffff166000808282546101dd919061075e565b90915550506040517fc6f0308c000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c6f0308c9060240160e060405180830381865afa158015610270573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029491906107bd565b50506040517f6f03440900000000000000000000000000000000000000000000000000000000815260048101829052602481018a9052604481018990528a1515606482015290955073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169450636f034409935067ffffffffffffffff8716925060840190506000604051808303818588803b15801561034757600080fd5b505af115801561035b573d6000803e3d6000fd5b50505050505050505050565b60006103748484846103bc565b90506103b56040518060400160405280600c81526020017f426f756e6420726573756c740000000000000000000000000000000000000000815250826105f8565b9392505050565b600081831115610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156104625750818411155b1561046e5750826103b5565b600061047a8484610851565b61048590600161075e565b90506003851115801561049757508481115b156104ae576104a6858561075e565b9150506103b5565b6104d960037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610851565b8510158015610510575061050d857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610851565b81115b156105495761053f857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610851565b6104a69084610851565b8285111561059f57600061055d8487610851565b9050600061056b8383610868565b905080600003610580578493505050506103b5565b600161058c828861075e565b6105969190610851565b935050506105f0565b838510156105f05760006105b38686610851565b905060006105c18383610868565b9050806000036105d6578593505050506103b5565b6105e08186610851565b6105eb90600161075e565b935050505b509392505050565b610689828260405160240161060e9291906108a3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc0000000000000000000000000000000000000000000000000000000017905261068d565b5050565b61069681610699565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080600080608085870312156106d057600080fd5b843580151581146106e057600080fd5b93506020850135925060408501359150606085013567ffffffffffffffff8116811461070b57600080fd5b939692955090935050565b60006020828403121561072857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156107715761077161072f565b500190565b805173ffffffffffffffffffffffffffffffffffffffff8116811461079a57600080fd5b919050565b6fffffffffffffffffffffffffffffffff8116811461069657600080fd5b600080600080600080600060e0888a0312156107d857600080fd5b875163ffffffff811681146107ec57600080fd5b96506107fa60208901610776565b955061080860408901610776565b945060608801516108188161079f565b608089015160a08a015191955093506108308161079f565b60c08901519092506108418161079f565b8091505092959891949750929550565b6000828210156108635761086361072f565b500390565b60008261089e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b604081526000835180604084015260005b818110156108d157602081870181015160608684010152016108b4565b818111156108e3576000606083860101525b50602083019390935250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160160600191905056fea164736f6c634300080f000a";

type RandomClaimActorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomClaimActorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomClaimActor__factory extends ContractFactory {
  constructor(...args: RandomClaimActorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gameProxy: string,
    _vm: string,
    overrides?: Overrides & { from?: string }
  ): Promise<RandomClaimActor> {
    return super.deploy(
      _gameProxy,
      _vm,
      overrides || {}
    ) as Promise<RandomClaimActor>;
  }
  override getDeployTransaction(
    _gameProxy: string,
    _vm: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameProxy, _vm, overrides || {});
  }
  override attach(address: string): RandomClaimActor {
    return super.attach(address) as RandomClaimActor;
  }
  override connect(signer: Signer): RandomClaimActor__factory {
    return super.connect(signer) as RandomClaimActor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomClaimActorInterface {
    return new utils.Interface(_abi) as RandomClaimActorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomClaimActor {
    return new Contract(address, _abi, signerOrProvider) as RandomClaimActor;
  }
}
