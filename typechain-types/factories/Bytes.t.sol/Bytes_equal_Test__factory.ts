/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Bytes_equal_Test,
  Bytes_equal_TestInterface,
} from "../../Bytes.t.sol/Bytes_equal_Test";

const _abi = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testDiff_equal_works",
    inputs: [
      {
        name: "_a",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_b",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testFuzz_equal_notEqual_works",
    inputs: [
      {
        name: "_a",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_b",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x6080604052600c8054600160ff199182168117909255601e8054909116909117905534801561002d57600080fd5b5061108a8061003d6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806385226c811161008c578063b673e25811610066578063b673e25814610176578063ba414fa614610189578063e20c9f71146101a1578063fa7626d4146101a957600080fd5b806385226c8114610151578063916a17c614610166578063b5508aa91461016e57600080fd5b80633f7286f4116100bd5780633f7286f41461011f57806357c028101461012757806366d9a9a01461013c57600080fd5b80631ed7831c146100e45780632ade3880146101025780633e5e3c2314610117575b600080fd5b6100ec6101b6565b6040516100f99190610b48565b60405180910390f35b61010a610225565b6040516100f99190610ba2565b6100ec610374565b6100ec6103e1565b61013a610135366004610de0565b61044e565b005b61014461048b565b6040516100f99190610e44565b610159610593565b6040516100f99190610f3a565b610144610663565b61015961076b565b61013a610184366004610de0565b61083b565b6101916108fe565b60405190151581526020016100f9565b6100ec6109d2565b601e546101919060ff1681565b6060601680548060200260200160405190810160405280929190818152602001828054801561021b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101f0575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020016000905b8282101561036b576000848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b828210156103545783829060005260206000200180546102c790611011565b80601f01602080910402602001604051908101604052809291908181526020018280546102f390611011565b80156103405780601f1061031557610100808354040283529160200191610340565b820191906000526020600020905b81548152906001019060200180831161032357829003601f168201915b5050505050815260200190600101906102a8565b505050508152505081526020019060010190610249565b50505050905090565b6060601880548060200260200160405190810160405280929190818152602001828054801561021b5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101f0575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801561021b5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101f0575050505050905090565b61048761046c83838051602091820120825192909101919091201490565b82518451602080860183902090870182902014911416610a3f565b5050565b6060601b805480602002602001604051908101604052809291908181526020016000905b8282101561036b57600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561057b57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116105285790505b505050505081525050815260200190600101906104af565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561036b5783829060005260206000200180546105d690611011565b80601f016020809104026020016040519081016040528092919081815260200182805461060290611011565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b5050505050815260200190600101906105b7565b6060601c805480602002602001604051908101604052809291908181526020016000905b8282101561036b57600084815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561075357602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116107005790505b50505050508152505081526020019060010190610687565b60606019805480602002602001604051908101604052809291908181526020016000905b8282101561036b5783829060005260206000200180546107ae90611011565b80601f01602080910402602001604051908101604052809291908181526020018280546107da90611011565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b50505050508152602001906001019061078f565b737109709ecfa91a80626ff3989d68f67f5b1dd12d634c63e562610875848480518251602092830182902092909301839020921491141690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681529015600482015260240160006040518083038186803b1580156108c357600080fd5b505afa1580156108d7573d6000803e3d6000fd5b505050506104876108f983838051602091820120825192909101919091201490565b610ac8565b60085460009060ff1615610916575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c65640000000000000000000000000000000000000000000000000000602483015260009163667f9d7090604401602060405180830381865afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb9190611064565b1415905090565b6060601580548060200260200160405190810160405280929190818152602001828054801561021b5760200282019190600052602060002090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101f0575050505050905090565b6040517ff7fe347700000000000000000000000000000000000000000000000000000000815282151560048201528115156024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f7fe34779060440160006040518083038186803b158015610aac57600080fd5b505afa158015610ac0573d6000803e3d6000fd5b505050505050565b6040517fa59828850000000000000000000000000000000000000000000000000000000081528115156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a59828859060240160006040518083038186803b158015610b2d57600080fd5b505afa158015610b41573d6000803e3d6000fd5b5050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b9657835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610b64565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610cf8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08984030185528151805173ffffffffffffffffffffffffffffffffffffffff1684528701518784018790528051878501819052908801906060600582901b86018101919086019060005b81811015610ce2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08885030183528451805180865260005b81811015610c93578e81840101518f82890101528e81019050610c75565b81811115610ca45760008f83890101525b50958d0195601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016949094018c019350918b0191600101610c3c565b5050509588019593505090860190600101610bc9565b509098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610d4657600080fd5b813567ffffffffffffffff80821115610d6157610d61610d06565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610da757610da7610d06565b81604052838152866020858801011115610dc057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215610df357600080fd5b823567ffffffffffffffff80821115610e0b57600080fd5b610e1786838701610d35565b93506020850135915080821115610e2d57600080fd5b50610e3a85828601610d35565b9150509250929050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015610f2b578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00186528251805173ffffffffffffffffffffffffffffffffffffffff168552880151888501889052805188860181905290890190839060608701905b80831015610f165783517fffffffff00000000000000000000000000000000000000000000000000000000168252928b019260019290920191908b0190610ed4565b50978a01979550505091870191600101610e6c565b50919998505050505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015611003577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089870301855282518051808852835b81811015610fb5578281018a01518982018b01528901610f9a565b81811115610fc557848a838b0101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01696909601870195509386019391860191600101610f62565b509398975050505050505050565b600181811c9082168061102557607f821691505b60208210810361105e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561107657600080fd5b505191905056fea164736f6c634300080f000a";

type Bytes_equal_TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bytes_equal_TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes_equal_Test__factory extends ContractFactory {
  constructor(...args: Bytes_equal_TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Bytes_equal_Test> {
    return super.deploy(overrides || {}) as Promise<Bytes_equal_Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytes_equal_Test {
    return super.attach(address) as Bytes_equal_Test;
  }
  override connect(signer: Signer): Bytes_equal_Test__factory {
    return super.connect(signer) as Bytes_equal_Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bytes_equal_TestInterface {
    return new utils.Interface(_abi) as Bytes_equal_TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Bytes_equal_Test {
    return new Contract(address, _abi, signerOrProvider) as Bytes_equal_Test;
  }
}
