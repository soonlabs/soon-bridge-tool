/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ResourceMetering_User,
  ResourceMetering_UserInterface,
} from "../../ResourceMetering.t.sol/ResourceMetering_User";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "_gasToBurn",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_raiseBaseFee",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "failedLowerBaseFee",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failedMaxGasPerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failedMaxLowerBaseFeePerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failedMaxRaiseBaseFeePerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failedNeverBelowMinBaseFee",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failedRaiseBaseFee",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "params",
    inputs: [],
    outputs: [
      {
        name: "prevBaseFee",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "prevBoughtGas",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "prevBlockNum",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "resourceConfig",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct ResourceMetering.ResourceConfig",
        components: [
          {
            name: "maxResourceLimit",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "elasticityMultiplier",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "baseFeeMaxChangeDenominator",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "minimumBaseFee",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "systemTxMaxGas",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "maximumBaseFee",
            type: "uint128",
            internalType: "uint128",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "underflow",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "OutOfGas",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506200001c62000022565b62000222565b600054610100900460ff1615808015620000435750600054600160ff909116105b8062000073575062000060306200015460201b620007fa1760201c565b15801562000073575060005460ff166001145b620000dc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000100576000805461ff0019166101001790555b6200010a62000163565b801562000151576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6001600160a01b03163b151590565b600054610100900460ff16620001d05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620000d3565b600154600160c01b90046001600160401b0316600003620002205760408051606081018252633b9aca0080825260006020830152436001600160401b031691909201819052600160c01b02176001555b565b61198b80620002326000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b85f9baa11610076578063cff0ab961161005b578063cff0ab96146101c0578063dc75bec714610254578063e41240231461026b57600080fd5b8063b85f9baa14610136578063cc731b021461014857600080fd5b806364b4b132116100a757806364b4b132146100ff5780638e4b49b31461010c5780639fac68cb1461012157600080fd5b80631bebff09146100c35780634759c2fb146100ec575b600080fd5b6032546100d7906301000000900460ff1681565b60405190151581526020015b60405180910390f35b6032546100d79062010000900460ff1681565b6032546100d79060ff1681565b6032546100d790640100000000900460ff1681565b61013461012f36600461156c565b610281565b005b6032546100d790610100900460ff1681565b6101506107bb565b6040516100e39190600060c08201905063ffffffff80845116835260ff602085015116602084015260ff6040850151166040840152806060850151166060840152806080850151166080840152506fffffffffffffffffffffffffffffffff60a08401511660a083015292915050565b60015461021b906fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845267ffffffffffffffff92831660208501529116908201526060016100e3565b6032546100d7906601000000000000900460ff1681565b6032546100d79065010000000000900460ff1681565b6001546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041660006102df6107bb565b90506000816020015160ff16826000015163ffffffff1661030091906115ff565b9050816060015163ffffffff1685101561034357603280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663010000001790555b815163ffffffff1684111561037e57603280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b600086156103a25761039b8883856000015163ffffffff16610816565b90506103b1565b6103ae88600084610816565b90505b6103ba8161086b565b6000836040015160ff16876103cf91906115ff565b90508286118015610413575060015461040f9086907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16611613565b6001145b156104e757603254610100900460ff168061044257506001546fffffffffffffffffffffffffffffffff168710155b60328054911515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9092169190911790819055640100000000900460ff16806104ae575060015481906104ac9089906fffffffffffffffffffffffffffffffff16611613565b105b60328054911515640100000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff9092169190911790555b828610806105275750600180546105259087907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16611613565b115b156107b05760325462010000900460ff168061055657506001546fffffffffffffffffffffffffffffffff1687105b6032805491151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff9092169190911790556001546105c190869067ffffffffffffffff780100000000000000000000000000000000000000000000000090910416611613565b60010361063f5760325465010000000000900460ff1680610601575060015481906105fe906fffffffffffffffffffffffffffffffff1689611613565b11155b6032805491151565010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff9092169190911790556107b0565b600180546106749087907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16611613565b11156107b05760408401516001546106e5916106be918a9160ff16907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16899003610880565b856060015163ffffffff168660a001516fffffffffffffffffffffffffffffffff166108dd565b60325490880391506601000000000000900460ff168061070457508681115b603280549115156601000000000000027fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff909216919091179081905565010000000000900460ff168061077657506001548190610773906fffffffffffffffffffffffffffffffff1689611613565b11155b6032805491151565010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff9092169190911790555b505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526107f56108f2565b905090565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60006108238484846109ad565b90506108646040518060400160405280600c81526020017f426f756e6420726573756c74000000000000000000000000000000000000000081525082610bea565b9392505050565b8060005a905061087b8282610c7f565b505050565b6000670de0b6b3a76400006108c1610898858361162a565b6108aa90670de0b6b3a7640000611692565b6108bc85670de0b6b3a7640000611706565b610f56565b6108cb9086611706565b6108d5919061162a565b949350505050565b60006108d56108ec8585610f87565b83610f9e565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052906109a76040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526301312d008152600a6020820152600891810191909152633b9aca006060820152620f424060808201526fffffffffffffffffffffffffffffffff60a082015290565b92915050565b600081831115610a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e000060648201526084015b60405180910390fd5b828410158015610a545750818411155b15610a60575082610864565b6000610a6c8484611613565b610a779060016117c2565b905060038511158015610a8957508481115b15610aa057610a9885856117c2565b915050610864565b610acb60037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611613565b8510158015610b025750610aff857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611613565b81115b15610b3b57610b31857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611613565b610a989084611613565b82851115610b91576000610b4f8487611613565b90506000610b5d83836117da565b905080600003610b7257849350505050610864565b6001610b7e82886117c2565b610b889190611613565b93505050610be2565b83851015610be2576000610ba58686611613565b90506000610bb383836117da565b905080600003610bc857859350505050610864565b610bd28186611613565b610bdd9060016117c2565b935050505b509392505050565b610c7b8282604051602401610c009291906117ee565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052610fad565b5050565b600154600090610cb5907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1643611613565b90506000610cc16108f2565b90506000816020015160ff16826000015163ffffffff16610ce2919061162a565b90508215610e1957600154600090610d19908390700100000000000000000000000000000000900467ffffffffffffffff16611692565b90506000836040015160ff1683610d309190611706565b600154610d509084906fffffffffffffffffffffffffffffffff16611706565b610d5a919061162a565b600154909150600090610dab90610d849084906fffffffffffffffffffffffffffffffff16611869565b866060015163ffffffff168760a001516fffffffffffffffffffffffffffffffff166108dd565b90506001861115610dda57610dd7610d8482876040015160ff1660018a610dd29190611613565b610880565b90505b6fffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000067ffffffffffffffff4316021760015550505b60018054869190601090610e4c908490700100000000000000000000000000000000900467ffffffffffffffff166118dd565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816000015163ffffffff16600160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff161315610ed9576040517f77ebef4d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154600090610f05906fffffffffffffffffffffffffffffffff1667ffffffffffffffff8816611909565b90506000610f1748633b9aca00610fb9565b610f2190836115ff565b905060005a610f309088611613565b905080821115610f4c57610f4c610f478284611613565b610fc9565b5050505050505050565b6000610864670de0b6b3a764000083610f6e86610ff2565b610f789190611706565b610f82919061162a565b611236565b600081831215610f975781610864565b5090919050565b6000818312610f975781610864565b610fb681611475565b50565b600081831015610f975781610864565b6000805a90505b825a610fdc9083611613565b101561087b57610feb82611946565b9150610fd0565b600080821361105d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e454400000000000000000000000000000000000000000000006044820152606401610a3b565b6000606061106a84611496565b03609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc9018302821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f01830290911d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f832019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c1821361126757506000919050565b680755bf798b4a1bf1e582126112d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4558505f4f564552464c4f5700000000000000000000000000000000000000006044820152606401610a3b565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093037fffffffffffffffffffffffffffffffffffffffdbf3ccf1604d263450f02a550481018102606090811d6d0277594991cfc85f6e2461837cd9018202811d7fffffffffffffffffffffffffffffffffffffe5adedaa1cb095af9e4da10e363c018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d7ffffffffffffffffffffffffffffffffffffd38dc772608b0ae56cce01296c0eb018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084017ffffffffffffffffffffffffffffffffffffffe2c69812cf03b0763fd454a8f7e010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000808211611501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e454400000000000000000000000000000000000000000000006044820152606401610a3b565b5060016fffffffffffffffffffffffffffffffff821160071b82811c67ffffffffffffffff1060061b1782811c63ffffffff1060051b1782811c61ffff1060041b1782811c60ff10600390811b90911783811c600f1060021b1783811c909110821b1791821c111790565b6000806040838503121561157f57600080fd5b823591506020830135801515811461159657600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008261160e5761160e6115a1565b500490565b600082821015611625576116256115d0565b500390565b600082611639576116396115a1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561168d5761168d6115d0565b500590565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156116cc576116cc6115d0565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615611700576117006115d0565b50500390565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600084136000841385830485118282161615611747576117476115d0565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615611782576117826115d0565b6000871292508782058712848416161561179e5761179e6115d0565b878505871281841616156117b4576117b46115d0565b505050929093029392505050565b600082198211156117d5576117d56115d0565b500190565b6000826117e9576117e96115a1565b500690565b604081526000835180604084015260005b8181101561181c57602081870181015160608684010152016117ff565b8181111561182e576000606083860101525b50602083019390935250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156118a3576118a36115d0565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156118d7576118d76115d0565b50500190565b600067ffffffffffffffff808316818516808303821115611900576119006115d0565b01949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611941576119416115d0565b500290565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611977576119776115d0565b506001019056fea164736f6c634300080f000a";

type ResourceMetering_UserConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ResourceMetering_UserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ResourceMetering_User__factory extends ContractFactory {
  constructor(...args: ResourceMetering_UserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ResourceMetering_User> {
    return super.deploy(overrides || {}) as Promise<ResourceMetering_User>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ResourceMetering_User {
    return super.attach(address) as ResourceMetering_User;
  }
  override connect(signer: Signer): ResourceMetering_User__factory {
    return super.connect(signer) as ResourceMetering_User__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ResourceMetering_UserInterface {
    return new utils.Interface(_abi) as ResourceMetering_UserInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ResourceMetering_User {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ResourceMetering_User;
  }
}
