/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TransientReentrancyAware,
  TransientReentrancyAwareInterface,
} from "../../TransientContext.sol/TransientReentrancyAware";

const _abi = [
  {
    type: "error",
    name: "NotEntered",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrantCall",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b50601580601a5f395ff3fe60806040525f80fdfea164736f6c6343000819000a";

type TransientReentrancyAwareConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransientReentrancyAwareConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransientReentrancyAware__factory extends ContractFactory {
  constructor(...args: TransientReentrancyAwareConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TransientReentrancyAware> {
    return super.deploy(overrides || {}) as Promise<TransientReentrancyAware>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TransientReentrancyAware {
    return super.attach(address) as TransientReentrancyAware;
  }
  override connect(signer: Signer): TransientReentrancyAware__factory {
    return super.connect(signer) as TransientReentrancyAware__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransientReentrancyAwareInterface {
    return new utils.Interface(_abi) as TransientReentrancyAwareInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransientReentrancyAware {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TransientReentrancyAware;
  }
}
