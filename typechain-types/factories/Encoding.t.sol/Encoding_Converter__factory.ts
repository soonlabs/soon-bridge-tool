/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Encoding_Converter,
  Encoding_ConverterInterface,
} from "../../Encoding.t.sol/Encoding_Converter";

const _abi = [
  {
    type: "function",
    name: "convertRoundTripAToB",
    inputs: [
      {
        name: "_nonce",
        type: "uint240",
        internalType: "uint240",
      },
      {
        name: "_version",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "convertRoundTripBToA",
    inputs: [
      {
        name: "_versionedNonce",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "failedRoundtripAToB",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failedRoundtripBToA",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610243806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806354c03f25146100515780635e35523914610072578063871c9fbc14610084578063fac49bd514610099575b600080fd5b60005461005e9060ff1681565b604051901515815260200160405180910390f35b60005461005e90610100900460ff1681565b6100976100923660046101ba565b6100ac565b005b6100976100a73660046101d3565b610131565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660f082901c7fffff0000000000000000000000000000000000000000000000000000000000008316821780841461012b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b50505050565b600061013f838360f01b1790565b90507dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082169060f083901c9085168214158061018257508361ffff168161ffff1614155b156101b357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050505050565b6000602082840312156101cc57600080fd5b5035919050565b600080604083850312156101e657600080fd5b82357dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461021457600080fd5b9150602083013561ffff8116811461022b57600080fd5b80915050925092905056fea164736f6c634300080f000a";

type Encoding_ConverterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Encoding_ConverterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Encoding_Converter__factory extends ContractFactory {
  constructor(...args: Encoding_ConverterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Encoding_Converter> {
    return super.deploy(overrides || {}) as Promise<Encoding_Converter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Encoding_Converter {
    return super.attach(address) as Encoding_Converter;
  }
  override connect(signer: Signer): Encoding_Converter__factory {
    return super.connect(signer) as Encoding_Converter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Encoding_ConverterInterface {
    return new utils.Interface(_abi) as Encoding_ConverterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Encoding_Converter {
    return new Contract(address, _abi, signerOrProvider) as Encoding_Converter;
  }
}
