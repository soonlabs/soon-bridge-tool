/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Burner, BurnerInterface } from "../../Burn.sol/Burner";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "payable",
  },
] as const;

const _bytecode = "0x608060405230fffe";

type BurnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BurnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Burner__factory extends ContractFactory {
  constructor(...args: BurnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<Burner> {
    return super.deploy(overrides || {}) as Promise<Burner>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Burner {
    return super.attach(address) as Burner;
  }
  override connect(signer: Signer): Burner__factory {
    return super.connect(signer) as Burner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BurnerInterface {
    return new utils.Interface(_abi) as BurnerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Burner {
    return new Contract(address, _abi, signerOrProvider) as Burner;
  }
}
