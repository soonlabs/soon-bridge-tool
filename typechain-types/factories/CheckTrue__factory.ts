/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CheckTrue, CheckTrueInterface } from "../CheckTrue";

const _abi = [
  {
    type: "function",
    name: "check",
    inputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "execute_",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x60c06040526009608090815268436865636b5472756560b81b60a05260009061002890826100da565b5034801561003557600080fd5b50610199565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006557607f821691505b60208210810361008557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d557600081815260208120601f850160051c810160208610156100b25750805b601f850160051c820191505b818110156100d1578281556001016100be565b5050505b505050565b81516001600160401b038111156100f3576100f361003b565b610107816101018454610051565b8461008b565b602080601f83116001811461013c57600084156101245750858301515b600019600386901b1c1916600185901b1785556100d1565b600085815260208120601f198616915b8281101561016b5788860151825594840194600190910190840161014c565b50858210156101895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6102dc806101a86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b578063c64b3bb514610059575b600080fd5b61004361007d565b604051610050919061010b565b60405180910390f35b61006d6100673660046101ad565b50600190565b6040519015158152602001610050565b6000805461008a9061027c565b80601f01602080910402602001604051908101604052809291908181526020018280546100b69061027c565b80156101035780601f106100d857610100808354040283529160200191610103565b820191906000526020600020905b8154815290600101906020018083116100e657829003601f168201915b505050505081565b600060208083528351808285015260005b818110156101385785810183015185820160400152820161011c565b8181111561014a576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101bf57600080fd5b813567ffffffffffffffff808211156101d757600080fd5b818401915084601f8301126101eb57600080fd5b8135818111156101fd576101fd61017e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156102435761024361017e565b8160405282815287602084870101111561025c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061029057607f821691505b6020821081036102c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea164736f6c634300080f000a";

type CheckTrueConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheckTrueConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CheckTrue__factory extends ContractFactory {
  constructor(...args: CheckTrueConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CheckTrue> {
    return super.deploy(overrides || {}) as Promise<CheckTrue>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CheckTrue {
    return super.attach(address) as CheckTrue;
  }
  override connect(signer: Signer): CheckTrue__factory {
    return super.connect(signer) as CheckTrue__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckTrueInterface {
    return new utils.Interface(_abi) as CheckTrueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckTrue {
    return new Contract(address, _abi, signerOrProvider) as CheckTrue;
  }
}
