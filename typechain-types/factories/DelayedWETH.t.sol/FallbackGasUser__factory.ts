/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FallbackGasUser,
  FallbackGasUserInterface,
} from "../../DelayedWETH.t.sol/FallbackGasUser";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_gas",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "gas",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161016938038061016983398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b61010a8061005f6000396000f3fe608060405260043610601f5760003560e01c80636ca7c21614603757602e565b36602e57602c600054605d565b005b602c600054605d565b348015604257600080fd5b50604b60005481565b60405190815260200160405180910390f35b6000805a90505b825a606e908360b4565b1015608057607a8260c8565b91506064565b505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101560c35760c36085565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820360f65760f66085565b506001019056fea164736f6c634300080f000a";

type FallbackGasUserConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FallbackGasUserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FallbackGasUser__factory extends ContractFactory {
  constructor(...args: FallbackGasUserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<FallbackGasUser> {
    return super.deploy(_gas, overrides || {}) as Promise<FallbackGasUser>;
  }
  override getDeployTransaction(
    _gas: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_gas, overrides || {});
  }
  override attach(address: string): FallbackGasUser {
    return super.attach(address) as FallbackGasUser;
  }
  override connect(signer: Signer): FallbackGasUser__factory {
    return super.connect(signer) as FallbackGasUser__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FallbackGasUserInterface {
    return new utils.Interface(_abi) as FallbackGasUserInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FallbackGasUser {
    return new Contract(address, _abi, signerOrProvider) as FallbackGasUser;
  }
}
