/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FallbackReverter,
  FallbackReverterInterface,
} from "../../DelayedWETH.t.sol/FallbackReverter";

const _abi = [
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060dd8061001e6000396000f3fe608060405236606f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f46616c6c6261636b52657665727465723a20726576657274000000000000000060448201526064015b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f46616c6c6261636b52657665727465723a2072657665727400000000000000006044820152606401606656fea164736f6c634300080f000a";

type FallbackReverterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FallbackReverterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FallbackReverter__factory extends ContractFactory {
  constructor(...args: FallbackReverterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<FallbackReverter> {
    return super.deploy(overrides || {}) as Promise<FallbackReverter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FallbackReverter {
    return super.attach(address) as FallbackReverter;
  }
  override connect(signer: Signer): FallbackReverter__factory {
    return super.connect(signer) as FallbackReverter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FallbackReverterInterface {
    return new utils.Interface(_abi) as FallbackReverterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FallbackReverter {
    return new Contract(address, _abi, signerOrProvider) as FallbackReverter;
  }
}
