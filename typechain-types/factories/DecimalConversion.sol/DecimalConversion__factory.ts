/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DecimalConversion,
  DecimalConversionInterface,
} from "../../DecimalConversion.sol/DecimalConversion";

const _abi = [
  {
    type: "function",
    name: "ETH_CONVERSION_RATE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x605f6032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106032575f3560e01c8063f20287fc146036575b5f80fd5b6040633b9aca0081565b60405190815260200160405180910390f3fea164736f6c6343000819000a";

type DecimalConversionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecimalConversionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DecimalConversion__factory extends ContractFactory {
  constructor(...args: DecimalConversionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DecimalConversion> {
    return super.deploy(overrides || {}) as Promise<DecimalConversion>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DecimalConversion {
    return super.attach(address) as DecimalConversion;
  }
  override connect(signer: Signer): DecimalConversion__factory {
    return super.connect(signer) as DecimalConversion__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecimalConversionInterface {
    return new utils.Interface(_abi) as DecimalConversionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DecimalConversion {
    return new Contract(address, _abi, signerOrProvider) as DecimalConversion;
  }
}
