/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DecimalConversion0815,
  DecimalConversion0815Interface,
} from "../../DecimalConversion.sol/DecimalConversion0815";

const _abi = [
  {
    type: "function",
    name: "ETH_CONVERSION_RATE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x6061610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f20287fc146038575b600080fd5b6042633b9aca0081565b60405190815260200160405180910390f3fea164736f6c634300080f000a";

type DecimalConversion0815ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecimalConversion0815ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DecimalConversion0815__factory extends ContractFactory {
  constructor(...args: DecimalConversion0815ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<DecimalConversion0815> {
    return super.deploy(overrides || {}) as Promise<DecimalConversion0815>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DecimalConversion0815 {
    return super.attach(address) as DecimalConversion0815;
  }
  override connect(signer: Signer): DecimalConversion0815__factory {
    return super.connect(signer) as DecimalConversion0815__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecimalConversion0815Interface {
    return new utils.Interface(_abi) as DecimalConversion0815Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DecimalConversion0815 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DecimalConversion0815;
  }
}
