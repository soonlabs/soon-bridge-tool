/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IGasToken,
  IGasTokenInterface,
} from "../../GasPayingToken.sol/IGasToken";

const _abi = [
  {
    type: "function",
    name: "gasPayingToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gasPayingTokenName",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gasPayingTokenSymbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isCustomGasToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

export class IGasToken__factory {
  static readonly abi = _abi;
  static createInterface(): IGasTokenInterface {
    return new utils.Interface(_abi) as IGasTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGasToken {
    return new Contract(address, _abi, signerOrProvider) as IGasToken;
  }
}
