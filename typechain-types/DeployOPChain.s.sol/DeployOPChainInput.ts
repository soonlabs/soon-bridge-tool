/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DeployOPChainInput {
  export type RolesStruct = {
    opChainProxyAdminOwner: string;
    systemConfigOwner: string;
    batcher: string;
    unsafeBlockSigner: string;
    proposer: string;
    challenger: string;
  };

  export type RolesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    opChainProxyAdminOwner: string;
    systemConfigOwner: string;
    batcher: string;
    unsafeBlockSigner: string;
    proposer: string;
    challenger: string;
  };

  export type InputStruct = {
    roles: DeployOPChainInput.RolesStruct;
    basefeeScalar: BigNumberish;
    blobBaseFeeScalar: BigNumberish;
    l2ChainId: BigNumberish;
  };

  export type InputStructOutput = [
    DeployOPChainInput.RolesStructOutput,
    number,
    number,
    BigNumber
  ] & {
    roles: DeployOPChainInput.RolesStructOutput;
    basefeeScalar: number;
    blobBaseFeeScalar: number;
    l2ChainId: BigNumber;
  };
}

export interface DeployOPChainInputInterface extends utils.Interface {
  functions: {
    "basefeeScalar()": FunctionFragment;
    "batcher()": FunctionFragment;
    "blobBaseFeeScalar()": FunctionFragment;
    "challenger()": FunctionFragment;
    "input()": FunctionFragment;
    "inputSet()": FunctionFragment;
    "l2ChainId()": FunctionFragment;
    "loadInput(((address,address,address,address,address,address),uint32,uint32,uint256))": FunctionFragment;
    "loadInputFile(string)": FunctionFragment;
    "opChainProxyAdminOwner()": FunctionFragment;
    "proposer()": FunctionFragment;
    "systemConfigOwner()": FunctionFragment;
    "unsafeBlockSigner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "basefeeScalar"
      | "batcher"
      | "blobBaseFeeScalar"
      | "challenger"
      | "input"
      | "inputSet"
      | "l2ChainId"
      | "loadInput"
      | "loadInputFile"
      | "opChainProxyAdminOwner"
      | "proposer"
      | "systemConfigOwner"
      | "unsafeBlockSigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "basefeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "batcher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blobBaseFeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challenger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "input", values?: undefined): string;
  encodeFunctionData(functionFragment: "inputSet", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2ChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "loadInput",
    values: [DeployOPChainInput.InputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "loadInputFile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "opChainProxyAdminOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "systemConfigOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeBlockSigner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "basefeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batcher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blobBaseFeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "input", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inputSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2ChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loadInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loadInputFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opChainProxyAdminOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeBlockSigner",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DeployOPChainInput extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployOPChainInputInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    basefeeScalar(overrides?: CallOverrides): Promise<[number]>;

    batcher(overrides?: CallOverrides): Promise<[string]>;

    blobBaseFeeScalar(overrides?: CallOverrides): Promise<[number]>;

    challenger(overrides?: CallOverrides): Promise<[string]>;

    input(
      overrides?: CallOverrides
    ): Promise<[DeployOPChainInput.InputStructOutput]>;

    inputSet(overrides?: CallOverrides): Promise<[boolean]>;

    l2ChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    loadInput(
      _input: DeployOPChainInput.InputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    loadInputFile(
      _infile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    opChainProxyAdminOwner(overrides?: CallOverrides): Promise<[string]>;

    proposer(overrides?: CallOverrides): Promise<[string]>;

    systemConfigOwner(overrides?: CallOverrides): Promise<[string]>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<[string]>;
  };

  basefeeScalar(overrides?: CallOverrides): Promise<number>;

  batcher(overrides?: CallOverrides): Promise<string>;

  blobBaseFeeScalar(overrides?: CallOverrides): Promise<number>;

  challenger(overrides?: CallOverrides): Promise<string>;

  input(
    overrides?: CallOverrides
  ): Promise<DeployOPChainInput.InputStructOutput>;

  inputSet(overrides?: CallOverrides): Promise<boolean>;

  l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

  loadInput(
    _input: DeployOPChainInput.InputStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  loadInputFile(
    _infile: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  opChainProxyAdminOwner(overrides?: CallOverrides): Promise<string>;

  proposer(overrides?: CallOverrides): Promise<string>;

  systemConfigOwner(overrides?: CallOverrides): Promise<string>;

  unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    basefeeScalar(overrides?: CallOverrides): Promise<number>;

    batcher(overrides?: CallOverrides): Promise<string>;

    blobBaseFeeScalar(overrides?: CallOverrides): Promise<number>;

    challenger(overrides?: CallOverrides): Promise<string>;

    input(
      overrides?: CallOverrides
    ): Promise<DeployOPChainInput.InputStructOutput>;

    inputSet(overrides?: CallOverrides): Promise<boolean>;

    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    loadInput(
      _input: DeployOPChainInput.InputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    loadInputFile(_infile: string, overrides?: CallOverrides): Promise<void>;

    opChainProxyAdminOwner(overrides?: CallOverrides): Promise<string>;

    proposer(overrides?: CallOverrides): Promise<string>;

    systemConfigOwner(overrides?: CallOverrides): Promise<string>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    basefeeScalar(overrides?: CallOverrides): Promise<BigNumber>;

    batcher(overrides?: CallOverrides): Promise<BigNumber>;

    blobBaseFeeScalar(overrides?: CallOverrides): Promise<BigNumber>;

    challenger(overrides?: CallOverrides): Promise<BigNumber>;

    input(overrides?: CallOverrides): Promise<BigNumber>;

    inputSet(overrides?: CallOverrides): Promise<BigNumber>;

    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    loadInput(
      _input: DeployOPChainInput.InputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    loadInputFile(
      _infile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    opChainProxyAdminOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proposer(overrides?: CallOverrides): Promise<BigNumber>;

    systemConfigOwner(overrides?: CallOverrides): Promise<BigNumber>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    basefeeScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blobBaseFeeScalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    input(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inputSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2ChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loadInput(
      _input: DeployOPChainInput.InputStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    loadInputFile(
      _infile: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    opChainProxyAdminOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    systemConfigOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unsafeBlockSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
