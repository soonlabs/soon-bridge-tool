/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DeployOPChainOutput {
  export type OutputStruct = {
    opChainProxyAdmin: string;
    addressManager: string;
    l1ERC721BridgeProxy: string;
    systemConfigProxy: string;
    optimismMintableERC20FactoryProxy: string;
    l1StandardBridgeProxy: string;
    l1CrossDomainMessengerProxy: string;
    optimismPortalProxy: string;
    disputeGameFactoryProxy: string;
    disputeGameFactoryImpl: string;
    anchorStateRegistryProxy: string;
    anchorStateRegistryImpl: string;
    faultDisputeGame: string;
    permissionedDisputeGame: string;
    delayedWETHPermissionedGameProxy: string;
    delayedWETHPermissionlessGameProxy: string;
  };

  export type OutputStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    opChainProxyAdmin: string;
    addressManager: string;
    l1ERC721BridgeProxy: string;
    systemConfigProxy: string;
    optimismMintableERC20FactoryProxy: string;
    l1StandardBridgeProxy: string;
    l1CrossDomainMessengerProxy: string;
    optimismPortalProxy: string;
    disputeGameFactoryProxy: string;
    disputeGameFactoryImpl: string;
    anchorStateRegistryProxy: string;
    anchorStateRegistryImpl: string;
    faultDisputeGame: string;
    permissionedDisputeGame: string;
    delayedWETHPermissionedGameProxy: string;
    delayedWETHPermissionlessGameProxy: string;
  };
}

export interface DeployOPChainOutputInterface extends utils.Interface {
  functions: {
    "addressManager()": FunctionFragment;
    "anchorStateRegistryImpl()": FunctionFragment;
    "anchorStateRegistryProxy()": FunctionFragment;
    "checkOutput()": FunctionFragment;
    "delayedWETHPermissionedGameProxy()": FunctionFragment;
    "delayedWETHPermissionlessGameProxy()": FunctionFragment;
    "disputeGameFactoryImpl()": FunctionFragment;
    "disputeGameFactoryProxy()": FunctionFragment;
    "faultDisputeGame()": FunctionFragment;
    "l1CrossDomainMessengerProxy()": FunctionFragment;
    "l1ERC721BridgeProxy()": FunctionFragment;
    "l1StandardBridgeProxy()": FunctionFragment;
    "opChainProxyAdmin()": FunctionFragment;
    "optimismMintableERC20FactoryProxy()": FunctionFragment;
    "optimismPortalProxy()": FunctionFragment;
    "output()": FunctionFragment;
    "permissionedDisputeGame()": FunctionFragment;
    "set(bytes4,address)": FunctionFragment;
    "systemConfigProxy()": FunctionFragment;
    "writeOutputFile(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressManager"
      | "anchorStateRegistryImpl"
      | "anchorStateRegistryProxy"
      | "checkOutput"
      | "delayedWETHPermissionedGameProxy"
      | "delayedWETHPermissionlessGameProxy"
      | "disputeGameFactoryImpl"
      | "disputeGameFactoryProxy"
      | "faultDisputeGame"
      | "l1CrossDomainMessengerProxy"
      | "l1ERC721BridgeProxy"
      | "l1StandardBridgeProxy"
      | "opChainProxyAdmin"
      | "optimismMintableERC20FactoryProxy"
      | "optimismPortalProxy"
      | "output"
      | "permissionedDisputeGame"
      | "set"
      | "systemConfigProxy"
      | "writeOutputFile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "anchorStateRegistryImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "anchorStateRegistryProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkOutput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedWETHPermissionedGameProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayedWETHPermissionlessGameProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFactoryImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFactoryProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "faultDisputeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1CrossDomainMessengerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1ERC721BridgeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1StandardBridgeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "opChainProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismMintableERC20FactoryProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismPortalProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "output", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissionedDisputeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "systemConfigProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "writeOutputFile",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorStateRegistryImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorStateRegistryProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedWETHPermissionedGameProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayedWETHPermissionlessGameProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFactoryImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFactoryProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "faultDisputeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessengerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ERC721BridgeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1StandardBridgeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opChainProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismMintableERC20FactoryProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismPortalProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "output", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionedDisputeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "systemConfigProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeOutputFile",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DeployOPChainOutput extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeployOPChainOutputInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressManager(overrides?: CallOverrides): Promise<[string]>;

    anchorStateRegistryImpl(overrides?: CallOverrides): Promise<[string]>;

    anchorStateRegistryProxy(overrides?: CallOverrides): Promise<[string]>;

    checkOutput(overrides?: CallOverrides): Promise<[void]>;

    delayedWETHPermissionedGameProxy(
      overrides?: CallOverrides
    ): Promise<[string]>;

    delayedWETHPermissionlessGameProxy(
      overrides?: CallOverrides
    ): Promise<[string]>;

    disputeGameFactoryImpl(overrides?: CallOverrides): Promise<[string]>;

    disputeGameFactoryProxy(overrides?: CallOverrides): Promise<[string]>;

    faultDisputeGame(overrides?: CallOverrides): Promise<[string]>;

    l1CrossDomainMessengerProxy(overrides?: CallOverrides): Promise<[string]>;

    l1ERC721BridgeProxy(overrides?: CallOverrides): Promise<[string]>;

    l1StandardBridgeProxy(overrides?: CallOverrides): Promise<[string]>;

    opChainProxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    optimismMintableERC20FactoryProxy(
      overrides?: CallOverrides
    ): Promise<[string]>;

    optimismPortalProxy(overrides?: CallOverrides): Promise<[string]>;

    output(
      overrides?: CallOverrides
    ): Promise<[DeployOPChainOutput.OutputStructOutput]>;

    permissionedDisputeGame(overrides?: CallOverrides): Promise<[string]>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    systemConfigProxy(overrides?: CallOverrides): Promise<[string]>;

    writeOutputFile(
      _outfile: string,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  addressManager(overrides?: CallOverrides): Promise<string>;

  anchorStateRegistryImpl(overrides?: CallOverrides): Promise<string>;

  anchorStateRegistryProxy(overrides?: CallOverrides): Promise<string>;

  checkOutput(overrides?: CallOverrides): Promise<void>;

  delayedWETHPermissionedGameProxy(overrides?: CallOverrides): Promise<string>;

  delayedWETHPermissionlessGameProxy(
    overrides?: CallOverrides
  ): Promise<string>;

  disputeGameFactoryImpl(overrides?: CallOverrides): Promise<string>;

  disputeGameFactoryProxy(overrides?: CallOverrides): Promise<string>;

  faultDisputeGame(overrides?: CallOverrides): Promise<string>;

  l1CrossDomainMessengerProxy(overrides?: CallOverrides): Promise<string>;

  l1ERC721BridgeProxy(overrides?: CallOverrides): Promise<string>;

  l1StandardBridgeProxy(overrides?: CallOverrides): Promise<string>;

  opChainProxyAdmin(overrides?: CallOverrides): Promise<string>;

  optimismMintableERC20FactoryProxy(overrides?: CallOverrides): Promise<string>;

  optimismPortalProxy(overrides?: CallOverrides): Promise<string>;

  output(
    overrides?: CallOverrides
  ): Promise<DeployOPChainOutput.OutputStructOutput>;

  permissionedDisputeGame(overrides?: CallOverrides): Promise<string>;

  set(
    sel: BytesLike,
    _addr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  systemConfigProxy(overrides?: CallOverrides): Promise<string>;

  writeOutputFile(_outfile: string, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    addressManager(overrides?: CallOverrides): Promise<string>;

    anchorStateRegistryImpl(overrides?: CallOverrides): Promise<string>;

    anchorStateRegistryProxy(overrides?: CallOverrides): Promise<string>;

    checkOutput(overrides?: CallOverrides): Promise<void>;

    delayedWETHPermissionedGameProxy(
      overrides?: CallOverrides
    ): Promise<string>;

    delayedWETHPermissionlessGameProxy(
      overrides?: CallOverrides
    ): Promise<string>;

    disputeGameFactoryImpl(overrides?: CallOverrides): Promise<string>;

    disputeGameFactoryProxy(overrides?: CallOverrides): Promise<string>;

    faultDisputeGame(overrides?: CallOverrides): Promise<string>;

    l1CrossDomainMessengerProxy(overrides?: CallOverrides): Promise<string>;

    l1ERC721BridgeProxy(overrides?: CallOverrides): Promise<string>;

    l1StandardBridgeProxy(overrides?: CallOverrides): Promise<string>;

    opChainProxyAdmin(overrides?: CallOverrides): Promise<string>;

    optimismMintableERC20FactoryProxy(
      overrides?: CallOverrides
    ): Promise<string>;

    optimismPortalProxy(overrides?: CallOverrides): Promise<string>;

    output(
      overrides?: CallOverrides
    ): Promise<DeployOPChainOutput.OutputStructOutput>;

    permissionedDisputeGame(overrides?: CallOverrides): Promise<string>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    systemConfigProxy(overrides?: CallOverrides): Promise<string>;

    writeOutputFile(_outfile: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addressManager(overrides?: CallOverrides): Promise<BigNumber>;

    anchorStateRegistryImpl(overrides?: CallOverrides): Promise<BigNumber>;

    anchorStateRegistryProxy(overrides?: CallOverrides): Promise<BigNumber>;

    checkOutput(overrides?: CallOverrides): Promise<BigNumber>;

    delayedWETHPermissionedGameProxy(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delayedWETHPermissionlessGameProxy(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeGameFactoryImpl(overrides?: CallOverrides): Promise<BigNumber>;

    disputeGameFactoryProxy(overrides?: CallOverrides): Promise<BigNumber>;

    faultDisputeGame(overrides?: CallOverrides): Promise<BigNumber>;

    l1CrossDomainMessengerProxy(overrides?: CallOverrides): Promise<BigNumber>;

    l1ERC721BridgeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    l1StandardBridgeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    opChainProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    optimismMintableERC20FactoryProxy(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimismPortalProxy(overrides?: CallOverrides): Promise<BigNumber>;

    output(overrides?: CallOverrides): Promise<BigNumber>;

    permissionedDisputeGame(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    systemConfigProxy(overrides?: CallOverrides): Promise<BigNumber>;

    writeOutputFile(
      _outfile: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    anchorStateRegistryImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anchorStateRegistryProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkOutput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayedWETHPermissionedGameProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayedWETHPermissionlessGameProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeGameFactoryImpl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeGameFactoryProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    faultDisputeGame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1CrossDomainMessengerProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ERC721BridgeProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1StandardBridgeProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    opChainProxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimismMintableERC20FactoryProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimismPortalProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    output(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissionedDisputeGame(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      sel: BytesLike,
      _addr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    systemConfigProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    writeOutputFile(
      _outfile: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
