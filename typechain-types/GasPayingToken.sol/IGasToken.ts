/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IGasTokenInterface extends utils.Interface {
  functions: {
    "gasPayingToken()": FunctionFragment;
    "gasPayingTokenName()": FunctionFragment;
    "gasPayingTokenSymbol()": FunctionFragment;
    "isCustomGasToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "gasPayingToken"
      | "gasPayingTokenName"
      | "gasPayingTokenSymbol"
      | "isCustomGasToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "gasPayingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasPayingTokenName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasPayingTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCustomGasToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "gasPayingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPayingTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPayingTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCustomGasToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGasToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGasTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Getter for the ERC20 token address that is used to pay for gas and its decimals.
     */
    gasPayingToken(overrides?: CallOverrides): Promise<[string, number]>;

    /**
     * Returns the gas token name.
     */
    gasPayingTokenName(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the gas token symbol.
     */
    gasPayingTokenSymbol(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns true if the network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<[boolean]>;
  };

  /**
   * Getter for the ERC20 token address that is used to pay for gas and its decimals.
   */
  gasPayingToken(overrides?: CallOverrides): Promise<[string, number]>;

  /**
   * Returns the gas token name.
   */
  gasPayingTokenName(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the gas token symbol.
   */
  gasPayingTokenSymbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns true if the network uses a custom gas token.
   */
  isCustomGasToken(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    /**
     * Getter for the ERC20 token address that is used to pay for gas and its decimals.
     */
    gasPayingToken(overrides?: CallOverrides): Promise<[string, number]>;

    /**
     * Returns the gas token name.
     */
    gasPayingTokenName(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the gas token symbol.
     */
    gasPayingTokenSymbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns true if the network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    /**
     * Getter for the ERC20 token address that is used to pay for gas and its decimals.
     */
    gasPayingToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the gas token name.
     */
    gasPayingTokenName(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the gas token symbol.
     */
    gasPayingTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Getter for the ERC20 token address that is used to pay for gas and its decimals.
     */
    gasPayingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the gas token name.
     */
    gasPayingTokenName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the gas token symbol.
     */
    gasPayingTokenSymbol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the network uses a custom gas token.
     */
    isCustomGasToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
