/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Faucet {
  export type DripParametersStruct = {
    recipient: string;
    data: BytesLike;
    nonce: BytesLike;
    gasLimit: BigNumberish;
  };

  export type DripParametersStructOutput = [string, string, string, number] & {
    recipient: string;
    data: string;
    nonce: string;
    gasLimit: number;
  };
}

export interface AdminFaucetAuthModuleInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "PROOF_TYPEHASH()": FunctionFragment;
    "verify((address,bytes,bytes32,uint32),bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "ADMIN" | "PROOF_TYPEHASH" | "verify"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROOF_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [Faucet.DripParametersStruct, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROOF_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface AdminFaucetAuthModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdminFaucetAuthModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Admin address that can sign off on drips.
     */
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    verify(
      _params: Faucet.DripParametersStruct,
      _id: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid_: boolean }>;
  };

  /**
   * Admin address that can sign off on drips.
   */
  ADMIN(overrides?: CallOverrides): Promise<string>;

  /**
   * EIP712 typehash for the Proof type.
   */
  PROOF_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  verify(
    _params: Faucet.DripParametersStruct,
    _id: BytesLike,
    _proof: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     * Admin address that can sign off on drips.
     */
    ADMIN(overrides?: CallOverrides): Promise<string>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    verify(
      _params: Faucet.DripParametersStruct,
      _id: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    /**
     * Admin address that can sign off on drips.
     */
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      _params: Faucet.DripParametersStruct,
      _id: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Admin address that can sign off on drips.
     */
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verify(
      _params: Faucet.DripParametersStruct,
      _id: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
