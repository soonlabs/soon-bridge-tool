/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace AdminFaucetAuthModule {
  export type ProofStruct = {
    recipient: string;
    nonce: BytesLike;
    id: BytesLike;
  };

  export type ProofStructOutput = [string, string, string] & {
    recipient: string;
    nonce: string;
    id: string;
  };
}

export interface FaucetHelperInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_TYPEHASH()": FunctionFragment;
    "PROOF_TYPEHASH()": FunctionFragment;
    "consumeNonce()": FunctionFragment;
    "currentNonce()": FunctionFragment;
    "getDigestWithEIP712Domain((address,bytes32,bytes32),bytes,bytes,uint256,address)": FunctionFragment;
    "getProofStructHash((address,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN_TYPEHASH"
      | "PROOF_TYPEHASH"
      | "consumeNonce"
      | "currentNonce"
      | "getDigestWithEIP712Domain"
      | "getProofStructHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROOF_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumeNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDigestWithEIP712Domain",
    values: [
      AdminFaucetAuthModule.ProofStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProofStructHash",
    values: [AdminFaucetAuthModule.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROOF_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDigestWithEIP712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProofStructHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FaucetHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaucetHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Keeps track of current nonce to generate new nonces for each drip.
     */
    currentNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDigestWithEIP712Domain(
      _proof: AdminFaucetAuthModule.ProofStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProofStructHash(
      _proof: AdminFaucetAuthModule.ProofStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  /**
   * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
   */
  EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  /**
   * EIP712 typehash for the Proof type.
   */
  PROOF_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
   */
  consumeNonce(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Keeps track of current nonce to generate new nonces for each drip.
   */
  currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getDigestWithEIP712Domain(
    _proof: AdminFaucetAuthModule.ProofStruct,
    _name: BytesLike,
    _version: BytesLike,
    _chainid: BigNumberish,
    _verifyingContract: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getProofStructHash(
    _proof: AdminFaucetAuthModule.ProofStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(overrides?: CallOverrides): Promise<string>;

    /**
     * Keeps track of current nonce to generate new nonces for each drip.
     */
    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getDigestWithEIP712Domain(
      _proof: AdminFaucetAuthModule.ProofStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProofStructHash(
      _proof: AdminFaucetAuthModule.ProofStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Keeps track of current nonce to generate new nonces for each drip.
     */
    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getDigestWithEIP712Domain(
      _proof: AdminFaucetAuthModule.ProofStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProofStructHash(
      _proof: AdminFaucetAuthModule.ProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * EIP712 typehash for the EIP712Domain type that is included as part of the signature.
     */
    EIP712_DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * EIP712 typehash for the Proof type.
     */
    PROOF_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns a bytes32 nonce that should change everytime. In practice, people should use         pseudorandom nonces.
     */
    consumeNonce(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Keeps track of current nonce to generate new nonces for each drip.
     */
    currentNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDigestWithEIP712Domain(
      _proof: AdminFaucetAuthModule.ProofStruct,
      _name: BytesLike,
      _version: BytesLike,
      _chainid: BigNumberish,
      _verifyingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProofStructHash(
      _proof: AdminFaucetAuthModule.ProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
