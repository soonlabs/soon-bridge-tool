/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace AttestationStation {
  export type AttestationDataStruct = {
    about: string;
    key: BytesLike;
    val: BytesLike;
  };

  export type AttestationDataStructOutput = [string, string, string] & {
    about: string;
    key: string;
    val: string;
  };
}

export interface AttestationStationInterface extends utils.Interface {
  functions: {
    "attest((address,bytes32,bytes)[])": FunctionFragment;
    "attest(address,bytes32,bytes)": FunctionFragment;
    "attestations(address,address,bytes32)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attest((address,bytes32,bytes)[])"
      | "attest(address,bytes32,bytes)"
      | "attestations"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attest((address,bytes32,bytes)[])",
    values: [AttestationStation.AttestationDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "attest(address,bytes32,bytes)",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "attest((address,bytes32,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attest(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AttestationCreated(address,address,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttestationCreated"): EventFragment;
}

export interface AttestationCreatedEventObject {
  creator: string;
  about: string;
  key: string;
  val: string;
}
export type AttestationCreatedEvent = TypedEvent<
  [string, string, string, string],
  AttestationCreatedEventObject
>;

export type AttestationCreatedEventFilter =
  TypedEventFilter<AttestationCreatedEvent>;

export interface AttestationStation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AttestationStationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "attest((address,bytes32,bytes)[])"(
      _attestations: AttestationStation.AttestationDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone to create an attestation.
     * @param _about Address that the attestation is about.
     * @param _key A key used to namespace the attestation.
     * @param _val An arbitrary value stored as part of the attestation.
     */
    "attest(address,bytes32,bytes)"(
      _about: string,
      _key: BytesLike,
      _val: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Maps addresses to attestations. Creator => About => Key => Value.
     */
    attestations(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  "attest((address,bytes32,bytes)[])"(
    _attestations: AttestationStation.AttestationDataStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone to create an attestation.
   * @param _about Address that the attestation is about.
   * @param _key A key used to namespace the attestation.
   * @param _val An arbitrary value stored as part of the attestation.
   */
  "attest(address,bytes32,bytes)"(
    _about: string,
    _key: BytesLike,
    _val: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Maps addresses to attestations. Creator => About => Key => Value.
   */
  attestations(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    "attest((address,bytes32,bytes)[])"(
      _attestations: AttestationStation.AttestationDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows anyone to create an attestation.
     * @param _about Address that the attestation is about.
     * @param _key A key used to namespace the attestation.
     * @param _val An arbitrary value stored as part of the attestation.
     */
    "attest(address,bytes32,bytes)"(
      _about: string,
      _key: BytesLike,
      _val: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Maps addresses to attestations. Creator => About => Key => Value.
     */
    attestations(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AttestationCreated(address,address,bytes32,bytes)"(
      creator?: string | null,
      about?: string | null,
      key?: BytesLike | null,
      val?: null
    ): AttestationCreatedEventFilter;
    AttestationCreated(
      creator?: string | null,
      about?: string | null,
      key?: BytesLike | null,
      val?: null
    ): AttestationCreatedEventFilter;
  };

  estimateGas: {
    "attest((address,bytes32,bytes)[])"(
      _attestations: AttestationStation.AttestationDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Allows anyone to create an attestation.
     * @param _about Address that the attestation is about.
     * @param _key A key used to namespace the attestation.
     * @param _val An arbitrary value stored as part of the attestation.
     */
    "attest(address,bytes32,bytes)"(
      _about: string,
      _key: BytesLike,
      _val: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Maps addresses to attestations. Creator => About => Key => Value.
     */
    attestations(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    "attest((address,bytes32,bytes)[])"(
      _attestations: AttestationStation.AttestationDataStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows anyone to create an attestation.
     * @param _about Address that the attestation is about.
     * @param _key A key used to namespace the attestation.
     * @param _val An arbitrary value stored as part of the attestation.
     */
    "attest(address,bytes32,bytes)"(
      _about: string,
      _key: BytesLike,
      _val: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Maps addresses to attestations. Creator => About => Key => Value.
     */
    attestations(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
