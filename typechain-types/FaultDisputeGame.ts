/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Types {
  export type OutputRootProofStruct = {
    version: BytesLike;
    stateRoot: BytesLike;
    messagePasserStorageRoot: BytesLike;
    latestBlockhash: BytesLike;
  };

  export type OutputRootProofStructOutput = [string, string, string, string] & {
    version: string;
    stateRoot: string;
    messagePasserStorageRoot: string;
    latestBlockhash: string;
  };
}

export interface FaultDisputeGameInterface extends utils.Interface {
  functions: {
    "absolutePrestate()": FunctionFragment;
    "addLocalData(uint256,uint256,uint256)": FunctionFragment;
    "anchorStateRegistry()": FunctionFragment;
    "attack(bytes32,uint256,bytes32)": FunctionFragment;
    "challengeRootL2Block((bytes32,bytes32,bytes32,bytes32),bytes)": FunctionFragment;
    "claimCredit(address)": FunctionFragment;
    "claimData(uint256)": FunctionFragment;
    "claimDataLen()": FunctionFragment;
    "claims(bytes32)": FunctionFragment;
    "clockExtension()": FunctionFragment;
    "createdAt()": FunctionFragment;
    "credit(address)": FunctionFragment;
    "defend(bytes32,uint256,bytes32)": FunctionFragment;
    "extraData()": FunctionFragment;
    "gameCreator()": FunctionFragment;
    "gameData()": FunctionFragment;
    "gameType()": FunctionFragment;
    "getChallengerDuration(uint256)": FunctionFragment;
    "getNumToResolve(uint256)": FunctionFragment;
    "getRequiredBond(uint128)": FunctionFragment;
    "initialize()": FunctionFragment;
    "l1Head()": FunctionFragment;
    "l2BlockNumber()": FunctionFragment;
    "l2BlockNumberChallenged()": FunctionFragment;
    "l2BlockNumberChallenger()": FunctionFragment;
    "l2ChainId()": FunctionFragment;
    "maxClockDuration()": FunctionFragment;
    "maxGameDepth()": FunctionFragment;
    "move(bytes32,uint256,bytes32,bool)": FunctionFragment;
    "resolutionCheckpoints(uint256)": FunctionFragment;
    "resolve()": FunctionFragment;
    "resolveClaim(uint256,uint256)": FunctionFragment;
    "resolvedAt()": FunctionFragment;
    "resolvedSubgames(uint256)": FunctionFragment;
    "rootClaim()": FunctionFragment;
    "splitDepth()": FunctionFragment;
    "startingBlockNumber()": FunctionFragment;
    "startingOutputRoot()": FunctionFragment;
    "startingRootHash()": FunctionFragment;
    "status()": FunctionFragment;
    "step(uint256,bool,bytes,bytes)": FunctionFragment;
    "subgames(uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "vm()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "absolutePrestate"
      | "addLocalData"
      | "anchorStateRegistry"
      | "attack"
      | "challengeRootL2Block"
      | "claimCredit"
      | "claimData"
      | "claimDataLen"
      | "claims"
      | "clockExtension"
      | "createdAt"
      | "credit"
      | "defend"
      | "extraData"
      | "gameCreator"
      | "gameData"
      | "gameType"
      | "getChallengerDuration"
      | "getNumToResolve"
      | "getRequiredBond"
      | "initialize"
      | "l1Head"
      | "l2BlockNumber"
      | "l2BlockNumberChallenged"
      | "l2BlockNumberChallenger"
      | "l2ChainId"
      | "maxClockDuration"
      | "maxGameDepth"
      | "move"
      | "resolutionCheckpoints"
      | "resolve"
      | "resolveClaim"
      | "resolvedAt"
      | "resolvedSubgames"
      | "rootClaim"
      | "splitDepth"
      | "startingBlockNumber"
      | "startingOutputRoot"
      | "startingRootHash"
      | "status"
      | "step"
      | "subgames"
      | "version"
      | "vm"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "absolutePrestate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLocalData",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anchorStateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attack",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRootL2Block",
    values: [Types.OutputRootProofStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claimCredit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDataLen",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claims", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "clockExtension",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "credit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "defend",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "extraData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameData", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChallengerDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumToResolve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredBond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1Head", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2BlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2BlockNumberChallenged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2BlockNumberChallenger",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2ChainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxClockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGameDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BytesLike, BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "resolutionCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resolve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolveClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolvedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolvedSubgames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rootClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "splitDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingOutputRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "step",
    values: [BigNumberish, boolean, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subgames",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "absolutePrestate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLocalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorStateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeRootL2Block",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDataLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clockExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "credit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "defend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extraData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChallengerDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumToResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Head", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2BlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BlockNumberChallenged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BlockNumberChallenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2ChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxClockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGameDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolutionCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolvedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolvedSubgames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "splitDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingOutputRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subgames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "Move(uint256,bytes32,address)": EventFragment;
    "Resolved(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Move"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resolved"): EventFragment;
}

export interface MoveEventObject {
  parentIndex: BigNumber;
  claim: string;
  claimant: string;
}
export type MoveEvent = TypedEvent<
  [BigNumber, string, string],
  MoveEventObject
>;

export type MoveEventFilter = TypedEventFilter<MoveEvent>;

export interface ResolvedEventObject {
  status: number;
}
export type ResolvedEvent = TypedEvent<[number], ResolvedEventObject>;

export type ResolvedEventFilter = TypedEventFilter<ResolvedEvent>;

export interface FaultDisputeGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FaultDisputeGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the absolute prestate of the instruction trace.
     */
    absolutePrestate(
      overrides?: CallOverrides
    ): Promise<[string] & { absolutePrestate_: string }>;

    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the anchor state registry contract.
     */
    anchorStateRegistry(
      overrides?: CallOverrides
    ): Promise<[string] & { registry_: string }>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    challengeRootL2Block(
      _outputRootProof: Types.OutputRootProofStruct,
      _headerRLP: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claim the credit belonging to the recipient address.
     * @param _recipient The owner and recipient of the credit.
     */
    claimCredit(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * An append-only array of all claims made during the dispute game.
     */
    claimData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, string, BigNumber, BigNumber] & {
        parentIndex: number;
        counteredBy: string;
        claimant: string;
        bond: BigNumber;
        claim: string;
        position: BigNumber;
        clock: BigNumber;
      }
    >;

    /**
     * Returns the length of the `claimData` array.
     */
    claimDataLen(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len_: BigNumber }>;

    /**
     * A mapping to allow for constant-time lookups of existing claims.
     */
    claims(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Returns the clock extension constant.
     */
    clockExtension(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { clockExtension_: BigNumber }>;

    /**
     * The starting timestamp of the game
     */
    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Credited balances for winning participants.
     */
    credit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(
      overrides?: CallOverrides
    ): Promise<[string] & { extraData_: string }>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(
      overrides?: CallOverrides
    ): Promise<[string] & { creator_: string }>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(
      overrides?: CallOverrides
    ): Promise<[number] & { gameType_: number }>;

    /**
     * Returns the amount of time elapsed on the potential challenger to `_claimIndex`'s chess clock. Maxes         out at `MAX_CLOCK_DURATION`.
     * @param _claimIndex The index of the subgame root claim.
     */
    getChallengerDuration(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { duration_: BigNumber }>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numRemainingChildren_: BigNumber }>;

    /**
     * Returns the required bond for a given move kind.
     * @param _position The position of the bonded interaction.
     */
    getRequiredBond(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredBond_: BigNumber }>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<[string] & { l1Head_: string }>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { l2BlockNumber_: BigNumber }>;

    /**
     * Flag for whether or not the L2 block number claim has been invalidated via `challengeRootL2Block`.
     */
    l2BlockNumberChallenged(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * The challenger of the L2 block number claim. Should always be `address(0)` if `l2BlockNumberChallenged`         is `false`. Should be the address of the challenger if `l2BlockNumberChallenged` is `true`.
     */
    l2BlockNumberChallenger(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the chain ID of the L2 network this contract argues about.
     */
    l2ChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { l2ChainId_: BigNumber }>;

    /**
     * Returns the max clock duration.
     */
    maxClockDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxClockDuration_: BigNumber }>;

    /**
     * Returns the max game depth.
     */
    maxGameDepth(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxGameDepth_: BigNumber }>;

    /**
     * Generic move function, used for both `attack` and `defend` moves.
     * @param _challengeIndex The index of the claim being moved against.
     * @param _claim The claim at the next logical position in the game.
     * @param _disputed The disputed `Claim`.
     * @param _isAttack Whether or not the move is an attack or defense.
     */
    move(
      _disputed: BytesLike,
      _challengeIndex: BigNumberish,
      _claim: BytesLike,
      _isAttack: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of claim indices to resolution checkpoints.
     */
    resolutionCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, string] & {
        initialCheckpointComplete: boolean;
        subgameIndex: number;
        leftmostPosition: BigNumber;
        counteredBy: string;
      }
    >;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * The timestamp of the game's global resolution.
     */
    resolvedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * A mapping of resolved subgames rooted at a claim index.
     */
    resolvedSubgames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(
      overrides?: CallOverrides
    ): Promise<[string] & { rootClaim_: string }>;

    /**
     * Returns the split depth.
     */
    splitDepth(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { splitDepth_: BigNumber }>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { startingBlockNumber_: BigNumber }>;

    /**
     * The latest finalized output root, serving as the anchor for output bisection.
     */
    startingOutputRoot(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { root: string; l2BlockNumber: BigNumber }
    >;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(
      overrides?: CallOverrides
    ): Promise<[string] & { startingRootHash_: string }>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<[number]>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of subgames rooted at a claim index to other claim indices in the subgame.
     */
    subgames(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the VM.
     */
    vm(overrides?: CallOverrides): Promise<[string] & { vm_: string }>;

    /**
     * Returns the WETH contract for holding ETH.
     */
    weth(overrides?: CallOverrides): Promise<[string] & { weth_: string }>;
  };

  /**
   * Returns the absolute prestate of the instruction trace.
   */
  absolutePrestate(overrides?: CallOverrides): Promise<string>;

  /**
   * Posts the requested local data to the VM's `PreimageOralce`.
   * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
   * @param _ident The local identifier of the data to post.
   * @param _partOffset The offset of the data to post.
   */
  addLocalData(
    _ident: BigNumberish,
    _execLeafIdx: BigNumberish,
    _partOffset: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the anchor state registry contract.
   */
  anchorStateRegistry(overrides?: CallOverrides): Promise<string>;

  /**
   * Attack a disagreed upon `Claim`.
   * @param _claim The `Claim` at the relative attack position.
   * @param _disputed The `Claim` being attacked.
   * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
   */
  attack(
    _disputed: BytesLike,
    _parentIndex: BigNumberish,
    _claim: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  challengeRootL2Block(
    _outputRootProof: Types.OutputRootProofStruct,
    _headerRLP: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claim the credit belonging to the recipient address.
   * @param _recipient The owner and recipient of the credit.
   */
  claimCredit(
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * An append-only array of all claims made during the dispute game.
   */
  claimData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber, string, BigNumber, BigNumber] & {
      parentIndex: number;
      counteredBy: string;
      claimant: string;
      bond: BigNumber;
      claim: string;
      position: BigNumber;
      clock: BigNumber;
    }
  >;

  /**
   * Returns the length of the `claimData` array.
   */
  claimDataLen(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * A mapping to allow for constant-time lookups of existing claims.
   */
  claims(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the clock extension constant.
   */
  clockExtension(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The starting timestamp of the game
   */
  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Credited balances for winning participants.
   */
  credit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
   * @param _claim The `Claim` at the relative defense position.
   * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
   */
  defend(
    _disputed: BytesLike,
    _parentIndex: BigNumberish,
    _claim: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * `clones-with-immutable-args` argument #4
   * Getter for the extra data.
   */
  extraData(overrides?: CallOverrides): Promise<string>;

  /**
   * `clones-with-immutable-args` argument #1
   * Getter for the creator of the dispute game.
   */
  gameCreator(overrides?: CallOverrides): Promise<string>;

  /**
   * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
   */
  gameData(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string] & {
      gameType_: number;
      rootClaim_: string;
      extraData_: string;
    }
  >;

  /**
   * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
   * Getter for the game type.
   */
  gameType(overrides?: CallOverrides): Promise<number>;

  /**
   * Returns the amount of time elapsed on the potential challenger to `_claimIndex`'s chess clock. Maxes         out at `MAX_CLOCK_DURATION`.
   * @param _claimIndex The index of the subgame root claim.
   */
  getChallengerDuration(
    _claimIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
   * @param _claimIndex The subgame root claim's index within `claimData`.
   */
  getNumToResolve(
    _claimIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the required bond for a given move kind.
   * @param _position The position of the bonded interaction.
   */
  getRequiredBond(
    _position: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This function may only be called once.
   * Initializes the contract.
   */
  initialize(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * `clones-with-immutable-args` argument #3
   * Getter for the parent hash of the L1 block when the dispute game was created.
   */
  l1Head(overrides?: CallOverrides): Promise<string>;

  /**
   * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
   */
  l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Flag for whether or not the L2 block number claim has been invalidated via `challengeRootL2Block`.
   */
  l2BlockNumberChallenged(overrides?: CallOverrides): Promise<boolean>;

  /**
   * The challenger of the L2 block number claim. Should always be `address(0)` if `l2BlockNumberChallenged`         is `false`. Should be the address of the challenger if `l2BlockNumberChallenged` is `true`.
   */
  l2BlockNumberChallenger(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the chain ID of the L2 network this contract argues about.
   */
  l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the max clock duration.
   */
  maxClockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the max game depth.
   */
  maxGameDepth(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Generic move function, used for both `attack` and `defend` moves.
   * @param _challengeIndex The index of the claim being moved against.
   * @param _claim The claim at the next logical position in the game.
   * @param _disputed The disputed `Claim`.
   * @param _isAttack Whether or not the move is an attack or defense.
   */
  move(
    _disputed: BytesLike,
    _challengeIndex: BigNumberish,
    _claim: BytesLike,
    _isAttack: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of claim indices to resolution checkpoints.
   */
  resolutionCheckpoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, string] & {
      initialCheckpointComplete: boolean;
      subgameIndex: number;
      leftmostPosition: BigNumber;
      counteredBy: string;
    }
  >;

  /**
   * May only be called if the `status` is `IN_PROGRESS`.
   * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
   */
  resolve(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
   * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
   * @param _claimIndex The index of the subgame root claim to resolve.
   * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
   */
  resolveClaim(
    _claimIndex: BigNumberish,
    _numToResolve: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * The timestamp of the game's global resolution.
   */
  resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * A mapping of resolved subgames rooted at a claim index.
   */
  resolvedSubgames(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * `clones-with-immutable-args` argument #2
   * Getter for the root claim.
   */
  rootClaim(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the split depth.
   */
  splitDepth(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Only the starting block number of the game.
   */
  startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * The latest finalized output root, serving as the anchor for output bisection.
   */
  startingOutputRoot(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { root: string; l2BlockNumber: BigNumber }>;

  /**
   * Only the starting output root of the game.
   */
  startingRootHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the current status of the game.
   */
  status(overrides?: CallOverrides): Promise<number>;

  /**
   * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
   * Perform an instruction step via an on-chain fault proof processor.
   * @param _claimIndex The index of the challenged claim within `claimData`.
   * @param _isAttack Whether or not the step is an attack or a defense.
   * @param _proof Proof to access memory nodes in the VM's merkle state tree.
   * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
   */
  step(
    _claimIndex: BigNumberish,
    _isAttack: boolean,
    _stateData: BytesLike,
    _proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of subgames rooted at a claim index to other claim indices in the subgame.
   */
  subgames(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the VM.
   */
  vm(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the WETH contract for holding ETH.
   */
  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Returns the absolute prestate of the instruction trace.
     */
    absolutePrestate(overrides?: CallOverrides): Promise<string>;

    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the anchor state registry contract.
     */
    anchorStateRegistry(overrides?: CallOverrides): Promise<string>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeRootL2Block(
      _outputRootProof: Types.OutputRootProofStruct,
      _headerRLP: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claim the credit belonging to the recipient address.
     * @param _recipient The owner and recipient of the credit.
     */
    claimCredit(_recipient: string, overrides?: CallOverrides): Promise<void>;

    /**
     * An append-only array of all claims made during the dispute game.
     */
    claimData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, string, BigNumber, BigNumber] & {
        parentIndex: number;
        counteredBy: string;
        claimant: string;
        bond: BigNumber;
        claim: string;
        position: BigNumber;
        clock: BigNumber;
      }
    >;

    /**
     * Returns the length of the `claimData` array.
     */
    claimDataLen(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A mapping to allow for constant-time lookups of existing claims.
     */
    claims(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the clock extension constant.
     */
    clockExtension(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The starting timestamp of the game
     */
    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Credited balances for winning participants.
     */
    credit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<string>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<string>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        gameType_: number;
        rootClaim_: string;
        extraData_: string;
      }
    >;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns the amount of time elapsed on the potential challenger to `_claimIndex`'s chess clock. Maxes         out at `MAX_CLOCK_DURATION`.
     * @param _claimIndex The index of the subgame root claim.
     */
    getChallengerDuration(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the required bond for a given move kind.
     * @param _position The position of the bonded interaction.
     */
    getRequiredBond(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<string>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Flag for whether or not the L2 block number claim has been invalidated via `challengeRootL2Block`.
     */
    l2BlockNumberChallenged(overrides?: CallOverrides): Promise<boolean>;

    /**
     * The challenger of the L2 block number claim. Should always be `address(0)` if `l2BlockNumberChallenged`         is `false`. Should be the address of the challenger if `l2BlockNumberChallenged` is `true`.
     */
    l2BlockNumberChallenger(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the chain ID of the L2 network this contract argues about.
     */
    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the max clock duration.
     */
    maxClockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the max game depth.
     */
    maxGameDepth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Generic move function, used for both `attack` and `defend` moves.
     * @param _challengeIndex The index of the claim being moved against.
     * @param _claim The claim at the next logical position in the game.
     * @param _disputed The disputed `Claim`.
     * @param _isAttack Whether or not the move is an attack or defense.
     */
    move(
      _disputed: BytesLike,
      _challengeIndex: BigNumberish,
      _claim: BytesLike,
      _isAttack: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A mapping of claim indices to resolution checkpoints.
     */
    resolutionCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, string] & {
        initialCheckpointComplete: boolean;
        subgameIndex: number;
        leftmostPosition: BigNumber;
        counteredBy: string;
      }
    >;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(overrides?: CallOverrides): Promise<number>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The timestamp of the game's global resolution.
     */
    resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A mapping of resolved subgames rooted at a claim index.
     */
    resolvedSubgames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the split depth.
     */
    splitDepth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The latest finalized output root, serving as the anchor for output bisection.
     */
    startingOutputRoot(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { root: string; l2BlockNumber: BigNumber }
    >;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<number>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A mapping of subgames rooted at a claim index to other claim indices in the subgame.
     */
    subgames(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the VM.
     */
    vm(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the WETH contract for holding ETH.
     */
    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Move(uint256,bytes32,address)"(
      parentIndex?: BigNumberish | null,
      claim?: BytesLike | null,
      claimant?: string | null
    ): MoveEventFilter;
    Move(
      parentIndex?: BigNumberish | null,
      claim?: BytesLike | null,
      claimant?: string | null
    ): MoveEventFilter;

    "Resolved(uint8)"(status?: BigNumberish | null): ResolvedEventFilter;
    Resolved(status?: BigNumberish | null): ResolvedEventFilter;
  };

  estimateGas: {
    /**
     * Returns the absolute prestate of the instruction trace.
     */
    absolutePrestate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the anchor state registry contract.
     */
    anchorStateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    challengeRootL2Block(
      _outputRootProof: Types.OutputRootProofStruct,
      _headerRLP: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claim the credit belonging to the recipient address.
     * @param _recipient The owner and recipient of the credit.
     */
    claimCredit(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * An append-only array of all claims made during the dispute game.
     */
    claimData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the length of the `claimData` array.
     */
    claimDataLen(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A mapping to allow for constant-time lookups of existing claims.
     */
    claims(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the clock extension constant.
     */
    clockExtension(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The starting timestamp of the game
     */
    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Credited balances for winning participants.
     */
    credit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the amount of time elapsed on the potential challenger to `_claimIndex`'s chess clock. Maxes         out at `MAX_CLOCK_DURATION`.
     * @param _claimIndex The index of the subgame root claim.
     */
    getChallengerDuration(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the required bond for a given move kind.
     * @param _position The position of the bonded interaction.
     */
    getRequiredBond(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Flag for whether or not the L2 block number claim has been invalidated via `challengeRootL2Block`.
     */
    l2BlockNumberChallenged(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The challenger of the L2 block number claim. Should always be `address(0)` if `l2BlockNumberChallenged`         is `false`. Should be the address of the challenger if `l2BlockNumberChallenged` is `true`.
     */
    l2BlockNumberChallenger(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the chain ID of the L2 network this contract argues about.
     */
    l2ChainId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the max clock duration.
     */
    maxClockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the max game depth.
     */
    maxGameDepth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Generic move function, used for both `attack` and `defend` moves.
     * @param _challengeIndex The index of the claim being moved against.
     * @param _claim The claim at the next logical position in the game.
     * @param _disputed The disputed `Claim`.
     * @param _isAttack Whether or not the move is an attack or defense.
     */
    move(
      _disputed: BytesLike,
      _challengeIndex: BigNumberish,
      _claim: BytesLike,
      _isAttack: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A mapping of claim indices to resolution checkpoints.
     */
    resolutionCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * The timestamp of the game's global resolution.
     */
    resolvedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * A mapping of resolved subgames rooted at a claim index.
     */
    resolvedSubgames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the split depth.
     */
    splitDepth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The latest finalized output root, serving as the anchor for output bisection.
     */
    startingOutputRoot(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A mapping of subgames rooted at a claim index to other claim indices in the subgame.
     */
    subgames(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the VM.
     */
    vm(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the WETH contract for holding ETH.
     */
    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the absolute prestate of the instruction trace.
     */
    absolutePrestate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Posts the requested local data to the VM's `PreimageOralce`.
     * @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.
     * @param _ident The local identifier of the data to post.
     * @param _partOffset The offset of the data to post.
     */
    addLocalData(
      _ident: BigNumberish,
      _execLeafIdx: BigNumberish,
      _partOffset: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the anchor state registry contract.
     */
    anchorStateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Attack a disagreed upon `Claim`.
     * @param _claim The `Claim` at the relative attack position.
     * @param _disputed The `Claim` being attacked.
     * @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.
     */
    attack(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    challengeRootL2Block(
      _outputRootProof: Types.OutputRootProofStruct,
      _headerRLP: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claim the credit belonging to the recipient address.
     * @param _recipient The owner and recipient of the credit.
     */
    claimCredit(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * An append-only array of all claims made during the dispute game.
     */
    claimData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the length of the `claimData` array.
     */
    claimDataLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A mapping to allow for constant-time lookups of existing claims.
     */
    claims(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the clock extension constant.
     */
    clockExtension(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The starting timestamp of the game
     */
    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Credited balances for winning participants.
     */
    credit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Defend an agreed upon `Claim`._disputed The `Claim` being defended.
     * @param _claim The `Claim` at the relative defense position.
     * @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.
     */
    defend(
      _disputed: BytesLike,
      _parentIndex: BigNumberish,
      _claim: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #4
     * Getter for the extra data.
     */
    extraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #1
     * Getter for the creator of the dispute game.
     */
    gameCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.
     */
    gameData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.
     * Getter for the game type.
     */
    gameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of time elapsed on the potential challenger to `_claimIndex`'s chess clock. Maxes         out at `MAX_CLOCK_DURATION`.
     * @param _claimIndex The index of the subgame root claim.
     */
    getChallengerDuration(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.
     * @param _claimIndex The subgame root claim's index within `claimData`.
     */
    getNumToResolve(
      _claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the required bond for a given move kind.
     * @param _position The position of the bonded interaction.
     */
    getRequiredBond(
      _position: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function may only be called once.
     * Initializes the contract.
     */
    initialize(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #3
     * Getter for the parent hash of the L1 block when the dispute game was created.
     */
    l1Head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The l2BlockNumber of the disputed output root in the `L2OutputOracle`.
     */
    l2BlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Flag for whether or not the L2 block number claim has been invalidated via `challengeRootL2Block`.
     */
    l2BlockNumberChallenged(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The challenger of the L2 block number claim. Should always be `address(0)` if `l2BlockNumberChallenged`         is `false`. Should be the address of the challenger if `l2BlockNumberChallenged` is `true`.
     */
    l2BlockNumberChallenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the chain ID of the L2 network this contract argues about.
     */
    l2ChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the max clock duration.
     */
    maxClockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the max game depth.
     */
    maxGameDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Generic move function, used for both `attack` and `defend` moves.
     * @param _challengeIndex The index of the claim being moved against.
     * @param _claim The claim at the next logical position in the game.
     * @param _disputed The disputed `Claim`.
     * @param _isAttack Whether or not the move is an attack or defense.
     */
    move(
      _disputed: BytesLike,
      _challengeIndex: BigNumberish,
      _claim: BytesLike,
      _isAttack: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of claim indices to resolution checkpoints.
     */
    resolutionCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * May only be called if the `status` is `IN_PROGRESS`.
     * If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.
     */
    resolve(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.
     * Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.
     * @param _claimIndex The index of the subgame root claim to resolve.
     * @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.
     */
    resolveClaim(
      _claimIndex: BigNumberish,
      _numToResolve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * The timestamp of the game's global resolution.
     */
    resolvedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * A mapping of resolved subgames rooted at a claim index.
     */
    resolvedSubgames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * `clones-with-immutable-args` argument #2
     * Getter for the root claim.
     */
    rootClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the split depth.
     */
    splitDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Only the starting block number of the game.
     */
    startingBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The latest finalized output root, serving as the anchor for output bisection.
     */
    startingOutputRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Only the starting output root of the game.
     */
    startingRootHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the current status of the game.
     */
    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.
     * Perform an instruction step via an on-chain fault proof processor.
     * @param _claimIndex The index of the challenged claim within `claimData`.
     * @param _isAttack Whether or not the step is an attack or a defense.
     * @param _proof Proof to access memory nodes in the VM's merkle state tree.
     * @param _stateData The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.
     */
    step(
      _claimIndex: BigNumberish,
      _isAttack: boolean,
      _stateData: BytesLike,
      _proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of subgames rooted at a claim index to other claim indices in the subgame.
     */
    subgames(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the VM.
     */
    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the WETH contract for holding ETH.
     */
    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
