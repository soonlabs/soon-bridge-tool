/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AssetReceiver0825Interface extends utils.Interface {
  functions: {
    "CALL(address,bytes,uint256)": FunctionFragment;
    "DELEGATECALL(address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "withdrawERC20(address,address,uint256)": FunctionFragment;
    "withdrawERC20(address,address)": FunctionFragment;
    "withdrawERC721(address,address,uint256)": FunctionFragment;
    "withdrawETH(address,uint256)": FunctionFragment;
    "withdrawETH(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CALL"
      | "DELEGATECALL"
      | "owner"
      | "setOwner"
      | "withdrawERC20(address,address,uint256)"
      | "withdrawERC20(address,address)"
      | "withdrawERC721"
      | "withdrawETH(address,uint256)"
      | "withdrawETH(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CALL",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATECALL",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20(address,address)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH(address)",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "CALL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATECALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH(address)",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
    "ReceivedETH(address,uint256)": EventFragment;
    "WithdrewERC20(address,address,address,uint256)": EventFragment;
    "WithdrewERC721(address,address,address,uint256)": EventFragment;
    "WithdrewETH(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrewETH"): EventFragment;
}

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface ReceivedETHEventObject {
  from: string;
  amount: BigNumber;
}
export type ReceivedETHEvent = TypedEvent<
  [string, BigNumber],
  ReceivedETHEventObject
>;

export type ReceivedETHEventFilter = TypedEventFilter<ReceivedETHEvent>;

export interface WithdrewERC20EventObject {
  withdrawer: string;
  recipient: string;
  asset: string;
  amount: BigNumber;
}
export type WithdrewERC20Event = TypedEvent<
  [string, string, string, BigNumber],
  WithdrewERC20EventObject
>;

export type WithdrewERC20EventFilter = TypedEventFilter<WithdrewERC20Event>;

export interface WithdrewERC721EventObject {
  withdrawer: string;
  recipient: string;
  asset: string;
  id: BigNumber;
}
export type WithdrewERC721Event = TypedEvent<
  [string, string, string, BigNumber],
  WithdrewERC721EventObject
>;

export type WithdrewERC721EventFilter = TypedEventFilter<WithdrewERC721Event>;

export interface WithdrewETHEventObject {
  withdrawer: string;
  recipient: string;
  amount: BigNumber;
}
export type WithdrewETHEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrewETHEventObject
>;

export type WithdrewETHEventFilter = TypedEventFilter<WithdrewETHEvent>;

export interface AssetReceiver0825 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetReceiver0825Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws partial ERC20 balance to the recipient.
     * @param _amount Amount of ERC20 to withdraw.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address,uint256)"(
      _asset: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws full ERC20 balance to the recipient.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address)"(
      _asset: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws ERC721 token to the recipient.
     * @param _asset ERC721 token to withdraw.
     * @param _id Token ID of the ERC721 token to withdraw.
     * @param _to Address to receive the ERC721 token.
     */
    withdrawERC721(
      _asset: string,
      _to: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws partial ETH balance to the recipient.
     * @param _amount Amount of ETH to withdraw.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws full ETH balance to the recipient.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Sends a CALL to a target address.
   * @param _data Data to send with the call.
   * @param _target Address to call.
   * @param _value ETH value to send with the call.
   */
  CALL(
    _target: string,
    _data: BytesLike,
    _value: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Sends a DELEGATECALL to a target address.
   * @param _data Data to send with the call.
   * @param _target Address to call.
   */
  DELEGATECALL(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws partial ERC20 balance to the recipient.
   * @param _amount Amount of ERC20 to withdraw.
   * @param _asset ERC20 token to withdraw.
   * @param _to Address to receive the ERC20 balance.
   */
  "withdrawERC20(address,address,uint256)"(
    _asset: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws full ERC20 balance to the recipient.
   * @param _asset ERC20 token to withdraw.
   * @param _to Address to receive the ERC20 balance.
   */
  "withdrawERC20(address,address)"(
    _asset: string,
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws ERC721 token to the recipient.
   * @param _asset ERC721 token to withdraw.
   * @param _id Token ID of the ERC721 token to withdraw.
   * @param _to Address to receive the ERC721 token.
   */
  withdrawERC721(
    _asset: string,
    _to: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws partial ETH balance to the recipient.
   * @param _amount Amount of ETH to withdraw.
   * @param _to Address to receive the ETH balance.
   */
  "withdrawETH(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws full ETH balance to the recipient.
   * @param _to Address to receive the ETH balance.
   */
  "withdrawETH(address)"(
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success_: boolean; data_: string }>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success_: boolean; data_: string }>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Withdraws partial ERC20 balance to the recipient.
     * @param _amount Amount of ERC20 to withdraw.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address,uint256)"(
      _asset: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws full ERC20 balance to the recipient.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address)"(
      _asset: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws ERC721 token to the recipient.
     * @param _asset ERC721 token to withdraw.
     * @param _id Token ID of the ERC721 token to withdraw.
     * @param _to Address to receive the ERC721 token.
     */
    withdrawERC721(
      _asset: string,
      _to: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws partial ETH balance to the recipient.
     * @param _amount Amount of ETH to withdraw.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws full ETH balance to the recipient.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): OwnerUpdatedEventFilter;

    "ReceivedETH(address,uint256)"(
      from?: string | null,
      amount?: null
    ): ReceivedETHEventFilter;
    ReceivedETH(from?: string | null, amount?: null): ReceivedETHEventFilter;

    "WithdrewERC20(address,address,address,uint256)"(
      withdrawer?: string | null,
      recipient?: string | null,
      asset?: string | null,
      amount?: null
    ): WithdrewERC20EventFilter;
    WithdrewERC20(
      withdrawer?: string | null,
      recipient?: string | null,
      asset?: string | null,
      amount?: null
    ): WithdrewERC20EventFilter;

    "WithdrewERC721(address,address,address,uint256)"(
      withdrawer?: string | null,
      recipient?: string | null,
      asset?: string | null,
      id?: null
    ): WithdrewERC721EventFilter;
    WithdrewERC721(
      withdrawer?: string | null,
      recipient?: string | null,
      asset?: string | null,
      id?: null
    ): WithdrewERC721EventFilter;

    "WithdrewETH(address,address,uint256)"(
      withdrawer?: string | null,
      recipient?: string | null,
      amount?: null
    ): WithdrewETHEventFilter;
    WithdrewETH(
      withdrawer?: string | null,
      recipient?: string | null,
      amount?: null
    ): WithdrewETHEventFilter;
  };

  estimateGas: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws partial ERC20 balance to the recipient.
     * @param _amount Amount of ERC20 to withdraw.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address,uint256)"(
      _asset: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws full ERC20 balance to the recipient.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address)"(
      _asset: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws ERC721 token to the recipient.
     * @param _asset ERC721 token to withdraw.
     * @param _id Token ID of the ERC721 token to withdraw.
     * @param _to Address to receive the ERC721 token.
     */
    withdrawERC721(
      _asset: string,
      _to: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws partial ETH balance to the recipient.
     * @param _amount Amount of ETH to withdraw.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws full ETH balance to the recipient.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Sends a CALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     * @param _value ETH value to send with the call.
     */
    CALL(
      _target: string,
      _data: BytesLike,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Sends a DELEGATECALL to a target address.
     * @param _data Data to send with the call.
     * @param _target Address to call.
     */
    DELEGATECALL(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws partial ERC20 balance to the recipient.
     * @param _amount Amount of ERC20 to withdraw.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address,uint256)"(
      _asset: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws full ERC20 balance to the recipient.
     * @param _asset ERC20 token to withdraw.
     * @param _to Address to receive the ERC20 balance.
     */
    "withdrawERC20(address,address)"(
      _asset: string,
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws ERC721 token to the recipient.
     * @param _asset ERC721 token to withdraw.
     * @param _id Token ID of the ERC721 token to withdraw.
     * @param _to Address to receive the ERC721 token.
     */
    withdrawERC721(
      _asset: string,
      _to: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws partial ETH balance to the recipient.
     * @param _amount Amount of ETH to withdraw.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws full ETH balance to the recipient.
     * @param _to Address to receive the ETH balance.
     */
    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
