/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface RelayActorInterface extends utils.Interface {
  functions: {
    "hashes(uint256)": FunctionFragment;
    "numHashes()": FunctionFragment;
    "relay(uint8,bytes)": FunctionFragment;
    "reverted()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "hashes" | "numHashes" | "relay" | "reverted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numHashes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reverted", values?: undefined): string;

  decodeFunctionResult(functionFragment: "hashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reverted", data: BytesLike): Result;

  events: {};
}

export interface RelayActor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayActorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    numHashes(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Relays a message to the `L1CrossDomainMessenger` with a random `version`,         and `_message`.
     */
    relay(
      _value: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reverted(overrides?: CallOverrides): Promise<[boolean]>;
  };

  hashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  numHashes(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Relays a message to the `L1CrossDomainMessenger` with a random `version`,         and `_message`.
   */
  relay(
    _value: BigNumberish,
    _message: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reverted(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    hashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    numHashes(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Relays a message to the `L1CrossDomainMessenger` with a random `version`,         and `_message`.
     */
    relay(
      _value: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    reverted(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    hashes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    numHashes(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Relays a message to the `L1CrossDomainMessenger` with a random `version`,         and `_message`.
     */
    relay(
      _value: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reverted(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Relays a message to the `L1CrossDomainMessenger` with a random `version`,         and `_message`.
     */
    relay(
      _value: BigNumberish,
      _message: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reverted(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
