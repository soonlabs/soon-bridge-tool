/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Types {
  export type WithdrawalTransactionStruct = {
    nonce: BigNumberish;
    sender: BytesLike;
    target: string;
    value: BigNumberish;
    gasLimit: BigNumberish;
    data: BytesLike;
  };

  export type WithdrawalTransactionStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    nonce: BigNumber;
    sender: string;
    target: string;
    value: BigNumber;
    gasLimit: BigNumber;
    data: string;
  };

  export type OutputRootProofStruct = {
    version: BytesLike;
    stateRoot: BytesLike;
    messagePasserStorageRoot: BytesLike;
    latestBlockhash: BytesLike;
  };

  export type OutputRootProofStructOutput = [string, string, string, string] & {
    version: string;
    stateRoot: string;
    messagePasserStorageRoot: string;
    latestBlockhash: string;
  };
}

export interface OptimismPortal2Interface extends utils.Interface {
  functions: {
    "MIN_BRIDGE_VALUE()": FunctionFragment;
    "balance()": FunctionFragment;
    "blacklistDisputeGame(address)": FunctionFragment;
    "checkWithdrawal(bytes32,address)": FunctionFragment;
    "depositERC20Transaction(bytes32,uint256,uint256,uint64,bool,bytes)": FunctionFragment;
    "depositTransaction(bytes32,uint256,uint64,bool,bytes)": FunctionFragment;
    "disputeGameBlacklist(address)": FunctionFragment;
    "disputeGameFactory()": FunctionFragment;
    "disputeGameFinalityDelaySeconds()": FunctionFragment;
    "donateETH()": FunctionFragment;
    "finalizeWithdrawalTransaction((uint256,bytes32,address,uint256,uint256,bytes))": FunctionFragment;
    "finalizeWithdrawalTransactionExternalProof((uint256,bytes32,address,uint256,uint256,bytes),address)": FunctionFragment;
    "finalizedWithdrawals(bytes32)": FunctionFragment;
    "guardian()": FunctionFragment;
    "initialize(address,address,address,uint32)": FunctionFragment;
    "l2Sender()": FunctionFragment;
    "minimumGasLimit(uint64)": FunctionFragment;
    "numProofSubmitters(bytes32)": FunctionFragment;
    "params()": FunctionFragment;
    "paused()": FunctionFragment;
    "proofMaturityDelaySeconds()": FunctionFragment;
    "proofSubmitters(bytes32,uint256)": FunctionFragment;
    "proveWithdrawalTransaction((uint256,bytes32,address,uint256,uint256,bytes),uint256,bytes32,(bytes32,bytes32,bytes32,bytes32),bytes[])": FunctionFragment;
    "provenWithdrawals(bytes32,address)": FunctionFragment;
    "respectedGameType()": FunctionFragment;
    "respectedGameTypeUpdatedAt()": FunctionFragment;
    "setRespectedGameType(uint32)": FunctionFragment;
    "superchainConfig()": FunctionFragment;
    "systemConfig()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_BRIDGE_VALUE"
      | "balance"
      | "blacklistDisputeGame"
      | "checkWithdrawal"
      | "depositERC20Transaction"
      | "depositTransaction"
      | "disputeGameBlacklist"
      | "disputeGameFactory"
      | "disputeGameFinalityDelaySeconds"
      | "donateETH"
      | "finalizeWithdrawalTransaction"
      | "finalizeWithdrawalTransactionExternalProof"
      | "finalizedWithdrawals"
      | "guardian"
      | "initialize"
      | "l2Sender"
      | "minimumGasLimit"
      | "numProofSubmitters"
      | "params"
      | "paused"
      | "proofMaturityDelaySeconds"
      | "proofSubmitters"
      | "proveWithdrawalTransaction"
      | "provenWithdrawals"
      | "respectedGameType"
      | "respectedGameTypeUpdatedAt"
      | "setRespectedGameType"
      | "superchainConfig"
      | "systemConfig"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_BRIDGE_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blacklistDisputeGame",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWithdrawal",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20Transaction",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTransaction",
    values: [BytesLike, BigNumberish, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameBlacklist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeGameFinalityDelaySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donateETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawalTransaction",
    values: [Types.WithdrawalTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawalTransactionExternalProof",
    values: [Types.WithdrawalTransactionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizedWithdrawals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "l2Sender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numProofSubmitters",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proofMaturityDelaySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proofSubmitters",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proveWithdrawalTransaction",
    values: [
      Types.WithdrawalTransactionStruct,
      BigNumberish,
      BytesLike,
      Types.OutputRootProofStruct,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provenWithdrawals",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "respectedGameType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "respectedGameTypeUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRespectedGameType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "superchainConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_BRIDGE_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistDisputeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeGameFinalityDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donateETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawalTransactionExternalProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Sender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numProofSubmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proofMaturityDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proofSubmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveWithdrawalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provenWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respectedGameType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respectedGameTypeUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRespectedGameType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superchainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "DisputeGameBlacklisted(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RespectedGameTypeSet(uint32,uint64)": EventFragment;
    "TransactionDeposited(address,bytes32,uint256,bytes)": EventFragment;
    "WithdrawalFinalized(bytes32,bool)": EventFragment;
    "WithdrawalProven(bytes32,bytes32,address)": EventFragment;
    "WithdrawalProvenExtension1(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputeGameBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RespectedGameTypeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalProven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalProvenExtension1"): EventFragment;
}

export interface DisputeGameBlacklistedEventObject {
  disputeGame: string;
}
export type DisputeGameBlacklistedEvent = TypedEvent<
  [string],
  DisputeGameBlacklistedEventObject
>;

export type DisputeGameBlacklistedEventFilter =
  TypedEventFilter<DisputeGameBlacklistedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RespectedGameTypeSetEventObject {
  newGameType: number;
  updatedAt: BigNumber;
}
export type RespectedGameTypeSetEvent = TypedEvent<
  [number, BigNumber],
  RespectedGameTypeSetEventObject
>;

export type RespectedGameTypeSetEventFilter =
  TypedEventFilter<RespectedGameTypeSetEvent>;

export interface TransactionDepositedEventObject {
  from: string;
  to: string;
  version: BigNumber;
  opaqueData: string;
}
export type TransactionDepositedEvent = TypedEvent<
  [string, string, BigNumber, string],
  TransactionDepositedEventObject
>;

export type TransactionDepositedEventFilter =
  TypedEventFilter<TransactionDepositedEvent>;

export interface WithdrawalFinalizedEventObject {
  withdrawalHash: string;
  success: boolean;
}
export type WithdrawalFinalizedEvent = TypedEvent<
  [string, boolean],
  WithdrawalFinalizedEventObject
>;

export type WithdrawalFinalizedEventFilter =
  TypedEventFilter<WithdrawalFinalizedEvent>;

export interface WithdrawalProvenEventObject {
  withdrawalHash: string;
  from: string;
  to: string;
}
export type WithdrawalProvenEvent = TypedEvent<
  [string, string, string],
  WithdrawalProvenEventObject
>;

export type WithdrawalProvenEventFilter =
  TypedEventFilter<WithdrawalProvenEvent>;

export interface WithdrawalProvenExtension1EventObject {
  withdrawalHash: string;
  proofSubmitter: string;
}
export type WithdrawalProvenExtension1Event = TypedEvent<
  [string, string],
  WithdrawalProvenExtension1EventObject
>;

export type WithdrawalProvenExtension1EventFilter =
  TypedEventFilter<WithdrawalProvenExtension1Event>;

export interface OptimismPortal2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimismPortal2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Minimal deposit value
     */
    MIN_BRIDGE_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Getter for the balance of the contract.
     */
    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Blacklists a dispute game. Should only be used in the event that a dispute game resolves incorrectly.
     * @param _disputeGame Dispute game to blacklist.
     */
    blacklistDisputeGame(
      _disputeGame: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Checks if a withdrawal can be finalized. This function will revert if the withdrawal cannot be         finalized, and otherwise has no side-effects.
     * @param _proofSubmitter The submitter of the proof for the withdrawal hash
     * @param _withdrawalHash Hash of the withdrawal to check.
     */
    checkWithdrawal(
      _withdrawalHash: BytesLike,
      _proofSubmitter: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * Entrypoint to depositing an ERC20 token as a custom gas token.         This function depends on a well formed ERC20 token. There are only         so many checks that can be done on chain for this so it is assumed         that chain operators will deploy chains with well formed ERC20 tokens.
     */
    depositERC20Transaction(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: boolean,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in         deriving deposit transactions. Note that if a deposit is made by a contract, its         address will be aliased when retrieved using `tx.origin` or `msg.sender`. Consider         using the CrossDomainMessenger contracts for a simpler developer experience.
     * @param _data Data to trigger the recipient with.
     * @param _gasLimit Amount of L2 gas to purchase by burning gas on L1.
     * @param _isCreation Whether or not the transaction is a contract creation.
     * @param _to Target address on L2.
     * @param _value ETH value to send to the recipient.
     */
    depositTransaction(
      _to: BytesLike,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of dispute game addresses to whether or not they are blacklisted.
     */
    disputeGameBlacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Address of the DisputeGameFactory.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Getter for the dispute game finality delay.
     */
    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Accepts ETH value without triggering a deposit to L2.         This function mainly exists for the sake of the migration between the legacy         Optimism system and Bedrock.
     */
    donateETH(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizeWithdrawalTransactionExternalProof(
      _tx: Types.WithdrawalTransactionStruct,
      _proofSubmitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A list of withdrawal hashes which have been successfully finalized.
     */
    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Getter function for the address of the guardian.         Public getter is legacy and will be removed in the future. Use `SuperchainConfig.guardian()` instead.
     */
    guardian(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Initializer.
     * @param _disputeGameFactory Contract of the DisputeGameFactory.
     * @param _superchainConfig Contract of the SuperchainConfig.
     * @param _systemConfig Contract of the SystemConfig.
     */
    initialize(
      _disputeGameFactory: string,
      _systemConfig: string,
      _superchainConfig: string,
      _initialRespectedGameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Address of the L2 account which initiated a withdrawal in this transaction.         If the of this variable is the default L2 sender address, then we are NOT inside of         a call to finalizeWithdrawalTransaction.
     */
    l2Sender(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Computes the minimum gas limit for a deposit.         The minimum gas limit linearly increases based on the size of the calldata.         This is to prevent users from creating L2 resource usage without paying for it.         This function can be used when interacting with the portal to ensure forwards         compatibility.
     * @param _byteCount Number of bytes in the calldata.
     */
    minimumGasLimit(
      _byteCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * External getter for the number of proof submitters for a withdrawal hash.
     * @param _withdrawalHash Hash of the withdrawal.
     */
    numProofSubmitters(
      _withdrawalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    /**
     * Getter for the current paused status.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Getter for the proof maturity delay.
     */
    proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Mapping of withdrawal hashes to addresses that have submitted a proof for the withdrawal.
     */
    proofSubmitters(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proveWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _disputeGameIndex: BigNumberish,
      _pdaPubkey: BytesLike,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A mapping of withdrawal hashes to proof submitters to `ProvenWithdrawal` data.
     */
    provenWithdrawals(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { disputeGameProxy: string; timestamp: BigNumber }
    >;

    /**
     * The game type that the OptimismPortal consults for output proposals.
     */
    respectedGameType(overrides?: CallOverrides): Promise<[number]>;

    /**
     * The timestamp at which the respected game type was last updated.
     */
    respectedGameTypeUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Sets the respected game type. Changing this value can alter the security properties of the system,         depending on the new game's behavior.
     * @param _gameType The game type to consult for output proposals.
     */
    setRespectedGameType(
      _gameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Contract of the Superchain Config.
     */
    superchainConfig(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Contract of the SystemConfig.
     */
    systemConfig(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Minimal deposit value
   */
  MIN_BRIDGE_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Getter for the balance of the contract.
   */
  balance(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Blacklists a dispute game. Should only be used in the event that a dispute game resolves incorrectly.
   * @param _disputeGame Dispute game to blacklist.
   */
  blacklistDisputeGame(
    _disputeGame: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Checks if a withdrawal can be finalized. This function will revert if the withdrawal cannot be         finalized, and otherwise has no side-effects.
   * @param _proofSubmitter The submitter of the proof for the withdrawal hash
   * @param _withdrawalHash Hash of the withdrawal to check.
   */
  checkWithdrawal(
    _withdrawalHash: BytesLike,
    _proofSubmitter: string,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * Entrypoint to depositing an ERC20 token as a custom gas token.         This function depends on a well formed ERC20 token. There are only         so many checks that can be done on chain for this so it is assumed         that chain operators will deploy chains with well formed ERC20 tokens.
   */
  depositERC20Transaction(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: boolean,
    arg5: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in         deriving deposit transactions. Note that if a deposit is made by a contract, its         address will be aliased when retrieved using `tx.origin` or `msg.sender`. Consider         using the CrossDomainMessenger contracts for a simpler developer experience.
   * @param _data Data to trigger the recipient with.
   * @param _gasLimit Amount of L2 gas to purchase by burning gas on L1.
   * @param _isCreation Whether or not the transaction is a contract creation.
   * @param _to Target address on L2.
   * @param _value ETH value to send to the recipient.
   */
  depositTransaction(
    _to: BytesLike,
    _value: BigNumberish,
    _gasLimit: BigNumberish,
    _isCreation: boolean,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of dispute game addresses to whether or not they are blacklisted.
   */
  disputeGameBlacklist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Address of the DisputeGameFactory.
   */
  disputeGameFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the dispute game finality delay.
   */
  disputeGameFinalityDelaySeconds(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Accepts ETH value without triggering a deposit to L2.         This function mainly exists for the sake of the migration between the legacy         Optimism system and Bedrock.
   */
  donateETH(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizeWithdrawalTransaction(
    _tx: Types.WithdrawalTransactionStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizeWithdrawalTransactionExternalProof(
    _tx: Types.WithdrawalTransactionStruct,
    _proofSubmitter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A list of withdrawal hashes which have been successfully finalized.
   */
  finalizedWithdrawals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Getter function for the address of the guardian.         Public getter is legacy and will be removed in the future. Use `SuperchainConfig.guardian()` instead.
   */
  guardian(overrides?: CallOverrides): Promise<string>;

  /**
   * Initializer.
   * @param _disputeGameFactory Contract of the DisputeGameFactory.
   * @param _superchainConfig Contract of the SuperchainConfig.
   * @param _systemConfig Contract of the SystemConfig.
   */
  initialize(
    _disputeGameFactory: string,
    _systemConfig: string,
    _superchainConfig: string,
    _initialRespectedGameType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Address of the L2 account which initiated a withdrawal in this transaction.         If the of this variable is the default L2 sender address, then we are NOT inside of         a call to finalizeWithdrawalTransaction.
   */
  l2Sender(overrides?: CallOverrides): Promise<string>;

  /**
   * Computes the minimum gas limit for a deposit.         The minimum gas limit linearly increases based on the size of the calldata.         This is to prevent users from creating L2 resource usage without paying for it.         This function can be used when interacting with the portal to ensure forwards         compatibility.
   * @param _byteCount Number of bytes in the calldata.
   */
  minimumGasLimit(
    _byteCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * External getter for the number of proof submitters for a withdrawal hash.
   * @param _withdrawalHash Hash of the withdrawal.
   */
  numProofSubmitters(
    _withdrawalHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * EIP-1559 style gas parameters.
   */
  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  /**
   * Getter for the current paused status.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Getter for the proof maturity delay.
   */
  proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Mapping of withdrawal hashes to addresses that have submitted a proof for the withdrawal.
   */
  proofSubmitters(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  proveWithdrawalTransaction(
    _tx: Types.WithdrawalTransactionStruct,
    _disputeGameIndex: BigNumberish,
    _pdaPubkey: BytesLike,
    _outputRootProof: Types.OutputRootProofStruct,
    _withdrawalProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A mapping of withdrawal hashes to proof submitters to `ProvenWithdrawal` data.
   */
  provenWithdrawals(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { disputeGameProxy: string; timestamp: BigNumber }
  >;

  /**
   * The game type that the OptimismPortal consults for output proposals.
   */
  respectedGameType(overrides?: CallOverrides): Promise<number>;

  /**
   * The timestamp at which the respected game type was last updated.
   */
  respectedGameTypeUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Sets the respected game type. Changing this value can alter the security properties of the system,         depending on the new game's behavior.
   * @param _gameType The game type to consult for output proposals.
   */
  setRespectedGameType(
    _gameType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Contract of the Superchain Config.
   */
  superchainConfig(overrides?: CallOverrides): Promise<string>;

  /**
   * Contract of the SystemConfig.
   */
  systemConfig(overrides?: CallOverrides): Promise<string>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Minimal deposit value
     */
    MIN_BRIDGE_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the balance of the contract.
     */
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Blacklists a dispute game. Should only be used in the event that a dispute game resolves incorrectly.
     * @param _disputeGame Dispute game to blacklist.
     */
    blacklistDisputeGame(
      _disputeGame: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Checks if a withdrawal can be finalized. This function will revert if the withdrawal cannot be         finalized, and otherwise has no side-effects.
     * @param _proofSubmitter The submitter of the proof for the withdrawal hash
     * @param _withdrawalHash Hash of the withdrawal to check.
     */
    checkWithdrawal(
      _withdrawalHash: BytesLike,
      _proofSubmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Entrypoint to depositing an ERC20 token as a custom gas token.         This function depends on a well formed ERC20 token. There are only         so many checks that can be done on chain for this so it is assumed         that chain operators will deploy chains with well formed ERC20 tokens.
     */
    depositERC20Transaction(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: boolean,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in         deriving deposit transactions. Note that if a deposit is made by a contract, its         address will be aliased when retrieved using `tx.origin` or `msg.sender`. Consider         using the CrossDomainMessenger contracts for a simpler developer experience.
     * @param _data Data to trigger the recipient with.
     * @param _gasLimit Amount of L2 gas to purchase by burning gas on L1.
     * @param _isCreation Whether or not the transaction is a contract creation.
     * @param _to Target address on L2.
     * @param _value ETH value to send to the recipient.
     */
    depositTransaction(
      _to: BytesLike,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A mapping of dispute game addresses to whether or not they are blacklisted.
     */
    disputeGameBlacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Address of the DisputeGameFactory.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the dispute game finality delay.
     */
    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Accepts ETH value without triggering a deposit to L2.         This function mainly exists for the sake of the migration between the legacy         Optimism system and Bedrock.
     */
    donateETH(overrides?: CallOverrides): Promise<void>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawalTransactionExternalProof(
      _tx: Types.WithdrawalTransactionStruct,
      _proofSubmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A list of withdrawal hashes which have been successfully finalized.
     */
    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Getter function for the address of the guardian.         Public getter is legacy and will be removed in the future. Use `SuperchainConfig.guardian()` instead.
     */
    guardian(overrides?: CallOverrides): Promise<string>;

    /**
     * Initializer.
     * @param _disputeGameFactory Contract of the DisputeGameFactory.
     * @param _superchainConfig Contract of the SuperchainConfig.
     * @param _systemConfig Contract of the SystemConfig.
     */
    initialize(
      _disputeGameFactory: string,
      _systemConfig: string,
      _superchainConfig: string,
      _initialRespectedGameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Address of the L2 account which initiated a withdrawal in this transaction.         If the of this variable is the default L2 sender address, then we are NOT inside of         a call to finalizeWithdrawalTransaction.
     */
    l2Sender(overrides?: CallOverrides): Promise<string>;

    /**
     * Computes the minimum gas limit for a deposit.         The minimum gas limit linearly increases based on the size of the calldata.         This is to prevent users from creating L2 resource usage without paying for it.         This function can be used when interacting with the portal to ensure forwards         compatibility.
     * @param _byteCount Number of bytes in the calldata.
     */
    minimumGasLimit(
      _byteCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * External getter for the number of proof submitters for a withdrawal hash.
     * @param _withdrawalHash Hash of the withdrawal.
     */
    numProofSubmitters(
      _withdrawalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    /**
     * Getter for the current paused status.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Getter for the proof maturity delay.
     */
    proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Mapping of withdrawal hashes to addresses that have submitted a proof for the withdrawal.
     */
    proofSubmitters(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    proveWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _disputeGameIndex: BigNumberish,
      _pdaPubkey: BytesLike,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * A mapping of withdrawal hashes to proof submitters to `ProvenWithdrawal` data.
     */
    provenWithdrawals(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { disputeGameProxy: string; timestamp: BigNumber }
    >;

    /**
     * The game type that the OptimismPortal consults for output proposals.
     */
    respectedGameType(overrides?: CallOverrides): Promise<number>;

    /**
     * The timestamp at which the respected game type was last updated.
     */
    respectedGameTypeUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sets the respected game type. Changing this value can alter the security properties of the system,         depending on the new game's behavior.
     * @param _gameType The game type to consult for output proposals.
     */
    setRespectedGameType(
      _gameType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Contract of the Superchain Config.
     */
    superchainConfig(overrides?: CallOverrides): Promise<string>;

    /**
     * Contract of the SystemConfig.
     */
    systemConfig(overrides?: CallOverrides): Promise<string>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DisputeGameBlacklisted(address)"(
      disputeGame?: string | null
    ): DisputeGameBlacklistedEventFilter;
    DisputeGameBlacklisted(
      disputeGame?: string | null
    ): DisputeGameBlacklistedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RespectedGameTypeSet(uint32,uint64)"(
      newGameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;
    RespectedGameTypeSet(
      newGameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;

    "TransactionDeposited(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      version?: BigNumberish | null,
      opaqueData?: null
    ): TransactionDepositedEventFilter;
    TransactionDeposited(
      from?: string | null,
      to?: BytesLike | null,
      version?: BigNumberish | null,
      opaqueData?: null
    ): TransactionDepositedEventFilter;

    "WithdrawalFinalized(bytes32,bool)"(
      withdrawalHash?: BytesLike | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      withdrawalHash?: BytesLike | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;

    "WithdrawalProven(bytes32,bytes32,address)"(
      withdrawalHash?: BytesLike | null,
      from?: BytesLike | null,
      to?: string | null
    ): WithdrawalProvenEventFilter;
    WithdrawalProven(
      withdrawalHash?: BytesLike | null,
      from?: BytesLike | null,
      to?: string | null
    ): WithdrawalProvenEventFilter;

    "WithdrawalProvenExtension1(bytes32,address)"(
      withdrawalHash?: BytesLike | null,
      proofSubmitter?: string | null
    ): WithdrawalProvenExtension1EventFilter;
    WithdrawalProvenExtension1(
      withdrawalHash?: BytesLike | null,
      proofSubmitter?: string | null
    ): WithdrawalProvenExtension1EventFilter;
  };

  estimateGas: {
    /**
     * Minimal deposit value
     */
    MIN_BRIDGE_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the balance of the contract.
     */
    balance(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Blacklists a dispute game. Should only be used in the event that a dispute game resolves incorrectly.
     * @param _disputeGame Dispute game to blacklist.
     */
    blacklistDisputeGame(
      _disputeGame: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Checks if a withdrawal can be finalized. This function will revert if the withdrawal cannot be         finalized, and otherwise has no side-effects.
     * @param _proofSubmitter The submitter of the proof for the withdrawal hash
     * @param _withdrawalHash Hash of the withdrawal to check.
     */
    checkWithdrawal(
      _withdrawalHash: BytesLike,
      _proofSubmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Entrypoint to depositing an ERC20 token as a custom gas token.         This function depends on a well formed ERC20 token. There are only         so many checks that can be done on chain for this so it is assumed         that chain operators will deploy chains with well formed ERC20 tokens.
     */
    depositERC20Transaction(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: boolean,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in         deriving deposit transactions. Note that if a deposit is made by a contract, its         address will be aliased when retrieved using `tx.origin` or `msg.sender`. Consider         using the CrossDomainMessenger contracts for a simpler developer experience.
     * @param _data Data to trigger the recipient with.
     * @param _gasLimit Amount of L2 gas to purchase by burning gas on L1.
     * @param _isCreation Whether or not the transaction is a contract creation.
     * @param _to Target address on L2.
     * @param _value ETH value to send to the recipient.
     */
    depositTransaction(
      _to: BytesLike,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A mapping of dispute game addresses to whether or not they are blacklisted.
     */
    disputeGameBlacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Address of the DisputeGameFactory.
     */
    disputeGameFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the dispute game finality delay.
     */
    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Accepts ETH value without triggering a deposit to L2.         This function mainly exists for the sake of the migration between the legacy         Optimism system and Bedrock.
     */
    donateETH(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalizeWithdrawalTransactionExternalProof(
      _tx: Types.WithdrawalTransactionStruct,
      _proofSubmitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A list of withdrawal hashes which have been successfully finalized.
     */
    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Getter function for the address of the guardian.         Public getter is legacy and will be removed in the future. Use `SuperchainConfig.guardian()` instead.
     */
    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Initializer.
     * @param _disputeGameFactory Contract of the DisputeGameFactory.
     * @param _superchainConfig Contract of the SuperchainConfig.
     * @param _systemConfig Contract of the SystemConfig.
     */
    initialize(
      _disputeGameFactory: string,
      _systemConfig: string,
      _superchainConfig: string,
      _initialRespectedGameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Address of the L2 account which initiated a withdrawal in this transaction.         If the of this variable is the default L2 sender address, then we are NOT inside of         a call to finalizeWithdrawalTransaction.
     */
    l2Sender(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Computes the minimum gas limit for a deposit.         The minimum gas limit linearly increases based on the size of the calldata.         This is to prevent users from creating L2 resource usage without paying for it.         This function can be used when interacting with the portal to ensure forwards         compatibility.
     * @param _byteCount Number of bytes in the calldata.
     */
    minimumGasLimit(
      _byteCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * External getter for the number of proof submitters for a withdrawal hash.
     * @param _withdrawalHash Hash of the withdrawal.
     */
    numProofSubmitters(
      _withdrawalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the current paused status.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the proof maturity delay.
     */
    proofMaturityDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Mapping of withdrawal hashes to addresses that have submitted a proof for the withdrawal.
     */
    proofSubmitters(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _disputeGameIndex: BigNumberish,
      _pdaPubkey: BytesLike,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A mapping of withdrawal hashes to proof submitters to `ProvenWithdrawal` data.
     */
    provenWithdrawals(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The game type that the OptimismPortal consults for output proposals.
     */
    respectedGameType(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The timestamp at which the respected game type was last updated.
     */
    respectedGameTypeUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sets the respected game type. Changing this value can alter the security properties of the system,         depending on the new game's behavior.
     * @param _gameType The game type to consult for output proposals.
     */
    setRespectedGameType(
      _gameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Contract of the Superchain Config.
     */
    superchainConfig(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Contract of the SystemConfig.
     */
    systemConfig(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Minimal deposit value
     */
    MIN_BRIDGE_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the balance of the contract.
     */
    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Blacklists a dispute game. Should only be used in the event that a dispute game resolves incorrectly.
     * @param _disputeGame Dispute game to blacklist.
     */
    blacklistDisputeGame(
      _disputeGame: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a withdrawal can be finalized. This function will revert if the withdrawal cannot be         finalized, and otherwise has no side-effects.
     * @param _proofSubmitter The submitter of the proof for the withdrawal hash
     * @param _withdrawalHash Hash of the withdrawal to check.
     */
    checkWithdrawal(
      _withdrawalHash: BytesLike,
      _proofSubmitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Entrypoint to depositing an ERC20 token as a custom gas token.         This function depends on a well formed ERC20 token. There are only         so many checks that can be done on chain for this so it is assumed         that chain operators will deploy chains with well formed ERC20 tokens.
     */
    depositERC20Transaction(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: boolean,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Accepts deposits of ETH and data, and emits a TransactionDeposited event for use in         deriving deposit transactions. Note that if a deposit is made by a contract, its         address will be aliased when retrieved using `tx.origin` or `msg.sender`. Consider         using the CrossDomainMessenger contracts for a simpler developer experience.
     * @param _data Data to trigger the recipient with.
     * @param _gasLimit Amount of L2 gas to purchase by burning gas on L1.
     * @param _isCreation Whether or not the transaction is a contract creation.
     * @param _to Target address on L2.
     * @param _value ETH value to send to the recipient.
     */
    depositTransaction(
      _to: BytesLike,
      _value: BigNumberish,
      _gasLimit: BigNumberish,
      _isCreation: boolean,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of dispute game addresses to whether or not they are blacklisted.
     */
    disputeGameBlacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Address of the DisputeGameFactory.
     */
    disputeGameFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for the dispute game finality delay.
     */
    disputeGameFinalityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Accepts ETH value without triggering a deposit to L2.         This function mainly exists for the sake of the migration between the legacy         Optimism system and Bedrock.
     */
    donateETH(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawalTransactionExternalProof(
      _tx: Types.WithdrawalTransactionStruct,
      _proofSubmitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A list of withdrawal hashes which have been successfully finalized.
     */
    finalizedWithdrawals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter function for the address of the guardian.         Public getter is legacy and will be removed in the future. Use `SuperchainConfig.guardian()` instead.
     */
    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Initializer.
     * @param _disputeGameFactory Contract of the DisputeGameFactory.
     * @param _superchainConfig Contract of the SuperchainConfig.
     * @param _systemConfig Contract of the SystemConfig.
     */
    initialize(
      _disputeGameFactory: string,
      _systemConfig: string,
      _superchainConfig: string,
      _initialRespectedGameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Address of the L2 account which initiated a withdrawal in this transaction.         If the of this variable is the default L2 sender address, then we are NOT inside of         a call to finalizeWithdrawalTransaction.
     */
    l2Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Computes the minimum gas limit for a deposit.         The minimum gas limit linearly increases based on the size of the calldata.         This is to prevent users from creating L2 resource usage without paying for it.         This function can be used when interacting with the portal to ensure forwards         compatibility.
     * @param _byteCount Number of bytes in the calldata.
     */
    minimumGasLimit(
      _byteCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * External getter for the number of proof submitters for a withdrawal hash.
     * @param _withdrawalHash Hash of the withdrawal.
     */
    numProofSubmitters(
      _withdrawalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * EIP-1559 style gas parameters.
     */
    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the current paused status.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the proof maturity delay.
     */
    proofMaturityDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mapping of withdrawal hashes to addresses that have submitted a proof for the withdrawal.
     */
    proofSubmitters(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _disputeGameIndex: BigNumberish,
      _pdaPubkey: BytesLike,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A mapping of withdrawal hashes to proof submitters to `ProvenWithdrawal` data.
     */
    provenWithdrawals(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The game type that the OptimismPortal consults for output proposals.
     */
    respectedGameType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The timestamp at which the respected game type was last updated.
     */
    respectedGameTypeUpdatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the respected game type. Changing this value can alter the security properties of the system,         depending on the new game's behavior.
     * @param _gameType The game type to consult for output proposals.
     */
    setRespectedGameType(
      _gameType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Contract of the Superchain Config.
     */
    superchainConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Contract of the SystemConfig.
     */
    systemConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
