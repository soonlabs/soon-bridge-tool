/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  KailuaTournament,
  KailuaTournamentInterface,
} from "./KailuaTournament";

const _abi = [
  {
    type: "function",
    name: "DISPUTE_GAME_FACTORY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract DisputeGameFactory",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "FPVM_IMAGE_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "GAME_TYPE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "GameType",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "KAILUA_TREASURY",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IKailuaTreasury",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "OPTIMISM_PORTAL",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract OptimismPortal2",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "OUTPUT_BLOCK_SPAN",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PROPOSAL_BLOBS",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PROPOSAL_OUTPUT_COUNT",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "RISC_ZERO_VERIFIER",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRiscZeroVerifier",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ROLLUP_CONFIG_HASH",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "appendChild",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "blobsHash",
    inputs: [],
    outputs: [
      {
        name: "blobsHash_",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "childCount",
    inputs: [],
    outputs: [
      {
        name: "count_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "children",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract KailuaTournament",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "contenderDuplicates",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "contenderIndex",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createdAt",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "Timestamp",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "extraData",
    inputs: [],
    outputs: [
      {
        name: "extraData_",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "gameCreator",
    inputs: [],
    outputs: [
      {
        name: "creator_",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "gameData",
    inputs: [],
    outputs: [
      {
        name: "gameType_",
        type: "uint32",
        internalType: "GameType",
      },
      {
        name: "rootClaim_",
        type: "bytes32",
        internalType: "Claim",
      },
      {
        name: "extraData_",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gameIndex",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "gameType",
    inputs: [],
    outputs: [
      {
        name: "gameType_",
        type: "uint32",
        internalType: "GameType",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getChallengerDuration",
    inputs: [
      {
        name: "asOfTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "duration_",
        type: "uint64",
        internalType: "Duration",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "isViableSignature",
    inputs: [
      {
        name: "childSignature",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "isViableSignature_",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "l1Head",
    inputs: [],
    outputs: [
      {
        name: "l1Head_",
        type: "bytes32",
        internalType: "Hash",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "l2BlockNumber",
    inputs: [],
    outputs: [
      {
        name: "l2BlockNumber_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "opponentIndex",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "parentGame",
    inputs: [],
    outputs: [
      {
        name: "parentGame_",
        type: "address",
        internalType: "contract KailuaTournament",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proofStatus",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum ProofStatus",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proposalBlobHashes",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "Hash",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proposer",
    inputs: [],
    outputs: [
      {
        name: "proposer_",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proveOutputFault",
    inputs: [
      {
        name: "prHs",
        type: "address[2]",
        internalType: "address[2]",
      },
      {
        name: "co",
        type: "uint64[2]",
        internalType: "uint64[2]",
      },
      {
        name: "encodedSeal",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "ac",
        type: "bytes32[2]",
        internalType: "bytes32[2]",
      },
      {
        name: "proposedOutputFe",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "kzgCommitmentsProofs",
        type: "bytes[][2]",
        internalType: "bytes[][2]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proveTrailFault",
    inputs: [
      {
        name: "payoutRecipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "co",
        type: "uint64[2]",
        internalType: "uint64[2]",
      },
      {
        name: "proposedOutputFe",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "blobCommitment",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "kzgProof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proveValidity",
    inputs: [
      {
        name: "payoutRecipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "l1HeadSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "childIndex",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "encodedSeal",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "provenAt",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "Timestamp",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "prover",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pruneChildren",
    inputs: [
      {
        name: "stepLimit",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract KailuaTournament",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "resolve",
    inputs: [],
    outputs: [
      {
        name: "status_",
        type: "uint8",
        internalType: "enum GameStatus",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "resolvedAt",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "Timestamp",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rootClaim",
    inputs: [],
    outputs: [
      {
        name: "rootClaim_",
        type: "bytes32",
        internalType: "Claim",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "signature",
    inputs: [],
    outputs: [
      {
        name: "signature_",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "status",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum GameStatus",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "validChildSignature",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "verifyIntermediateOutput",
    inputs: [
      {
        name: "outputNumber",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "outputFe",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "blobCommitment",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "kzgProof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "wasRespectedGameTypeWhenCreated",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "Proven",
    inputs: [
      {
        name: "signature",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "status",
        type: "uint8",
        indexed: true,
        internalType: "enum ProofStatus",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Resolved",
    inputs: [
      {
        name: "status",
        type: "uint8",
        indexed: true,
        internalType: "enum GameStatus",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AlreadyProven",
    inputs: [],
  },
  {
    type: "error",
    name: "ClaimAlreadyResolved",
    inputs: [],
  },
  {
    type: "error",
    name: "GameNotInProgress",
    inputs: [],
  },
  {
    type: "error",
    name: "GameNotResolved",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidDataRemainder",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidDisputedClaimIndex",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidParent",
    inputs: [],
  },
  {
    type: "error",
    name: "NoConflict",
    inputs: [],
  },
  {
    type: "error",
    name: "NotProposed",
    inputs: [],
  },
  {
    type: "error",
    name: "NotProven",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownGame",
    inputs: [],
  },
] as const;

export class KailuaTournament__factory {
  static readonly abi = _abi;
  static createInterface(): KailuaTournamentInterface {
    return new utils.Interface(_abi) as KailuaTournamentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KailuaTournament {
    return new Contract(address, _abi, signerOrProvider) as KailuaTournament;
  }
}
