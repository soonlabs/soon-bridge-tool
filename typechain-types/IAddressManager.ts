/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IAddressManagerInterface extends utils.Interface {
  functions: {
    "getAddress(string)": FunctionFragment;
    "setAddress(string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getAddress" | "setAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;

  events: {
    "AddressSet(string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
}

export interface AddressSetEventObject {
  name: string;
  newAddress: string;
  oldAddress: string;
}
export type AddressSetEvent = TypedEvent<
  [string, string, string],
  AddressSetEventObject
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export interface IAddressManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAddressManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Retrieves the address associated with a given name.
     * @param _name Name to retrieve an address for.
     */
    getAddress(_name: string, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Changes the address associated with a particular name.
     * @param _address Address to associate with the name.
     * @param _name String name to associate an address with.
     */
    setAddress(
      _name: string,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Retrieves the address associated with a given name.
   * @param _name Name to retrieve an address for.
   */
  getAddress(_name: string, overrides?: CallOverrides): Promise<string>;

  /**
   * Changes the address associated with a particular name.
   * @param _address Address to associate with the name.
   * @param _name String name to associate an address with.
   */
  setAddress(
    _name: string,
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Retrieves the address associated with a given name.
     * @param _name Name to retrieve an address for.
     */
    getAddress(_name: string, overrides?: CallOverrides): Promise<string>;

    /**
     * Changes the address associated with a particular name.
     * @param _address Address to associate with the name.
     * @param _name String name to associate an address with.
     */
    setAddress(
      _name: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressSet(string,address,address)"(
      name?: string | null,
      newAddress?: null,
      oldAddress?: null
    ): AddressSetEventFilter;
    AddressSet(
      name?: string | null,
      newAddress?: null,
      oldAddress?: null
    ): AddressSetEventFilter;
  };

  estimateGas: {
    /**
     * Retrieves the address associated with a given name.
     * @param _name Name to retrieve an address for.
     */
    getAddress(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Changes the address associated with a particular name.
     * @param _address Address to associate with the name.
     * @param _name String name to associate an address with.
     */
    setAddress(
      _name: string,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Retrieves the address associated with a given name.
     * @param _name Name to retrieve an address for.
     */
    getAddress(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Changes the address associated with a particular name.
     * @param _address Address to associate with the name.
     * @param _name String name to associate an address with.
     */
    setAddress(
      _name: string,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
