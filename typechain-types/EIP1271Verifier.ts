/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EIP1271VerifierInterface extends utils.Interface {
  functions: {
    "getAttestTypeHash()": FunctionFragment;
    "getDomainSeparator()": FunctionFragment;
    "getName()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRevokeTypeHash()": FunctionFragment;
    "increaseNonce(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAttestTypeHash"
      | "getDomainSeparator"
      | "getName"
      | "getNonce"
      | "getRevokeTypeHash"
      | "increaseNonce"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAttestTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRevokeTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAttestTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;

  events: {
    "NonceIncreased(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NonceIncreased"): EventFragment;
}

export interface NonceIncreasedEventObject {
  oldNonce: BigNumber;
  newNonce: BigNumber;
}
export type NonceIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  NonceIncreasedEventObject
>;

export type NonceIncreasedEventFilter = TypedEventFilter<NonceIncreasedEvent>;

export interface EIP1271Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EIP1271VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the EIP712 type hash for the attest function.
     */
    getAttestTypeHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the domain separator used in the encoding of the signatures for attest, and revoke.
     */
    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the EIP712 name.
     */
    getName(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the current nonce per-account.
     * @param account The requested account.
     */
    getNonce(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the EIP712 type hash for the revoke function.
     */
    getRevokeTypeHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.
     * @param newNonce The (higher) new value.
     */
    increaseNonce(
      newNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the EIP712 type hash for the attest function.
   */
  getAttestTypeHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the domain separator used in the encoding of the signatures for attest, and revoke.
   */
  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the EIP712 name.
   */
  getName(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the current nonce per-account.
   * @param account The requested account.
   */
  getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the EIP712 type hash for the revoke function.
   */
  getRevokeTypeHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.
   * @param newNonce The (higher) new value.
   */
  increaseNonce(
    newNonce: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the EIP712 type hash for the attest function.
     */
    getAttestTypeHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the domain separator used in the encoding of the signatures for attest, and revoke.
     */
    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the EIP712 name.
     */
    getName(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the current nonce per-account.
     * @param account The requested account.
     */
    getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the EIP712 type hash for the revoke function.
     */
    getRevokeTypeHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.
     * @param newNonce The (higher) new value.
     */
    increaseNonce(
      newNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NonceIncreased(uint256,uint256)"(
      oldNonce?: null,
      newNonce?: null
    ): NonceIncreasedEventFilter;
    NonceIncreased(oldNonce?: null, newNonce?: null): NonceIncreasedEventFilter;
  };

  estimateGas: {
    /**
     * Returns the EIP712 type hash for the attest function.
     */
    getAttestTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the domain separator used in the encoding of the signatures for attest, and revoke.
     */
    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the EIP712 name.
     */
    getName(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the current nonce per-account.
     * @param account The requested account.
     */
    getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the EIP712 type hash for the revoke function.
     */
    getRevokeTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.
     * @param newNonce The (higher) new value.
     */
    increaseNonce(
      newNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the EIP712 type hash for the attest function.
     */
    getAttestTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the domain separator used in the encoding of the signatures for attest, and revoke.
     */
    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the EIP712 name.
     */
    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the current nonce per-account.
     * @param account The requested account.
     */
    getNonce(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the EIP712 type hash for the revoke function.
     */
    getRevokeTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.
     * @param newNonce The (higher) new value.
     */
    increaseNonce(
      newNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
