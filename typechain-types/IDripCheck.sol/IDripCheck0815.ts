/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IDripCheck0815Interface extends utils.Interface {
  functions: {
    "check(bytes)": FunctionFragment;
    "name()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "check" | "name"): FunctionFragment;

  encodeFunctionData(functionFragment: "check", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {};
}

export interface IDripCheck0815 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDripCheck0815Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { execute_: boolean }>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<[string] & { name_: string }>;
  };

  /**
   * Checks whether a drip should be executable.
   * @param _params Encoded parameters for the drip check.
   */
  check(_params: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the name of the drip check.
   */
  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(_params: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(_params: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Checks whether a drip should be executable.
     * @param _params Encoded parameters for the drip check.
     */
    check(
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the name of the drip check.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
