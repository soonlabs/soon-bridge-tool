/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface Encoding_ConverterInterface extends utils.Interface {
  functions: {
    "convertRoundTripAToB(uint240,uint16)": FunctionFragment;
    "convertRoundTripBToA(uint256)": FunctionFragment;
    "failedRoundtripAToB()": FunctionFragment;
    "failedRoundtripBToA()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "convertRoundTripAToB"
      | "convertRoundTripBToA"
      | "failedRoundtripAToB"
      | "failedRoundtripBToA"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "convertRoundTripAToB",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertRoundTripBToA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "failedRoundtripAToB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "failedRoundtripBToA",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "convertRoundTripAToB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertRoundTripBToA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedRoundtripAToB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedRoundtripBToA",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Encoding_Converter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Encoding_ConverterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Takes a pair of integers to be encoded into a versioned nonce with the         Encoding library and then decoded and updates the test contract's state         indicating if the round trip encoding failed.
     */
    convertRoundTripAToB(
      _nonce: BigNumberish,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Takes an integer representing a packed version and nonce and attempts         to decode them using the Encoding library before re-encoding and updates         the test contract's state indicating if the round trip encoding failed.
     */
    convertRoundTripBToA(
      _versionedNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    failedRoundtripAToB(overrides?: CallOverrides): Promise<[boolean]>;

    failedRoundtripBToA(overrides?: CallOverrides): Promise<[boolean]>;
  };

  /**
   * Takes a pair of integers to be encoded into a versioned nonce with the         Encoding library and then decoded and updates the test contract's state         indicating if the round trip encoding failed.
   */
  convertRoundTripAToB(
    _nonce: BigNumberish,
    _version: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Takes an integer representing a packed version and nonce and attempts         to decode them using the Encoding library before re-encoding and updates         the test contract's state indicating if the round trip encoding failed.
   */
  convertRoundTripBToA(
    _versionedNonce: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  failedRoundtripAToB(overrides?: CallOverrides): Promise<boolean>;

  failedRoundtripBToA(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    /**
     * Takes a pair of integers to be encoded into a versioned nonce with the         Encoding library and then decoded and updates the test contract's state         indicating if the round trip encoding failed.
     */
    convertRoundTripAToB(
      _nonce: BigNumberish,
      _version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Takes an integer representing a packed version and nonce and attempts         to decode them using the Encoding library before re-encoding and updates         the test contract's state indicating if the round trip encoding failed.
     */
    convertRoundTripBToA(
      _versionedNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    failedRoundtripAToB(overrides?: CallOverrides): Promise<boolean>;

    failedRoundtripBToA(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    /**
     * Takes a pair of integers to be encoded into a versioned nonce with the         Encoding library and then decoded and updates the test contract's state         indicating if the round trip encoding failed.
     */
    convertRoundTripAToB(
      _nonce: BigNumberish,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Takes an integer representing a packed version and nonce and attempts         to decode them using the Encoding library before re-encoding and updates         the test contract's state indicating if the round trip encoding failed.
     */
    convertRoundTripBToA(
      _versionedNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    failedRoundtripAToB(overrides?: CallOverrides): Promise<BigNumber>;

    failedRoundtripBToA(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Takes a pair of integers to be encoded into a versioned nonce with the         Encoding library and then decoded and updates the test contract's state         indicating if the round trip encoding failed.
     */
    convertRoundTripAToB(
      _nonce: BigNumberish,
      _version: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Takes an integer representing a packed version and nonce and attempts         to decode them using the Encoding library before re-encoding and updates         the test contract's state indicating if the round trip encoding failed.
     */
    convertRoundTripBToA(
      _versionedNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    failedRoundtripAToB(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedRoundtripBToA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
