/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface StandardBridgeTesterInterface extends utils.Interface {
  functions: {
    "ERC20SharedDecimals()": FunctionFragment;
    "MESSENGER()": FunctionFragment;
    "OTHER_BRIDGE()": FunctionFragment;
    "bridgeERC20(address,address,uint256,uint32,bytes)": FunctionFragment;
    "bridgeERC20To(address,bytes32,bytes32,uint256,uint32,bytes)": FunctionFragment;
    "bridgeETH(uint32,bytes)": FunctionFragment;
    "bridgeETHTo(bytes32,uint32,bytes)": FunctionFragment;
    "deposits(address,bytes32)": FunctionFragment;
    "finalizeBridgeERC20(address,bytes32,bytes32,address,uint256,bytes)": FunctionFragment;
    "finalizeBridgeETH(bytes32,address,uint256,bytes)": FunctionFragment;
    "isCorrectTokenPair(address,bytes32)": FunctionFragment;
    "isOptimismMintableERC20(address)": FunctionFragment;
    "messenger()": FunctionFragment;
    "otherBridge()": FunctionFragment;
    "paused()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC20SharedDecimals"
      | "MESSENGER"
      | "OTHER_BRIDGE"
      | "bridgeERC20"
      | "bridgeERC20To"
      | "bridgeETH"
      | "bridgeETHTo"
      | "deposits"
      | "finalizeBridgeERC20"
      | "finalizeBridgeETH"
      | "isCorrectTokenPair"
      | "isOptimismMintableERC20"
      | "messenger"
      | "otherBridge"
      | "paused"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC20SharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MESSENGER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OTHER_BRIDGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC20",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC20To",
    values: [
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeETH",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeETHTo",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBridgeERC20",
    values: [string, BytesLike, BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBridgeETH",
    values: [BytesLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCorrectTokenPair",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOptimismMintableERC20",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ERC20SharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MESSENGER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OTHER_BRIDGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeETHTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBridgeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBridgeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCorrectTokenPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOptimismMintableERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otherBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;

  events: {
    "ERC20BridgeFinalized(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "ERC20BridgeInitiated(address,bytes32,address,bytes32,uint256,bytes)": EventFragment;
    "ETHBridgeFinalized(bytes32,address,uint256,bytes)": EventFragment;
    "ETHBridgeInitiated(address,bytes32,uint256,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20BridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface ERC20BridgeFinalizedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  amount: BigNumber;
  extraData: string;
}
export type ERC20BridgeFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20BridgeFinalizedEventObject
>;

export type ERC20BridgeFinalizedEventFilter =
  TypedEventFilter<ERC20BridgeFinalizedEvent>;

export interface ERC20BridgeInitiatedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  amount: BigNumber;
  extraData: string;
}
export type ERC20BridgeInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20BridgeInitiatedEventObject
>;

export type ERC20BridgeInitiatedEventFilter =
  TypedEventFilter<ERC20BridgeInitiatedEvent>;

export interface ETHBridgeFinalizedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  extraData: string;
}
export type ETHBridgeFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHBridgeFinalizedEventObject
>;

export type ETHBridgeFinalizedEventFilter =
  TypedEventFilter<ETHBridgeFinalizedEvent>;

export interface ETHBridgeInitiatedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  extraData: string;
}
export type ETHBridgeInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHBridgeInitiatedEventObject
>;

export type ETHBridgeInitiatedEventFilter =
  TypedEventFilter<ETHBridgeInitiatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface StandardBridgeTester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StandardBridgeTesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Getter for the shared decimals when bridge ERC20
     */
    ERC20SharedDecimals(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Getter for messenger contract.         Public getter is legacy and will be removed in the future. Use `messenger` instead.
     */
    MESSENGER(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Getter for the other bridge contract.         Public getter is legacy and will be removed in the future. Use `otherBridge` instead.
     */
    OTHER_BRIDGE(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Sends ERC20 tokens to the sender's address on the other chain.
     */
    bridgeERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Sends ERC20 tokens to a receiver's address on the other chain.
     * @param _amount Amount of local tokens to deposit.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    bridgeERC20To(
      _localToken: string,
      _remoteToken: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Sends ETH to the sender's address on the other chain.
     */
    bridgeETH(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Sends ETH to a receiver's address on the other chain. Note that if ETH is sent to a         smart contract and the call fails, the ETH will be temporarily locked in the         StandardBridge on the other chain until the call is replayed. If the call cannot be         replayed with any amount of gas (call always reverts), then the ETH will be         permanently locked in the StandardBridge on the other chain. ETH will also         be locked if the receiver is the other bridge, because finalizeBridgeETH will revert         in that case.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _to Address of the receiver.
     */
    bridgeETHTo(
      _to: BytesLike,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Mapping that stores deposits for a given pair of local and remote tokens.
     */
    deposits(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Finalizes an ERC20 bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of the ERC20 being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _from Address of the sender.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: BytesLike,
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Finalizes an ETH bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of ETH being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                   not be triggered with this data, but it will be emitted and can be used                   to identify the transaction.
     * @param _from Address of the sender.
     * @param _to Address of the receiver.
     */
    finalizeBridgeETH(
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    isCorrectTokenPair(
      _mintableToken: string,
      _otherToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOptimismMintableERC20(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Messenger contract on this domain.
     */
    messenger(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Corresponding bridge on the other domain.
     */
    otherBridge(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This function should return true if the contract is paused.         On L1 this function will check the SuperchainConfig for its paused status.         On L2 this function should be a no-op.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;
  };

  /**
   * Getter for the shared decimals when bridge ERC20
   */
  ERC20SharedDecimals(overrides?: CallOverrides): Promise<number>;

  /**
   * Getter for messenger contract.         Public getter is legacy and will be removed in the future. Use `messenger` instead.
   */
  MESSENGER(overrides?: CallOverrides): Promise<string>;

  /**
   * Getter for the other bridge contract.         Public getter is legacy and will be removed in the future. Use `otherBridge` instead.
   */
  OTHER_BRIDGE(overrides?: CallOverrides): Promise<string>;

  /**
   * Sends ERC20 tokens to the sender's address on the other chain.
   */
  bridgeERC20(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Sends ERC20 tokens to a receiver's address on the other chain.
   * @param _amount Amount of local tokens to deposit.
   * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
   * @param _localToken Address of the ERC20 on this chain.
   * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
   * @param _remoteToken Address of the corresponding token on the remote chain.
   * @param _to Address of the receiver.
   */
  bridgeERC20To(
    _localToken: string,
    _remoteToken: BytesLike,
    _to: BytesLike,
    _amount: BigNumberish,
    _minGasLimit: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Sends ETH to the sender's address on the other chain.
   */
  bridgeETH(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Sends ETH to a receiver's address on the other chain. Note that if ETH is sent to a         smart contract and the call fails, the ETH will be temporarily locked in the         StandardBridge on the other chain until the call is replayed. If the call cannot be         replayed with any amount of gas (call always reverts), then the ETH will be         permanently locked in the StandardBridge on the other chain. ETH will also         be locked if the receiver is the other bridge, because finalizeBridgeETH will revert         in that case.
   * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
   * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
   * @param _to Address of the receiver.
   */
  bridgeETHTo(
    _to: BytesLike,
    _minGasLimit: BigNumberish,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Mapping that stores deposits for a given pair of local and remote tokens.
   */
  deposits(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Finalizes an ERC20 bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
   * @param _amount Amount of the ERC20 being bridged.
   * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
   * @param _from Address of the sender.
   * @param _localToken Address of the ERC20 on this chain.
   * @param _remoteToken Address of the corresponding token on the remote chain.
   * @param _to Address of the receiver.
   */
  finalizeBridgeERC20(
    _localToken: string,
    _remoteToken: BytesLike,
    _from: BytesLike,
    _to: string,
    _amount: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Finalizes an ETH bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
   * @param _amount Amount of ETH being bridged.
   * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                   not be triggered with this data, but it will be emitted and can be used                   to identify the transaction.
   * @param _from Address of the sender.
   * @param _to Address of the receiver.
   */
  finalizeBridgeETH(
    _from: BytesLike,
    _to: string,
    _amount: BigNumberish,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  isCorrectTokenPair(
    _mintableToken: string,
    _otherToken: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOptimismMintableERC20(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Messenger contract on this domain.
   */
  messenger(overrides?: CallOverrides): Promise<string>;

  /**
   * Corresponding bridge on the other domain.
   */
  otherBridge(overrides?: CallOverrides): Promise<string>;

  /**
   * This function should return true if the contract is paused.         On L1 this function will check the SuperchainConfig for its paused status.         On L2 this function should be a no-op.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    /**
     * Getter for the shared decimals when bridge ERC20
     */
    ERC20SharedDecimals(overrides?: CallOverrides): Promise<number>;

    /**
     * Getter for messenger contract.         Public getter is legacy and will be removed in the future. Use `messenger` instead.
     */
    MESSENGER(overrides?: CallOverrides): Promise<string>;

    /**
     * Getter for the other bridge contract.         Public getter is legacy and will be removed in the future. Use `otherBridge` instead.
     */
    OTHER_BRIDGE(overrides?: CallOverrides): Promise<string>;

    /**
     * Sends ERC20 tokens to the sender's address on the other chain.
     */
    bridgeERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sends ERC20 tokens to a receiver's address on the other chain.
     * @param _amount Amount of local tokens to deposit.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    bridgeERC20To(
      _localToken: string,
      _remoteToken: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sends ETH to the sender's address on the other chain.
     */
    bridgeETH(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sends ETH to a receiver's address on the other chain. Note that if ETH is sent to a         smart contract and the call fails, the ETH will be temporarily locked in the         StandardBridge on the other chain until the call is replayed. If the call cannot be         replayed with any amount of gas (call always reverts), then the ETH will be         permanently locked in the StandardBridge on the other chain. ETH will also         be locked if the receiver is the other bridge, because finalizeBridgeETH will revert         in that case.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _to Address of the receiver.
     */
    bridgeETHTo(
      _to: BytesLike,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Mapping that stores deposits for a given pair of local and remote tokens.
     */
    deposits(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes an ERC20 bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of the ERC20 being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _from Address of the sender.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: BytesLike,
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Finalizes an ETH bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of ETH being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                   not be triggered with this data, but it will be emitted and can be used                   to identify the transaction.
     * @param _from Address of the sender.
     * @param _to Address of the receiver.
     */
    finalizeBridgeETH(
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isCorrectTokenPair(
      _mintableToken: string,
      _otherToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOptimismMintableERC20(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Messenger contract on this domain.
     */
    messenger(overrides?: CallOverrides): Promise<string>;

    /**
     * Corresponding bridge on the other domain.
     */
    otherBridge(overrides?: CallOverrides): Promise<string>;

    /**
     * This function should return true if the contract is paused.         On L1 this function will check the SuperchainConfig for its paused status.         On L2 this function should be a no-op.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ERC20BridgeFinalized(address,bytes32,bytes32,address,uint256,bytes)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      extraData?: null
    ): ERC20BridgeFinalizedEventFilter;
    ERC20BridgeFinalized(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      extraData?: null
    ): ERC20BridgeFinalizedEventFilter;

    "ERC20BridgeInitiated(address,bytes32,address,bytes32,uint256,bytes)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      extraData?: null
    ): ERC20BridgeInitiatedEventFilter;
    ERC20BridgeInitiated(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      extraData?: null
    ): ERC20BridgeInitiatedEventFilter;

    "ETHBridgeFinalized(bytes32,address,uint256,bytes)"(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      extraData?: null
    ): ETHBridgeFinalizedEventFilter;
    ETHBridgeFinalized(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      extraData?: null
    ): ETHBridgeFinalizedEventFilter;

    "ETHBridgeInitiated(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      extraData?: null
    ): ETHBridgeInitiatedEventFilter;
    ETHBridgeInitiated(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      extraData?: null
    ): ETHBridgeInitiatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    /**
     * Getter for the shared decimals when bridge ERC20
     */
    ERC20SharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for messenger contract.         Public getter is legacy and will be removed in the future. Use `messenger` instead.
     */
    MESSENGER(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Getter for the other bridge contract.         Public getter is legacy and will be removed in the future. Use `otherBridge` instead.
     */
    OTHER_BRIDGE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sends ERC20 tokens to the sender's address on the other chain.
     */
    bridgeERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Sends ERC20 tokens to a receiver's address on the other chain.
     * @param _amount Amount of local tokens to deposit.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    bridgeERC20To(
      _localToken: string,
      _remoteToken: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Sends ETH to the sender's address on the other chain.
     */
    bridgeETH(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Sends ETH to a receiver's address on the other chain. Note that if ETH is sent to a         smart contract and the call fails, the ETH will be temporarily locked in the         StandardBridge on the other chain until the call is replayed. If the call cannot be         replayed with any amount of gas (call always reverts), then the ETH will be         permanently locked in the StandardBridge on the other chain. ETH will also         be locked if the receiver is the other bridge, because finalizeBridgeETH will revert         in that case.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _to Address of the receiver.
     */
    bridgeETHTo(
      _to: BytesLike,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Mapping that stores deposits for a given pair of local and remote tokens.
     */
    deposits(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Finalizes an ERC20 bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of the ERC20 being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _from Address of the sender.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: BytesLike,
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Finalizes an ETH bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of ETH being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                   not be triggered with this data, but it will be emitted and can be used                   to identify the transaction.
     * @param _from Address of the sender.
     * @param _to Address of the receiver.
     */
    finalizeBridgeETH(
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    isCorrectTokenPair(
      _mintableToken: string,
      _otherToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOptimismMintableERC20(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Messenger contract on this domain.
     */
    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Corresponding bridge on the other domain.
     */
    otherBridge(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function should return true if the contract is paused.         On L1 this function will check the SuperchainConfig for its paused status.         On L2 this function should be a no-op.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Getter for the shared decimals when bridge ERC20
     */
    ERC20SharedDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Getter for messenger contract.         Public getter is legacy and will be removed in the future. Use `messenger` instead.
     */
    MESSENGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Getter for the other bridge contract.         Public getter is legacy and will be removed in the future. Use `otherBridge` instead.
     */
    OTHER_BRIDGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Sends ERC20 tokens to the sender's address on the other chain.
     */
    bridgeERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Sends ERC20 tokens to a receiver's address on the other chain.
     * @param _amount Amount of local tokens to deposit.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    bridgeERC20To(
      _localToken: string,
      _remoteToken: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Sends ETH to the sender's address on the other chain.
     */
    bridgeETH(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Sends ETH to a receiver's address on the other chain. Note that if ETH is sent to a         smart contract and the call fails, the ETH will be temporarily locked in the         StandardBridge on the other chain until the call is replayed. If the call cannot be         replayed with any amount of gas (call always reverts), then the ETH will be         permanently locked in the StandardBridge on the other chain. ETH will also         be locked if the receiver is the other bridge, because finalizeBridgeETH will revert         in that case.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _minGasLimit Minimum amount of gas that the bridge can be relayed with.
     * @param _to Address of the receiver.
     */
    bridgeETHTo(
      _to: BytesLike,
      _minGasLimit: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Mapping that stores deposits for a given pair of local and remote tokens.
     */
    deposits(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Finalizes an ERC20 bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of the ERC20 being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                     not be triggered with this data, but it will be emitted and can be used                     to identify the transaction.
     * @param _from Address of the sender.
     * @param _localToken Address of the ERC20 on this chain.
     * @param _remoteToken Address of the corresponding token on the remote chain.
     * @param _to Address of the receiver.
     */
    finalizeBridgeERC20(
      _localToken: string,
      _remoteToken: BytesLike,
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Finalizes an ETH bridge on this chain. Can only be triggered by the other         StandardBridge contract on the remote chain.
     * @param _amount Amount of ETH being bridged.
     * @param _extraData Extra data to be sent with the transaction. Note that the recipient will                   not be triggered with this data, but it will be emitted and can be used                   to identify the transaction.
     * @param _from Address of the sender.
     * @param _to Address of the receiver.
     */
    finalizeBridgeETH(
      _from: BytesLike,
      _to: string,
      _amount: BigNumberish,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isCorrectTokenPair(
      _mintableToken: string,
      _otherToken: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOptimismMintableERC20(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Messenger contract on this domain.
     */
    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Corresponding bridge on the other domain.
     */
    otherBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function should return true if the contract is paused.         On L1 this function will check the SuperchainConfig for its paused status.         On L2 this function should be a no-op.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
