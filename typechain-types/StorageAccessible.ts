/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StorageAccessibleInterface extends utils.Interface {
  functions: {
    "getStorageAt(uint256,uint256)": FunctionFragment;
    "simulateAndRevert(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getStorageAt" | "simulateAndRevert"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStorageAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateAndRevert",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getStorageAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateAndRevert",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StorageAccessible extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StorageAccessibleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Reads `length` bytes of storage in the currents contract
   * @param length - the number of words (32 bytes) of data to read
   * @param offset - the offset in the current contract's storage in words to start reading from
   */
  getStorageAt(
    offset: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
   * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
   * @param targetContract Address of the contract containing the code to execute.
   */
  simulateAndRevert(
    targetContract: string,
    calldataPayload: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Reads `length` bytes of storage in the currents contract
     * @param length - the number of words (32 bytes) of data to read
     * @param offset - the offset in the current contract's storage in words to start reading from
     */
    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.
     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).
     * @param targetContract Address of the contract containing the code to execute.
     */
    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
