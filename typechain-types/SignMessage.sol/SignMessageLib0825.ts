/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface SignMessageLib0825Interface extends utils.Interface {
  functions: {
    "getMessageHash(bytes)": FunctionFragment;
    "signMessage(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getMessageHash" | "signMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signMessage",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signMessage",
    data: BytesLike
  ): Result;

  events: {
    "SignMsg(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SignMsg"): EventFragment;
}

export interface SignMsgEventObject {
  msgHash: string;
}
export type SignMsgEvent = TypedEvent<[string], SignMsgEventObject>;

export type SignMsgEventFilter = TypedEventFilter<SignMsgEvent>;

export interface SignMessageLib0825 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignMessageLib0825Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Marks a message as signed, so that it can be used with EIP-1271
     * Marks a message (`_data`) as signed.
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns hash of a message that can be signed by owners.
   * @param message Message that should be hashed
   */
  getMessageHash(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Marks a message as signed, so that it can be used with EIP-1271
   * Marks a message (`_data`) as signed.
   * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
   */
  signMessage(
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Marks a message as signed, so that it can be used with EIP-1271
     * Marks a message (`_data`) as signed.
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(_data: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SignMsg(bytes32)"(msgHash?: BytesLike | null): SignMsgEventFilter;
    SignMsg(msgHash?: BytesLike | null): SignMsgEventFilter;
  };

  estimateGas: {
    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Marks a message as signed, so that it can be used with EIP-1271
     * Marks a message (`_data`) as signed.
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns hash of a message that can be signed by owners.
     * @param message Message that should be hashed
     */
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Marks a message as signed, so that it can be used with EIP-1271
     * Marks a message (`_data`) as signed.
     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this)
     */
    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
