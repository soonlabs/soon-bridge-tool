/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: string; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [string, string[]] & {
    addr: string;
    artifacts: string[];
  };
}

export interface L2OutputOracle_proposeL2Output_TestInterface
  extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "L1()": FunctionFragment;
    "enableAltDA()": FunctionFragment;
    "enableCustomGasToken(address)": FunctionFragment;
    "enableFaultProofs()": FunctionFragment;
    "enableInterop()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "proposeAnotherOutput()": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetInterfaces()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "test_proposeL2Output_emptyOutput_reverts()": FunctionFragment;
    "test_proposeL2Output_futureTimetamp_reverts()": FunctionFragment;
    "test_proposeL2Output_notProposer_reverts()": FunctionFragment;
    "test_proposeL2Output_proposeAnotherOutput_succeeds()": FunctionFragment;
    "test_proposeL2Output_unexpectedBlockNumber_reverts()": FunctionFragment;
    "test_proposeL2Output_unmatchedBlockhash_reverts()": FunctionFragment;
    "test_proposeL2Output_wrongFork_reverts()": FunctionFragment;
    "test_proposeWithBlockhashAndHeight_succeeds()": FunctionFragment;
    "warpToProposeTime(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "L1"
      | "enableAltDA"
      | "enableCustomGasToken"
      | "enableFaultProofs"
      | "enableInterop"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "proposeAnotherOutput"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "test_proposeL2Output_emptyOutput_reverts"
      | "test_proposeL2Output_futureTimetamp_reverts"
      | "test_proposeL2Output_notProposer_reverts"
      | "test_proposeL2Output_proposeAnotherOutput_succeeds"
      | "test_proposeL2Output_unexpectedBlockNumber_reverts"
      | "test_proposeL2Output_unmatchedBlockhash_reverts"
      | "test_proposeL2Output_wrongFork_reverts"
      | "test_proposeWithBlockhashAndHeight_succeeds"
      | "warpToProposeTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "L1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enableAltDA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCustomGasToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableFaultProofs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableInterop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAnotherOutput",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_emptyOutput_reverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_futureTimetamp_reverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_notProposer_reverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_proposeAnotherOutput_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_unexpectedBlockNumber_reverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_unmatchedBlockhash_reverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeL2Output_wrongFork_reverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_proposeWithBlockhashAndHeight_succeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "warpToProposeTime",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "L1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableAltDA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCustomGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableFaultProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableInterop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAnotherOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_emptyOutput_reverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_futureTimetamp_reverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_notProposer_reverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_proposeAnotherOutput_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_unexpectedBlockNumber_reverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_unmatchedBlockhash_reverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeL2Output_wrongFork_reverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_proposeWithBlockhashAndHeight_succeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "warpToProposeTime",
    data: BytesLike
  ): Result;

  events: {
    "DepositFailed(address,address,address,address,uint256,bytes)": EventFragment;
    "DepositFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "DisputeGameBlacklisted(address)": EventFragment;
    "ERC20BridgeFinalized(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "ERC20BridgeInitiated(address,bytes32,address,bytes32,uint256,bytes)": EventFragment;
    "ERC20DepositInitiated(address,bytes32,address,bytes32,uint256,bytes)": EventFragment;
    "ERC20WithdrawalFinalized(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "ETHBridgeFinalized(bytes32,address,uint256,bytes)": EventFragment;
    "ETHBridgeInitiated(address,bytes32,uint256,bytes)": EventFragment;
    "ETHDepositInitiated(address,bytes32,uint256,bytes)": EventFragment;
    "ETHWithdrawalFinalized(bytes32,address,uint256,bytes)": EventFragment;
    "FailedRelayedMessage(bytes32)": EventFragment;
    "MessagePassed(uint256,address,address,uint256,uint256,bytes,bytes32)": EventFragment;
    "OutputProposed(bytes32,uint256,uint256,uint256)": EventFragment;
    "OutputsDeleted(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(string)": EventFragment;
    "RelayedMessage(bytes32)": EventFragment;
    "RespectedGameTypeSet(uint32,uint64)": EventFragment;
    "SentMessage(bytes32,address,bytes,uint256,uint256)": EventFragment;
    "SentMessageExtension1(address,uint256)": EventFragment;
    "TransactionDeposited(address,bytes32,uint256,bytes)": EventFragment;
    "TransactionDeposited(address,bytes32,uint256,uint256,uint64,bool,bytes)": EventFragment;
    "Unpaused()": EventFragment;
    "WhatHappened(bool,bytes)": EventFragment;
    "Withdrawal(uint256,address,address)": EventFragment;
    "WithdrawalFinalized(bytes32,bool)": EventFragment;
    "WithdrawalInitiated(address,bytes32,bytes32,address,uint256,bytes)": EventFragment;
    "WithdrawalProven(bytes32,bytes32,address)": EventFragment;
    "WithdrawalProvenExtension1(bytes32,address)": EventFragment;
    "WithdrawerBalanceBurnt(uint256)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeGameBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20BridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20DepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20WithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHBridgeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHDepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHWithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FailedRelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessagePassed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputsDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RespectedGameTypeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessageExtension1"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransactionDeposited(address,bytes32,uint256,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransactionDeposited(address,bytes32,uint256,uint256,uint64,bool,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhatHappened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalProven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalProvenExtension1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawerBalanceBurnt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface DepositFailedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type DepositFailedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  DepositFailedEventObject
>;

export type DepositFailedEventFilter = TypedEventFilter<DepositFailedEvent>;

export interface DepositFinalizedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type DepositFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  DepositFinalizedEventObject
>;

export type DepositFinalizedEventFilter =
  TypedEventFilter<DepositFinalizedEvent>;

export interface DisputeGameBlacklistedEventObject {
  disputeGame: string;
}
export type DisputeGameBlacklistedEvent = TypedEvent<
  [string],
  DisputeGameBlacklistedEventObject
>;

export type DisputeGameBlacklistedEventFilter =
  TypedEventFilter<DisputeGameBlacklistedEvent>;

export interface ERC20BridgeFinalizedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20BridgeFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20BridgeFinalizedEventObject
>;

export type ERC20BridgeFinalizedEventFilter =
  TypedEventFilter<ERC20BridgeFinalizedEvent>;

export interface ERC20BridgeInitiatedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20BridgeInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20BridgeInitiatedEventObject
>;

export type ERC20BridgeInitiatedEventFilter =
  TypedEventFilter<ERC20BridgeInitiatedEvent>;

export interface ERC20DepositInitiatedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20DepositInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20DepositInitiatedEventObject
>;

export type ERC20DepositInitiatedEventFilter =
  TypedEventFilter<ERC20DepositInitiatedEvent>;

export interface ERC20WithdrawalFinalizedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ERC20WithdrawalFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC20WithdrawalFinalizedEventObject
>;

export type ERC20WithdrawalFinalizedEventFilter =
  TypedEventFilter<ERC20WithdrawalFinalizedEvent>;

export interface ETHBridgeFinalizedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHBridgeFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHBridgeFinalizedEventObject
>;

export type ETHBridgeFinalizedEventFilter =
  TypedEventFilter<ETHBridgeFinalizedEvent>;

export interface ETHBridgeInitiatedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHBridgeInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHBridgeInitiatedEventObject
>;

export type ETHBridgeInitiatedEventFilter =
  TypedEventFilter<ETHBridgeInitiatedEvent>;

export interface ETHDepositInitiatedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHDepositInitiatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHDepositInitiatedEventObject
>;

export type ETHDepositInitiatedEventFilter =
  TypedEventFilter<ETHDepositInitiatedEvent>;

export interface ETHWithdrawalFinalizedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type ETHWithdrawalFinalizedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ETHWithdrawalFinalizedEventObject
>;

export type ETHWithdrawalFinalizedEventFilter =
  TypedEventFilter<ETHWithdrawalFinalizedEvent>;

export interface FailedRelayedMessageEventObject {
  msgHash: string;
}
export type FailedRelayedMessageEvent = TypedEvent<
  [string],
  FailedRelayedMessageEventObject
>;

export type FailedRelayedMessageEventFilter =
  TypedEventFilter<FailedRelayedMessageEvent>;

export interface MessagePassedEventObject {
  nonce: BigNumber;
  sender: string;
  target: string;
  value: BigNumber;
  gasLimit: BigNumber;
  data: string;
  withdrawalHash: string;
}
export type MessagePassedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string, string],
  MessagePassedEventObject
>;

export type MessagePassedEventFilter = TypedEventFilter<MessagePassedEvent>;

export interface OutputProposedEventObject {
  outputRoot: string;
  l2OutputIndex: BigNumber;
  l2BlockNumber: BigNumber;
  l1Timestamp: BigNumber;
}
export type OutputProposedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutputProposedEventObject
>;

export type OutputProposedEventFilter = TypedEventFilter<OutputProposedEvent>;

export interface OutputsDeletedEventObject {
  prevNextOutputIndex: BigNumber;
  newNextOutputIndex: BigNumber;
}
export type OutputsDeletedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OutputsDeletedEventObject
>;

export type OutputsDeletedEventFilter = TypedEventFilter<OutputsDeletedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  identifier: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RelayedMessageEventObject {
  msgHash: string;
}
export type RelayedMessageEvent = TypedEvent<
  [string],
  RelayedMessageEventObject
>;

export type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;

export interface RespectedGameTypeSetEventObject {
  newGameType: number;
  updatedAt: BigNumber;
}
export type RespectedGameTypeSetEvent = TypedEvent<
  [number, BigNumber],
  RespectedGameTypeSetEventObject
>;

export type RespectedGameTypeSetEventFilter =
  TypedEventFilter<RespectedGameTypeSetEvent>;

export interface SentMessageEventObject {
  target: string;
  sender: string;
  message: string;
  messageNonce: BigNumber;
  gasLimit: BigNumber;
}
export type SentMessageEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SentMessageEventObject
>;

export type SentMessageEventFilter = TypedEventFilter<SentMessageEvent>;

export interface SentMessageExtension1EventObject {
  sender: string;
  value: BigNumber;
}
export type SentMessageExtension1Event = TypedEvent<
  [string, BigNumber],
  SentMessageExtension1EventObject
>;

export type SentMessageExtension1EventFilter =
  TypedEventFilter<SentMessageExtension1Event>;

export interface TransactionDeposited_address_bytes32_uint256_bytes_EventObject {
  from: string;
  to: string;
  version: BigNumber;
  opaqueData: string;
}
export type TransactionDeposited_address_bytes32_uint256_bytes_Event =
  TypedEvent<
    [string, string, BigNumber, string],
    TransactionDeposited_address_bytes32_uint256_bytes_EventObject
  >;

export type TransactionDeposited_address_bytes32_uint256_bytes_EventFilter =
  TypedEventFilter<TransactionDeposited_address_bytes32_uint256_bytes_Event>;

export interface TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventObject {
  from: string;
  to: string;
  mint: BigNumber;
  value: BigNumber;
  gasLimit: BigNumber;
  isCreation: boolean;
  data: string;
}
export type TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_Event =
  TypedEvent<
    [string, string, BigNumber, BigNumber, BigNumber, boolean, string],
    TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventObject
  >;

export type TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventFilter =
  TypedEventFilter<TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_Event>;

export interface UnpausedEventObject {}
export type UnpausedEvent = TypedEvent<[], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WhatHappenedEventObject {
  success: boolean;
  returndata: string;
}
export type WhatHappenedEvent = TypedEvent<
  [boolean, string],
  WhatHappenedEventObject
>;

export type WhatHappenedEventFilter = TypedEventFilter<WhatHappenedEvent>;

export interface WithdrawalEventObject {
  value: BigNumber;
  to: string;
  from: string;
}
export type WithdrawalEvent = TypedEvent<
  [BigNumber, string, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface WithdrawalFinalizedEventObject {
  withdrawalHash: string;
  success: boolean;
}
export type WithdrawalFinalizedEvent = TypedEvent<
  [string, boolean],
  WithdrawalFinalizedEventObject
>;

export type WithdrawalFinalizedEventFilter =
  TypedEventFilter<WithdrawalFinalizedEvent>;

export interface WithdrawalInitiatedEventObject {
  l1Token: string;
  l2Token: string;
  from: string;
  to: string;
  amount: BigNumber;
  data: string;
}
export type WithdrawalInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  WithdrawalInitiatedEventObject
>;

export type WithdrawalInitiatedEventFilter =
  TypedEventFilter<WithdrawalInitiatedEvent>;

export interface WithdrawalProvenEventObject {
  withdrawalHash: string;
  from: string;
  to: string;
}
export type WithdrawalProvenEvent = TypedEvent<
  [string, string, string],
  WithdrawalProvenEventObject
>;

export type WithdrawalProvenEventFilter =
  TypedEventFilter<WithdrawalProvenEvent>;

export interface WithdrawalProvenExtension1EventObject {
  withdrawalHash: string;
  proofSubmitter: string;
}
export type WithdrawalProvenExtension1Event = TypedEvent<
  [string, string],
  WithdrawalProvenExtension1EventObject
>;

export type WithdrawalProvenExtension1EventFilter =
  TypedEventFilter<WithdrawalProvenExtension1Event>;

export interface WithdrawerBalanceBurntEventObject {
  amount: BigNumber;
}
export type WithdrawerBalanceBurntEvent = TypedEvent<
  [BigNumber],
  WithdrawerBalanceBurntEventObject
>;

export type WithdrawerBalanceBurntEventFilter =
  TypedEventFilter<WithdrawerBalanceBurntEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface L2OutputOracle_proposeL2Output_Test extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2OutputOracle_proposeL2Output_TestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Sets up the L1 contracts.
     */
    L1(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    enableAltDA(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableCustomGasToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableFaultProofs(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableInterop(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Helper function to propose an output.
     */
    proposeAnotherOutput(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Deploys the Deploy contract without including its bytecode in the bytecode      of this contract by fetching the bytecode dynamically using `vm.getCode()`.      If the Deploy bytecode is included in this contract, then it will double      the compile time and bloat all of the test contract artifacts since they      will also need to include the bytecode for the Deploy contract.      This is a hack as we are pushing solidity to the edge.
     */
    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzInterfaceStructOutput[]] & {
        targetedInterfaces_: StdInvariant.FuzzInterfaceStructOutput[];
      }
    >;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    /**
     * Tests that `proposeL2Output` reverts when given a zero blockhash.
     */
    test_proposeL2Output_emptyOutput_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that has a timestamp in the future.
     */
    test_proposeL2Output_futureTimetamp_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when called by a party      that is not the proposer.
     */
    test_proposeL2Output_notProposer_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Test that `proposeL2Output` succeeds for a valid input      and when a block hash and number are not specified.
     */
    test_proposeL2Output_proposeAnotherOutput_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that does not match the next expected block number.
     */
    test_proposeL2Output_unexpectedBlockNumber_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose block hash does not match the given block hash.
     */
    test_proposeL2Output_unmatchedBlockhash_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose hash does not match the given block hash.
     */
    test_proposeL2Output_wrongFork_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Tests that `proposeL2Output` succeeds when given valid input and      when a block hash and number are specified for reorg protection.
     */
    test_proposeWithBlockhashAndHeight_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    warpToProposeTime(
      _nextBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Sets up the L1 contracts.
   */
  L1(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  enableAltDA(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableCustomGasToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableFaultProofs(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableInterop(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Helper function to propose an output.
   */
  proposeAnotherOutput(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Deploys the Deploy contract without including its bytecode in the bytecode      of this contract by fetching the bytecode dynamically using `vm.getCode()`.      If the Deploy bytecode is included in this contract, then it will double      the compile time and bloat all of the test contract artifacts since they      will also need to include the bytecode for the Deploy contract.      This is a hack as we are pushing solidity to the edge.
   */
  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetInterfaces(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Tests that `proposeL2Output` reverts when given a zero blockhash.
   */
  test_proposeL2Output_emptyOutput_reverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Tests that `proposeL2Output` reverts when given a block number      that has a timestamp in the future.
   */
  test_proposeL2Output_futureTimetamp_reverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Tests that `proposeL2Output` reverts when called by a party      that is not the proposer.
   */
  test_proposeL2Output_notProposer_reverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Test that `proposeL2Output` succeeds for a valid input      and when a block hash and number are not specified.
   */
  test_proposeL2Output_proposeAnotherOutput_succeeds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Tests that `proposeL2Output` reverts when given a block number      that does not match the next expected block number.
   */
  test_proposeL2Output_unexpectedBlockNumber_reverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Tests that `proposeL2Output` reverts when given a block number      whose block hash does not match the given block hash.
   */
  test_proposeL2Output_unmatchedBlockhash_reverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Tests that `proposeL2Output` reverts when given a block number      whose hash does not match the given block hash.
   */
  test_proposeL2Output_wrongFork_reverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Tests that `proposeL2Output` succeeds when given valid input and      when a block hash and number are specified for reorg protection.
   */
  test_proposeWithBlockhashAndHeight_succeeds(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  warpToProposeTime(
    _nextBlockNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Sets up the L1 contracts.
     */
    L1(overrides?: CallOverrides): Promise<void>;

    enableAltDA(overrides?: CallOverrides): Promise<void>;

    enableCustomGasToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableFaultProofs(overrides?: CallOverrides): Promise<void>;

    enableInterop(overrides?: CallOverrides): Promise<void>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Helper function to propose an output.
     */
    proposeAnotherOutput(overrides?: CallOverrides): Promise<void>;

    /**
     * Deploys the Deploy contract without including its bytecode in the bytecode      of this contract by fetching the bytecode dynamically using `vm.getCode()`.      If the Deploy bytecode is included in this contract, then it will double      the compile time and bloat all of the test contract artifacts since they      will also need to include the bytecode for the Deploy contract.      This is a hack as we are pushing solidity to the edge.
     */
    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Tests that `proposeL2Output` reverts when given a zero blockhash.
     */
    test_proposeL2Output_emptyOutput_reverts(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that has a timestamp in the future.
     */
    test_proposeL2Output_futureTimetamp_reverts(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tests that `proposeL2Output` reverts when called by a party      that is not the proposer.
     */
    test_proposeL2Output_notProposer_reverts(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Test that `proposeL2Output` succeeds for a valid input      and when a block hash and number are not specified.
     */
    test_proposeL2Output_proposeAnotherOutput_succeeds(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that does not match the next expected block number.
     */
    test_proposeL2Output_unexpectedBlockNumber_reverts(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose block hash does not match the given block hash.
     */
    test_proposeL2Output_unmatchedBlockhash_reverts(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose hash does not match the given block hash.
     */
    test_proposeL2Output_wrongFork_reverts(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Tests that `proposeL2Output` succeeds when given valid input and      when a block hash and number are specified for reorg protection.
     */
    test_proposeWithBlockhashAndHeight_succeeds(
      overrides?: CallOverrides
    ): Promise<void>;

    warpToProposeTime(
      _nextBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositFailed(address,address,address,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFailedEventFilter;
    DepositFailed(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFailedEventFilter;

    "DepositFinalized(address,address,address,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFinalizedEventFilter;
    DepositFinalized(
      l1Token?: string | null,
      l2Token?: string | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): DepositFinalizedEventFilter;

    "DisputeGameBlacklisted(address)"(
      disputeGame?: string | null
    ): DisputeGameBlacklistedEventFilter;
    DisputeGameBlacklisted(
      disputeGame?: string | null
    ): DisputeGameBlacklistedEventFilter;

    "ERC20BridgeFinalized(address,bytes32,bytes32,address,uint256,bytes)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeFinalizedEventFilter;
    ERC20BridgeFinalized(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeFinalizedEventFilter;

    "ERC20BridgeInitiated(address,bytes32,address,bytes32,uint256,bytes)"(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeInitiatedEventFilter;
    ERC20BridgeInitiated(
      localToken?: string | null,
      remoteToken?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20BridgeInitiatedEventFilter;

    "ERC20DepositInitiated(address,bytes32,address,bytes32,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20DepositInitiatedEventFilter;
    ERC20DepositInitiated(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: string | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20DepositInitiatedEventFilter;

    "ERC20WithdrawalFinalized(address,bytes32,bytes32,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20WithdrawalFinalizedEventFilter;
    ERC20WithdrawalFinalized(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): ERC20WithdrawalFinalizedEventFilter;

    "ETHBridgeFinalized(bytes32,address,uint256,bytes)"(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHBridgeFinalizedEventFilter;
    ETHBridgeFinalized(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHBridgeFinalizedEventFilter;

    "ETHBridgeInitiated(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHBridgeInitiatedEventFilter;
    ETHBridgeInitiated(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHBridgeInitiatedEventFilter;

    "ETHDepositInitiated(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHDepositInitiatedEventFilter;
    ETHDepositInitiated(
      from?: string | null,
      to?: BytesLike | null,
      amount?: null,
      data?: null
    ): ETHDepositInitiatedEventFilter;

    "ETHWithdrawalFinalized(bytes32,address,uint256,bytes)"(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHWithdrawalFinalizedEventFilter;
    ETHWithdrawalFinalized(
      from?: BytesLike | null,
      to?: string | null,
      amount?: null,
      data?: null
    ): ETHWithdrawalFinalizedEventFilter;

    "FailedRelayedMessage(bytes32)"(
      msgHash?: BytesLike | null
    ): FailedRelayedMessageEventFilter;
    FailedRelayedMessage(
      msgHash?: BytesLike | null
    ): FailedRelayedMessageEventFilter;

    "MessagePassed(uint256,address,address,uint256,uint256,bytes,bytes32)"(
      nonce?: BigNumberish | null,
      sender?: string | null,
      target?: string | null,
      value?: null,
      gasLimit?: null,
      data?: null,
      withdrawalHash?: null
    ): MessagePassedEventFilter;
    MessagePassed(
      nonce?: BigNumberish | null,
      sender?: string | null,
      target?: string | null,
      value?: null,
      gasLimit?: null,
      data?: null,
      withdrawalHash?: null
    ): MessagePassedEventFilter;

    "OutputProposed(bytes32,uint256,uint256,uint256)"(
      outputRoot?: BytesLike | null,
      l2OutputIndex?: BigNumberish | null,
      l2BlockNumber?: BigNumberish | null,
      l1Timestamp?: null
    ): OutputProposedEventFilter;
    OutputProposed(
      outputRoot?: BytesLike | null,
      l2OutputIndex?: BigNumberish | null,
      l2BlockNumber?: BigNumberish | null,
      l1Timestamp?: null
    ): OutputProposedEventFilter;

    "OutputsDeleted(uint256,uint256)"(
      prevNextOutputIndex?: BigNumberish | null,
      newNextOutputIndex?: BigNumberish | null
    ): OutputsDeletedEventFilter;
    OutputsDeleted(
      prevNextOutputIndex?: BigNumberish | null,
      newNextOutputIndex?: BigNumberish | null
    ): OutputsDeletedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(string)"(identifier?: null): PausedEventFilter;
    Paused(identifier?: null): PausedEventFilter;

    "RelayedMessage(bytes32)"(
      msgHash?: BytesLike | null
    ): RelayedMessageEventFilter;
    RelayedMessage(msgHash?: BytesLike | null): RelayedMessageEventFilter;

    "RespectedGameTypeSet(uint32,uint64)"(
      newGameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;
    RespectedGameTypeSet(
      newGameType?: BigNumberish | null,
      updatedAt?: BigNumberish | null
    ): RespectedGameTypeSetEventFilter;

    "SentMessage(bytes32,address,bytes,uint256,uint256)"(
      target?: BytesLike | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): SentMessageEventFilter;
    SentMessage(
      target?: BytesLike | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): SentMessageEventFilter;

    "SentMessageExtension1(address,uint256)"(
      sender?: string | null,
      value?: null
    ): SentMessageExtension1EventFilter;
    SentMessageExtension1(
      sender?: string | null,
      value?: null
    ): SentMessageExtension1EventFilter;

    "TransactionDeposited(address,bytes32,uint256,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      version?: BigNumberish | null,
      opaqueData?: null
    ): TransactionDeposited_address_bytes32_uint256_bytes_EventFilter;
    "TransactionDeposited(address,bytes32,uint256,uint256,uint64,bool,bytes)"(
      from?: string | null,
      to?: BytesLike | null,
      mint?: null,
      value?: null,
      gasLimit?: null,
      isCreation?: null,
      data?: null
    ): TransactionDeposited_address_bytes32_uint256_uint256_uint64_bool_bytes_EventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;

    "WhatHappened(bool,bytes)"(
      success?: null,
      returndata?: null
    ): WhatHappenedEventFilter;
    WhatHappened(success?: null, returndata?: null): WhatHappenedEventFilter;

    "Withdrawal(uint256,address,address)"(
      value?: null,
      to?: null,
      from?: null
    ): WithdrawalEventFilter;
    Withdrawal(value?: null, to?: null, from?: null): WithdrawalEventFilter;

    "WithdrawalFinalized(bytes32,bool)"(
      withdrawalHash?: BytesLike | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      withdrawalHash?: BytesLike | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;

    "WithdrawalInitiated(address,bytes32,bytes32,address,uint256,bytes)"(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): WithdrawalInitiatedEventFilter;
    WithdrawalInitiated(
      l1Token?: string | null,
      l2Token?: BytesLike | null,
      from?: BytesLike | null,
      to?: null,
      amount?: null,
      data?: null
    ): WithdrawalInitiatedEventFilter;

    "WithdrawalProven(bytes32,bytes32,address)"(
      withdrawalHash?: BytesLike | null,
      from?: BytesLike | null,
      to?: string | null
    ): WithdrawalProvenEventFilter;
    WithdrawalProven(
      withdrawalHash?: BytesLike | null,
      from?: BytesLike | null,
      to?: string | null
    ): WithdrawalProvenEventFilter;

    "WithdrawalProvenExtension1(bytes32,address)"(
      withdrawalHash?: BytesLike | null,
      proofSubmitter?: string | null
    ): WithdrawalProvenExtension1EventFilter;
    WithdrawalProvenExtension1(
      withdrawalHash?: BytesLike | null,
      proofSubmitter?: string | null
    ): WithdrawalProvenExtension1EventFilter;

    "WithdrawerBalanceBurnt(uint256)"(
      amount?: BigNumberish | null
    ): WithdrawerBalanceBurntEventFilter;
    WithdrawerBalanceBurnt(
      amount?: BigNumberish | null
    ): WithdrawerBalanceBurntEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Sets up the L1 contracts.
     */
    L1(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    enableAltDA(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    enableCustomGasToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableFaultProofs(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableInterop(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Helper function to propose an output.
     */
    proposeAnotherOutput(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Deploys the Deploy contract without including its bytecode in the bytecode      of this contract by fetching the bytecode dynamically using `vm.getCode()`.      If the Deploy bytecode is included in this contract, then it will double      the compile time and bloat all of the test contract artifacts since they      will also need to include the bytecode for the Deploy contract.      This is a hack as we are pushing solidity to the edge.
     */
    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` reverts when given a zero blockhash.
     */
    test_proposeL2Output_emptyOutput_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that has a timestamp in the future.
     */
    test_proposeL2Output_futureTimetamp_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` reverts when called by a party      that is not the proposer.
     */
    test_proposeL2Output_notProposer_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Test that `proposeL2Output` succeeds for a valid input      and when a block hash and number are not specified.
     */
    test_proposeL2Output_proposeAnotherOutput_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that does not match the next expected block number.
     */
    test_proposeL2Output_unexpectedBlockNumber_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose block hash does not match the given block hash.
     */
    test_proposeL2Output_unmatchedBlockhash_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose hash does not match the given block hash.
     */
    test_proposeL2Output_wrongFork_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Tests that `proposeL2Output` succeeds when given valid input and      when a block hash and number are specified for reorg protection.
     */
    test_proposeWithBlockhashAndHeight_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    warpToProposeTime(
      _nextBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Sets up the L1 contracts.
     */
    L1(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableAltDA(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableCustomGasToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableFaultProofs(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableInterop(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Helper function to propose an output.
     */
    proposeAnotherOutput(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Deploys the Deploy contract without including its bytecode in the bytecode      of this contract by fetching the bytecode dynamically using `vm.getCode()`.      If the Deploy bytecode is included in this contract, then it will double      the compile time and bloat all of the test contract artifacts since they      will also need to include the bytecode for the Deploy contract.      This is a hack as we are pushing solidity to the edge.
     */
    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a zero blockhash.
     */
    test_proposeL2Output_emptyOutput_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that has a timestamp in the future.
     */
    test_proposeL2Output_futureTimetamp_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when called by a party      that is not the proposer.
     */
    test_proposeL2Output_notProposer_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Test that `proposeL2Output` succeeds for a valid input      and when a block hash and number are not specified.
     */
    test_proposeL2Output_proposeAnotherOutput_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      that does not match the next expected block number.
     */
    test_proposeL2Output_unexpectedBlockNumber_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose block hash does not match the given block hash.
     */
    test_proposeL2Output_unmatchedBlockhash_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` reverts when given a block number      whose hash does not match the given block hash.
     */
    test_proposeL2Output_wrongFork_reverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Tests that `proposeL2Output` succeeds when given valid input and      when a block hash and number are specified for reorg protection.
     */
    test_proposeWithBlockhashAndHeight_succeeds(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    warpToProposeTime(
      _nextBlockNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
