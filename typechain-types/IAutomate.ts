/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace LibDataTypes {
  export type ModuleDataStruct = { modules: BigNumberish[]; args: BytesLike[] };

  export type ModuleDataStructOutput = [number[], string[]] & {
    modules: number[];
    args: string[];
  };
}

export declare namespace IGelato1Balance {
  export type Gelato1BalanceParamStruct = {
    sponsor: string;
    feeToken: string;
    oneBalanceChainId: BigNumberish;
    nativeToFeeTokenXRateNumerator: BigNumberish;
    nativeToFeeTokenXRateDenominator: BigNumberish;
    correlationId: BytesLike;
  };

  export type Gelato1BalanceParamStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    sponsor: string;
    feeToken: string;
    oneBalanceChainId: BigNumber;
    nativeToFeeTokenXRateNumerator: BigNumber;
    nativeToFeeTokenXRateDenominator: BigNumber;
    correlationId: string;
  };
}

export interface IAutomateInterface extends utils.Interface {
  functions: {
    "cancelTask(bytes32)": FunctionFragment;
    "createTask(address,bytes,(uint8[],bytes[]),address)": FunctionFragment;
    "exec(address,address,bytes,(uint8[],bytes[]),uint256,address,bool)": FunctionFragment;
    "exec1Balance(address,address,bytes,(uint8[],bytes[]),(address,address,uint256,uint256,uint256,bytes32),bool)": FunctionFragment;
    "execBypassModule(address,address,bytes32,bytes32,bytes,bool,bool)": FunctionFragment;
    "execBypassModuleSyncFee(address,address,bytes32,uint256,address,bytes,bool,bool)": FunctionFragment;
    "getFeeDetails()": FunctionFragment;
    "getTaskId(address,address,bytes4,(uint8[],bytes[]),address)": FunctionFragment;
    "getTaskIdsByUser(address)": FunctionFragment;
    "setModule(uint8[],address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelTask"
      | "createTask"
      | "exec"
      | "exec1Balance"
      | "execBypassModule"
      | "execBypassModuleSyncFee"
      | "getFeeDetails"
      | "getTaskId"
      | "getTaskIdsByUser"
      | "setModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [string, BytesLike, LibDataTypes.ModuleDataStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exec",
    values: [
      string,
      string,
      BytesLike,
      LibDataTypes.ModuleDataStruct,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exec1Balance",
    values: [
      string,
      string,
      BytesLike,
      LibDataTypes.ModuleDataStruct,
      IGelato1Balance.Gelato1BalanceParamStruct,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execBypassModule",
    values: [string, string, BytesLike, BytesLike, BytesLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "execBypassModuleSyncFee",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskId",
    values: [string, string, BytesLike, LibDataTypes.ModuleDataStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskIdsByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setModule",
    values: [BigNumberish[], string[]]
  ): string;

  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exec1Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execBypassModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execBypassModuleSyncFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTaskId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskIdsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setModule", data: BytesLike): Result;

  events: {
    "LogUseGelato1Balance(address,address,address,uint256,uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogUseGelato1Balance"): EventFragment;
}

export interface LogUseGelato1BalanceEventObject {
  sponsor: string;
  target: string;
  feeToken: string;
  oneBalanceChainId: BigNumber;
  nativeToFeeTokenXRateNumerator: BigNumber;
  nativeToFeeTokenXRateDenominator: BigNumber;
  correlationId: string;
}
export type LogUseGelato1BalanceEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  LogUseGelato1BalanceEventObject
>;

export type LogUseGelato1BalanceEventFilter =
  TypedEventFilter<LogUseGelato1BalanceEvent>;

export interface IAutomate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAutomateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Terminates a task that was created and Gelato can no longer execute it.
     * @param taskId Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}
     */
    cancelTask(
      taskId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTask(
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exec(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      txFee: BigNumberish,
      feeToken: string,
      revertOnFailure: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exec1Balance(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      oneBalanceParam: IGelato1Balance.Gelato1BalanceParamStruct,
      revertOnFailure: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Execution API called by Gelato, using Gelato 1Balance as fee payment method.
     * @param correlationId Id of the execution to be used for 1Balance settlement.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     */
    execBypassModule(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      correlationId: BytesLike,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Execution API called by Gelato, using Gelato Sync fee as fee payment method.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     * @param txFee Fee paid to Gelato for execution, transfered to Gelato.feeCollector().
     */
    execBypassModuleSyncFee(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      txFee: BigNumberish,
      feeToken: string,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)
     */
    getFeeDetails(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    getTaskId(
      taskCreator: string,
      execAddress: string,
      execSelector: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: CallOverrides
    ): Promise<[string] & { taskId: string }>;

    /**
     * Helper func to query all open tasks by a task creator.
     * @param taskCreator Address of task creator to query.
     */
    getTaskIdsByUser(
      taskCreator: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Sets the address of task modules. Only callable by proxy admin.
     * @param moduleAddresses List of addresses for respective modules.
     * @param modules List of modules to be set
     */
    setModule(
      modules: BigNumberish[],
      moduleAddresses: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Terminates a task that was created and Gelato can no longer execute it.
   * @param taskId Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}
   */
  cancelTask(
    taskId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTask(
    execAddress: string,
    execData: BytesLike,
    moduleData: LibDataTypes.ModuleDataStruct,
    feeToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exec(
    taskCreator: string,
    execAddress: string,
    execData: BytesLike,
    moduleData: LibDataTypes.ModuleDataStruct,
    txFee: BigNumberish,
    feeToken: string,
    revertOnFailure: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exec1Balance(
    taskCreator: string,
    execAddress: string,
    execData: BytesLike,
    moduleData: LibDataTypes.ModuleDataStruct,
    oneBalanceParam: IGelato1Balance.Gelato1BalanceParamStruct,
    revertOnFailure: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Execution API called by Gelato, using Gelato 1Balance as fee payment method.
   * @param correlationId Id of the execution to be used for 1Balance settlement.
   * @param execAddress Address of contract that should be called by Gelato.
   * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
   * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
   * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
   * @param taskCreator The address which created the task.
   * @param taskId Unique hash of the task.
   */
  execBypassModule(
    taskCreator: string,
    execAddress: string,
    taskId: BytesLike,
    correlationId: BytesLike,
    execData: BytesLike,
    revertOnFailure: boolean,
    singleExec: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Execution API called by Gelato, using Gelato Sync fee as fee payment method.
   * @param execAddress Address of contract that should be called by Gelato.
   * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
   * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...
   * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
   * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
   * @param taskCreator The address which created the task.
   * @param taskId Unique hash of the task.
   * @param txFee Fee paid to Gelato for execution, transfered to Gelato.feeCollector().
   */
  execBypassModuleSyncFee(
    taskCreator: string,
    execAddress: string,
    taskId: BytesLike,
    txFee: BigNumberish,
    feeToken: string,
    execData: BytesLike,
    revertOnFailure: boolean,
    singleExec: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)
   */
  getFeeDetails(overrides?: CallOverrides): Promise<[BigNumber, string]>;

  getTaskId(
    taskCreator: string,
    execAddress: string,
    execSelector: BytesLike,
    moduleData: LibDataTypes.ModuleDataStruct,
    feeToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Helper func to query all open tasks by a task creator.
   * @param taskCreator Address of task creator to query.
   */
  getTaskIdsByUser(
    taskCreator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Sets the address of task modules. Only callable by proxy admin.
   * @param moduleAddresses List of addresses for respective modules.
   * @param modules List of modules to be set
   */
  setModule(
    modules: BigNumberish[],
    moduleAddresses: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Terminates a task that was created and Gelato can no longer execute it.
     * @param taskId Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}
     */
    cancelTask(taskId: BytesLike, overrides?: CallOverrides): Promise<void>;

    createTask(
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    exec(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      txFee: BigNumberish,
      feeToken: string,
      revertOnFailure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    exec1Balance(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      oneBalanceParam: IGelato1Balance.Gelato1BalanceParamStruct,
      revertOnFailure: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Execution API called by Gelato, using Gelato 1Balance as fee payment method.
     * @param correlationId Id of the execution to be used for 1Balance settlement.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     */
    execBypassModule(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      correlationId: BytesLike,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Execution API called by Gelato, using Gelato Sync fee as fee payment method.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     * @param txFee Fee paid to Gelato for execution, transfered to Gelato.feeCollector().
     */
    execBypassModuleSyncFee(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      txFee: BigNumberish,
      feeToken: string,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)
     */
    getFeeDetails(overrides?: CallOverrides): Promise<[BigNumber, string]>;

    getTaskId(
      taskCreator: string,
      execAddress: string,
      execSelector: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Helper func to query all open tasks by a task creator.
     * @param taskCreator Address of task creator to query.
     */
    getTaskIdsByUser(
      taskCreator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Sets the address of task modules. Only callable by proxy admin.
     * @param moduleAddresses List of addresses for respective modules.
     * @param modules List of modules to be set
     */
    setModule(
      modules: BigNumberish[],
      moduleAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogUseGelato1Balance(address,address,address,uint256,uint256,uint256,bytes32)"(
      sponsor?: string | null,
      target?: string | null,
      feeToken?: string | null,
      oneBalanceChainId?: null,
      nativeToFeeTokenXRateNumerator?: null,
      nativeToFeeTokenXRateDenominator?: null,
      correlationId?: null
    ): LogUseGelato1BalanceEventFilter;
    LogUseGelato1Balance(
      sponsor?: string | null,
      target?: string | null,
      feeToken?: string | null,
      oneBalanceChainId?: null,
      nativeToFeeTokenXRateNumerator?: null,
      nativeToFeeTokenXRateDenominator?: null,
      correlationId?: null
    ): LogUseGelato1BalanceEventFilter;
  };

  estimateGas: {
    /**
     * Terminates a task that was created and Gelato can no longer execute it.
     * @param taskId Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}
     */
    cancelTask(
      taskId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTask(
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exec(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      txFee: BigNumberish,
      feeToken: string,
      revertOnFailure: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exec1Balance(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      oneBalanceParam: IGelato1Balance.Gelato1BalanceParamStruct,
      revertOnFailure: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Execution API called by Gelato, using Gelato 1Balance as fee payment method.
     * @param correlationId Id of the execution to be used for 1Balance settlement.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     */
    execBypassModule(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      correlationId: BytesLike,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Execution API called by Gelato, using Gelato Sync fee as fee payment method.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     * @param txFee Fee paid to Gelato for execution, transfered to Gelato.feeCollector().
     */
    execBypassModuleSyncFee(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      txFee: BigNumberish,
      feeToken: string,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)
     */
    getFeeDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskId(
      taskCreator: string,
      execAddress: string,
      execSelector: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Helper func to query all open tasks by a task creator.
     * @param taskCreator Address of task creator to query.
     */
    getTaskIdsByUser(
      taskCreator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the address of task modules. Only callable by proxy admin.
     * @param moduleAddresses List of addresses for respective modules.
     * @param modules List of modules to be set
     */
    setModule(
      modules: BigNumberish[],
      moduleAddresses: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Terminates a task that was created and Gelato can no longer execute it.
     * @param taskId Unique hash of the task that is being cancelled. {See LibTaskId-getTaskId}
     */
    cancelTask(
      taskId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTask(
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exec(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      txFee: BigNumberish,
      feeToken: string,
      revertOnFailure: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exec1Balance(
      taskCreator: string,
      execAddress: string,
      execData: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      oneBalanceParam: IGelato1Balance.Gelato1BalanceParamStruct,
      revertOnFailure: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Execution API called by Gelato, using Gelato 1Balance as fee payment method.
     * @param correlationId Id of the execution to be used for 1Balance settlement.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     */
    execBypassModule(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      correlationId: BytesLike,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Execution API called by Gelato, using Gelato Sync fee as fee payment method.
     * @param execAddress Address of contract that should be called by Gelato.
     * @param execData Execution data to be called with / function selector if execution data is yet to be determined.
     * @param feeToken Token used to pay for the execution. ETH = 0xeeeeee...
     * @param revertOnFailure To revert or not if call to execAddress fails. (Used for off-chain simulations)
     * @param singleExec If the task is a SingleExec task. If true, task will be cancelled after execution.
     * @param taskCreator The address which created the task.
     * @param taskId Unique hash of the task.
     * @param txFee Fee paid to Gelato for execution, transfered to Gelato.feeCollector().
     */
    execBypassModuleSyncFee(
      taskCreator: string,
      execAddress: string,
      taskId: BytesLike,
      txFee: BigNumberish,
      feeToken: string,
      execData: BytesLike,
      revertOnFailure: boolean,
      singleExec: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Helper function to query fee and feeToken to be used for payment. (For executions which pays itself)
     */
    getFeeDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaskId(
      taskCreator: string,
      execAddress: string,
      execSelector: BytesLike,
      moduleData: LibDataTypes.ModuleDataStruct,
      feeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Helper func to query all open tasks by a task creator.
     * @param taskCreator Address of task creator to query.
     */
    getTaskIdsByUser(
      taskCreator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the address of task modules. Only callable by proxy admin.
     * @param moduleAddresses List of addresses for respective modules.
     * @param modules List of modules to be set
     */
    setModule(
      modules: BigNumberish[],
      moduleAddresses: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
